
e:/aacrs/02_12/markvisser/git_clone/Timers/timers/target/1.5.0/argon/timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008bb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dcbd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000104  2003e018  000dcbd4  0001e018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006d4  2003e11c  2003e11c  0002e11c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dccd8  000dccd8  0002ccd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dcd00  000dcd00  0002cd00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00176c82  00000000  00000000  0002cd04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d1bc  00000000  00000000  001a3986  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029840  00000000  00000000  001c0b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000032b0  00000000  00000000  001ea382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f58  00000000  00000000  001ed632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047b31  00000000  00000000  001f358a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00049a23  00000000  00000000  0023b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011f467  00000000  00000000  00284ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fd30  00000000  00000000  003a3f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fc19 	bl	d9868 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fc1e 	bl	d987e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e018 	.word	0x2003e018
   d404c:	000dcbd4 	.word	0x000dcbd4
   d4050:	2003e11c 	.word	0x2003e11c
   d4054:	2003e11c 	.word	0x2003e11c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f9ed 	bl	d743c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dcbcc 	.word	0x000dcbcc
   d4084:	000dcb64 	.word	0x000dcb64

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b888 	b.w	d419c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 faf5 	bl	d467c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b993 	b.w	d73c0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bc35 	b.w	d6908 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f002 bc33 	b.w	d6908 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f002 bc39 	b.w	d6918 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f002 bc37 	b.w	d6918 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z14Name_of_DevicePKcS0_>:



/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data){
   d40bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 strncpy(dev_name, data, sizeof(dev_name)-1);
   d40be:	4c10      	ldr	r4, [pc, #64]	; (d4100 <_Z14Name_of_DevicePKcS0_+0x44>)
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d40c0:	4e10      	ldr	r6, [pc, #64]	; (d4104 <_Z14Name_of_DevicePKcS0_+0x48>)



/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data){
   d40c2:	4605      	mov	r5, r0
 strncpy(dev_name, data, sizeof(dev_name)-1);
   d40c4:	221f      	movs	r2, #31
   d40c6:	4620      	mov	r0, r4
   d40c8:	f005 fc62 	bl	d9990 <strncpy>
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
   d40cc:	f003 fd9e 	bl	d7c0c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40d0:	462b      	mov	r3, r5
   d40d2:	9400      	str	r4, [sp, #0]
   d40d4:	4a0c      	ldr	r2, [pc, #48]	; (d4108 <_Z14Name_of_DevicePKcS0_+0x4c>)
   d40d6:	2101      	movs	r1, #1
   d40d8:	f003 f83d 	bl	d7156 <_ZN5Print11printf_implEbPKcz>
  publishName = true;
   d40dc:	4b0b      	ldr	r3, [pc, #44]	; (d410c <_Z14Name_of_DevicePKcS0_+0x50>)
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d40de:	4621      	mov	r1, r4
/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data){
 strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d40e0:	2501      	movs	r5, #1
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d40e2:	2220      	movs	r2, #32
   d40e4:	4630      	mov	r0, r6
/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data){
 strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d40e6:	701d      	strb	r5, [r3, #0]
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d40e8:	f005 fc52 	bl	d9990 <strncpy>
  Serial.printlnf("variable label  that is copied from dev_name : %s", VARIABLE_LABEL);
   d40ec:	f003 fd8e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d40f0:	4a07      	ldr	r2, [pc, #28]	; (d4110 <_Z14Name_of_DevicePKcS0_+0x54>)
   d40f2:	4633      	mov	r3, r6
   d40f4:	4629      	mov	r1, r5
 }
   d40f6:	b002      	add	sp, #8
   d40f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d40fc:	f003 b82b 	b.w	d7156 <_ZN5Print11printf_implEbPKcz>
   d4100:	2003e1ce 	.word	0x2003e1ce
   d4104:	2003e1ac 	.word	0x2003e1ac
   d4108:	000dbbb8 	.word	0x000dbbb8
   d410c:	2003e1cd 	.word	0x2003e1cd
   d4110:	000dbbe4 	.word	0x000dbbe4

000d4114 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.25>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4114:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4116:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4118:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d411a:	689b      	ldr	r3, [r3, #8]
   d411c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d411e:	68a3      	ldr	r3, [r4, #8]
   d4120:	3b01      	subs	r3, #1
   d4122:	60a3      	str	r3, [r4, #8]
   d4124:	b92b      	cbnz	r3, d4132 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.25+0x1e>
            _M_destroy();
   d4126:	6823      	ldr	r3, [r4, #0]
   d4128:	4620      	mov	r0, r4
   d412a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d412c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4130:	4718      	bx	r3
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4134:	b510      	push	{r4, lr}
   d4136:	4b06      	ldr	r3, [pc, #24]	; (d4150 <_ZN9TCPClientD1Ev+0x1c>)
   d4138:	6003      	str	r3, [r0, #0]
   d413a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413c:	6980      	ldr	r0, [r0, #24]
   d413e:	b128      	cbz	r0, d414c <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4140:	6843      	ldr	r3, [r0, #4]
   d4142:	3b01      	subs	r3, #1
   d4144:	6043      	str	r3, [r0, #4]
   d4146:	b90b      	cbnz	r3, d414c <_ZN9TCPClientD1Ev+0x18>
   d4148:	f7ff ffe4 	bl	d4114 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.25>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000dc738 	.word	0x000dc738

000d4154 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff ffec 	bl	d4134 <_ZN9TCPClientD1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZN9TCPClientD0Ev>:
   d4160:	b510      	push	{r4, lr}
   d4162:	4604      	mov	r4, r0
   d4164:	f7ff ffe6 	bl	d4134 <_ZN9TCPClientD1Ev>
   d4168:	4620      	mov	r0, r4
   d416a:	211c      	movs	r1, #28
   d416c:	f004 fb6c 	bl	d8848 <_ZdlPvj>
   d4170:	4620      	mov	r0, r4
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_Z9softDelaym>:

 inline void softDelay(uint32_t msDelay){
   d4174:	b570      	push	{r4, r5, r6, lr}
   d4176:	4606      	mov	r6, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4178:	f002 f99a 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d417c:	4c06      	ldr	r4, [pc, #24]	; (d4198 <_Z9softDelaym+0x24>)
   d417e:	4605      	mov	r5, r0
   d4180:	f002 f996 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
      for (uint32_t ms = millis(); 
   d4184:	1b40      	subs	r0, r0, r5
   d4186:	42b0      	cmp	r0, r6
   d4188:	d205      	bcs.n	d4196 <_Z9softDelaym+0x22>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d418a:	f002 f991 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d418e:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4190:	f002 fb82 	bl	d6898 <spark_process>
   d4194:	e7f4      	b.n	d4180 <_Z9softDelaym+0xc>
   d4196:	bd70      	pop	{r4, r5, r6, pc}
   d4198:	2003e708 	.word	0x2003e708

000d419c <setup>:
            millis() - ms < msDelay;  
           Particle.process());
}
void setup() {
   d419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d41a0:	b08a      	sub	sp, #40	; 0x28

  Serial.begin(115200);
   d41a2:	f003 fd33 	bl	d7c0c <_Z16_fetch_usbserialv>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d41a6:	2400      	movs	r4, #0
   d41a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d41ac:	f003 fd22 	bl	d7bf4 <_ZN9USBSerial5beginEl>
   d41b0:	2301      	movs	r3, #1
   d41b2:	4622      	mov	r2, r4
   d41b4:	496d      	ldr	r1, [pc, #436]	; (d436c <setup+0x1d0>)
   d41b6:	9401      	str	r4, [sp, #4]
   d41b8:	9400      	str	r4, [sp, #0]
   d41ba:	486d      	ldr	r0, [pc, #436]	; (d4370 <setup+0x1d4>)
   d41bc:	f002 fb8c 	bl	d68d8 <spark_subscribe>
  Particle.subscribe("particle/device/name", Name_of_Device);
  softDelay(3000);
   d41c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d41c4:	f7ff ffd6 	bl	d4174 <_Z9softDelaym>
   d41c8:	4b6a      	ldr	r3, [pc, #424]	; (d4374 <setup+0x1d8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41ca:	4969      	ldr	r1, [pc, #420]	; (d4370 <setup+0x1d4>)
   d41cc:	781b      	ldrb	r3, [r3, #0]
   d41ce:	f88d 3000 	strb.w	r3, [sp]
   d41d2:	a808      	add	r0, sp, #32
   d41d4:	233c      	movs	r3, #60	; 0x3c
   d41d6:	4622      	mov	r2, r4
   d41d8:	f003 fa9e 	bl	d7718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   d41de:	b128      	cbz	r0, d41ec <setup+0x50>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41e0:	6843      	ldr	r3, [r0, #4]
   d41e2:	3b01      	subs	r3, #1
   d41e4:	6043      	str	r3, [r0, #4]
   d41e6:	b90b      	cbnz	r3, d41ec <setup+0x50>
   d41e8:	f7ff ff94 	bl	d4114 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.25>
  Particle.publish("particle/device/name");//ask the cloud for the name to be sent to you
  softDelay(3000);
   d41ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d41f0:	f7ff ffc0 	bl	d4174 <_Z9softDelaym>
  Time.zone(+2);
   d41f4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d41f8:	f003 f830 	bl	d725c <_ZN9TimeClass4zoneEf>
  pinMode(RELAY1, OUTPUT);//output for triggered led
   d41fc:	2101      	movs	r1, #1
   d41fe:	2004      	movs	r0, #4
   d4200:	f004 fa8a 	bl	d8718 <pinMode>
  pinMode(RELAY2, OUTPUT);//output for triggered led
   d4204:	2101      	movs	r1, #1
   d4206:	2005      	movs	r0, #5
   d4208:	f004 fa86 	bl	d8718 <pinMode>
  pinMode(led_red, OUTPUT);//output for triggered led
   d420c:	2101      	movs	r1, #1
   d420e:	2006      	movs	r0, #6
   d4210:	f004 fa82 	bl	d8718 <pinMode>
  pinMode(led_green, OUTPUT);//output for triggered led
   d4214:	2101      	movs	r1, #1
   d4216:	2008      	movs	r0, #8
   d4218:	f004 fa7e 	bl	d8718 <pinMode>
  pinMode(led_blue, OUTPUT);//output for triggered led
   d421c:	2101      	movs	r1, #1
   d421e:	2007      	movs	r0, #7
   d4220:	f004 fa7a 	bl	d8718 <pinMode>
  pinMode(PCH1, OUTPUT);//output for triggered led
   d4224:	2101      	movs	r1, #1
   d4226:	2012      	movs	r0, #18
   d4228:	f004 fa76 	bl	d8718 <pinMode>
  pinMode(NCH1, OUTPUT);//output for triggered led
   d422c:	2101      	movs	r1, #1
   d422e:	2013      	movs	r0, #19
   d4230:	f004 fa72 	bl	d8718 <pinMode>
  pinMode(LOAD, INPUT);//output for triggered led
   d4234:	2100      	movs	r1, #0
   d4236:	2003      	movs	r0, #3
   d4238:	f004 fa6e 	bl	d8718 <pinMode>
  pinMode(CLEAR, INPUT);//output for triggered led
   d423c:	2100      	movs	r1, #0
   d423e:	2002      	movs	r0, #2
   d4240:	f004 fa6a 	bl	d8718 <pinMode>
  pinMode(BATT, INPUT); // argon battery 
   d4244:	2100      	movs	r1, #0
   d4246:	2021      	movs	r0, #33	; 0x21
   d4248:	f004 fa66 	bl	d8718 <pinMode>

  // set initial IO states
  digitalWrite (led_blue, HIGH);//led off
   d424c:	2101      	movs	r1, #1
   d424e:	2007      	movs	r0, #7
   d4250:	f004 fa73 	bl	d873a <digitalWrite>
  digitalWrite (led_green, HIGH);//led off
   d4254:	2101      	movs	r1, #1
   d4256:	2008      	movs	r0, #8
   d4258:	f004 fa6f 	bl	d873a <digitalWrite>
  digitalWrite (led_red, HIGH);//led off
   d425c:	2101      	movs	r1, #1
   d425e:	2006      	movs	r0, #6
   d4260:	f004 fa6b 	bl	d873a <digitalWrite>
  digitalWrite (RELAY1, LOW);//relay off
   d4264:	2100      	movs	r1, #0
   d4266:	2004      	movs	r0, #4
   d4268:	f004 fa67 	bl	d873a <digitalWrite>
  digitalWrite (RELAY2, LOW);//relay off
   d426c:	2100      	movs	r1, #0
   d426e:	2005      	movs	r0, #5
   d4270:	f004 fa63 	bl	d873a <digitalWrite>
  digitalWrite (LOAD, LOW);//off
   d4274:	2100      	movs	r1, #0
   d4276:	2003      	movs	r0, #3
   d4278:	f004 fa5f 	bl	d873a <digitalWrite>
  digitalWrite (CLEAR, LOW);//off
   d427c:	2100      	movs	r1, #0
   d427e:	2002      	movs	r0, #2
   d4280:	f004 fa5b 	bl	d873a <digitalWrite>
  pinMode(BATT, INPUT);
   d4284:	2100      	movs	r1, #0
   d4286:	2021      	movs	r0, #33	; 0x21
   d4288:	f004 fa46 	bl	d8718 <pinMode>
  // Subscribe to the integration response event
  //Particle.subscribe("UbidotsWebhook", shutterOpenHandler);
  //Particle.subscribe("UbidotsWebhook", shutterCloseHandler);
  valueShutterHourOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_OPEN);//device api label,variable api label
   d428c:	4a3a      	ldr	r2, [pc, #232]	; (d4378 <setup+0x1dc>)
   d428e:	493b      	ldr	r1, [pc, #236]	; (d437c <setup+0x1e0>)
   d4290:	483b      	ldr	r0, [pc, #236]	; (d4380 <setup+0x1e4>)
   d4292:	4e3c      	ldr	r6, [pc, #240]	; (d4384 <setup+0x1e8>)
  valueShutterMinuteOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_OPEN);//device api label,variable api label
   d4294:	4f3c      	ldr	r7, [pc, #240]	; (d4388 <setup+0x1ec>)
  valueShutterHourClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_CLOSE);//device api label,variable api label
   d4296:	4c3d      	ldr	r4, [pc, #244]	; (d438c <setup+0x1f0>)
  valueShutterMinuteClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_CLOSE);//device api label,variable api label
   d4298:	4d3d      	ldr	r5, [pc, #244]	; (d4390 <setup+0x1f4>)
  digitalWrite (CLEAR, LOW);//off
  pinMode(BATT, INPUT);
  // Subscribe to the integration response event
  //Particle.subscribe("UbidotsWebhook", shutterOpenHandler);
  //Particle.subscribe("UbidotsWebhook", shutterCloseHandler);
  valueShutterHourOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_OPEN);//device api label,variable api label
   d429a:	f001 f927 	bl	d54ec <_ZN7Ubidots3getEPKcS1_>
  valueShutterMinuteOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_OPEN);//device api label,variable api label
   d429e:	4a3d      	ldr	r2, [pc, #244]	; (d4394 <setup+0x1f8>)
   d42a0:	4936      	ldr	r1, [pc, #216]	; (d437c <setup+0x1e0>)
   d42a2:	4837      	ldr	r0, [pc, #220]	; (d4380 <setup+0x1e4>)
  digitalWrite (CLEAR, LOW);//off
  pinMode(BATT, INPUT);
  // Subscribe to the integration response event
  //Particle.subscribe("UbidotsWebhook", shutterOpenHandler);
  //Particle.subscribe("UbidotsWebhook", shutterCloseHandler);
  valueShutterHourOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_OPEN);//device api label,variable api label
   d42a4:	ed86 0a00 	vstr	s0, [r6]
  valueShutterMinuteOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_OPEN);//device api label,variable api label
   d42a8:	f001 f920 	bl	d54ec <_ZN7Ubidots3getEPKcS1_>
  valueShutterHourClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_CLOSE);//device api label,variable api label
   d42ac:	4a3a      	ldr	r2, [pc, #232]	; (d4398 <setup+0x1fc>)
   d42ae:	4933      	ldr	r1, [pc, #204]	; (d437c <setup+0x1e0>)
   d42b0:	4833      	ldr	r0, [pc, #204]	; (d4380 <setup+0x1e4>)
  pinMode(BATT, INPUT);
  // Subscribe to the integration response event
  //Particle.subscribe("UbidotsWebhook", shutterOpenHandler);
  //Particle.subscribe("UbidotsWebhook", shutterCloseHandler);
  valueShutterHourOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_OPEN);//device api label,variable api label
  valueShutterMinuteOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_OPEN);//device api label,variable api label
   d42b2:	ed87 0a00 	vstr	s0, [r7]
  valueShutterHourClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_CLOSE);//device api label,variable api label
   d42b6:	f001 f919 	bl	d54ec <_ZN7Ubidots3getEPKcS1_>
  valueShutterMinuteClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_CLOSE);//device api label,variable api label
   d42ba:	4a38      	ldr	r2, [pc, #224]	; (d439c <setup+0x200>)
   d42bc:	492f      	ldr	r1, [pc, #188]	; (d437c <setup+0x1e0>)
   d42be:	4830      	ldr	r0, [pc, #192]	; (d4380 <setup+0x1e4>)
  // Subscribe to the integration response event
  //Particle.subscribe("UbidotsWebhook", shutterOpenHandler);
  //Particle.subscribe("UbidotsWebhook", shutterCloseHandler);
  valueShutterHourOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_OPEN);//device api label,variable api label
  valueShutterMinuteOpen = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_OPEN);//device api label,variable api label
  valueShutterHourClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_HOUR_CLOSE);//device api label,variable api label
   d42c0:	ed84 0a00 	vstr	s0, [r4]
  valueShutterMinuteClose = ubidots.get(DATA_SOURCE_TAG_DEVICE_API,DATA_SOURCE_TAG_SHUTTER_MINUTE_CLOSE);//device api label,variable api label
   d42c4:	f001 f912 	bl	d54ec <_ZN7Ubidots3getEPKcS1_>
   d42c8:	ed85 0a00 	vstr	s0, [r5]
  Serial.printf("shutter OPEN %.f:%.f CLOSE %.f:%.f\n",valueShutterHourOpen,valueShutterMinuteOpen,valueShutterHourClose,valueShutterMinuteClose);
   d42cc:	f003 fc9e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d42d0:	4680      	mov	r8, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42d2:	6828      	ldr	r0, [r5, #0]
   d42d4:	f004 fe34 	bl	d8f40 <__aeabi_f2d>
   d42d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d42dc:	6820      	ldr	r0, [r4, #0]
   d42de:	f004 fe2f 	bl	d8f40 <__aeabi_f2d>
   d42e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42e6:	6838      	ldr	r0, [r7, #0]
   d42e8:	f004 fe2a 	bl	d8f40 <__aeabi_f2d>
   d42ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42f0:	6830      	ldr	r0, [r6, #0]
   d42f2:	f004 fe25 	bl	d8f40 <__aeabi_f2d>
   d42f6:	4a2a      	ldr	r2, [pc, #168]	; (d43a0 <setup+0x204>)
   d42f8:	e9cd 0100 	strd	r0, r1, [sp]
   d42fc:	2100      	movs	r1, #0
   d42fe:	4640      	mov	r0, r8
   d4300:	f002 ff29 	bl	d7156 <_ZN5Print11printf_implEbPKcz>

  // create the alarms 
  Alarm.alarmRepeat(valueShutterHourOpen,valueShutterMinuteOpen,0, shutterOpenAlarm);  // 8:30am every day
   d4304:	ed97 7a00 	vldr	s14, [r7]
   d4308:	edd6 7a00 	vldr	s15, [r6]
   d430c:	4b25      	ldr	r3, [pc, #148]	; (d43a4 <setup+0x208>)
   d430e:	9300      	str	r3, [sp, #0]
   d4310:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d4314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4318:	ee17 2a10 	vmov	r2, s14
   d431c:	ee17 1a90 	vmov	r1, s15
   d4320:	2300      	movs	r3, #0
   d4322:	4821      	ldr	r0, [pc, #132]	; (d43a8 <setup+0x20c>)
   d4324:	f000 fbd0 	bl	d4ac8 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
  Alarm.alarmRepeat(valueShutterHourClose,valueShutterMinuteClose,0,shutterCloseAlarm);  // 5:45pm every day
   d4328:	edd4 7a00 	vldr	s15, [r4]
   d432c:	ed95 7a00 	vldr	s14, [r5]
   d4330:	4b1e      	ldr	r3, [pc, #120]	; (d43ac <setup+0x210>)
   d4332:	9300      	str	r3, [sp, #0]
   d4334:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d4338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d433c:	ee17 2a10 	vmov	r2, s14
   d4340:	ee17 1a90 	vmov	r1, s15
   d4344:	2300      	movs	r3, #0
   d4346:	4818      	ldr	r0, [pc, #96]	; (d43a8 <setup+0x20c>)
   d4348:	f000 fbbe 	bl	d4ac8 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
  ubidots.setDebug(true);//Uncomment this line for printing debug messages
   d434c:	2101      	movs	r1, #1
   d434e:	480c      	ldr	r0, [pc, #48]	; (d4380 <setup+0x1e4>)
   d4350:	f001 f8e2 	bl	d5518 <_ZN7Ubidots8setDebugEb>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4354:	2200      	movs	r2, #0
   d4356:	9201      	str	r2, [sp, #4]
   d4358:	9200      	str	r2, [sp, #0]
   d435a:	2301      	movs	r3, #1
   d435c:	4914      	ldr	r1, [pc, #80]	; (d43b0 <setup+0x214>)
   d435e:	4815      	ldr	r0, [pc, #84]	; (d43b4 <setup+0x218>)
   d4360:	f002 faba 	bl	d68d8 <spark_subscribe>
 //Particle.subscribe("timerwebhook", handlerShutterHourOpen);
 //Particle.subscribe("timerwebhook", handlerShutterHourClose);
 //Particle.subscribe("timerwebhook", handlerShutterMinuteOpen);
 //Particle.subscribe("timerwebhook", handlerShutterMinuteClose);
 Particle.subscribe("timerwebhook", myHandler);
}
   d4364:	b00a      	add	sp, #40	; 0x28
   d4366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d436a:	bf00      	nop
   d436c:	000d40bd 	.word	0x000d40bd
   d4370:	000dbc16 	.word	0x000dbc16
   d4374:	2003e128 	.word	0x2003e128
   d4378:	000dbc2b 	.word	0x000dbc2b
   d437c:	2003e1ac 	.word	0x2003e1ac
   d4380:	2003e158 	.word	0x2003e158
   d4384:	2003e124 	.word	0x2003e124
   d4388:	2003e120 	.word	0x2003e120
   d438c:	2003e12c 	.word	0x2003e12c
   d4390:	2003e154 	.word	0x2003e154
   d4394:	000dbc3b 	.word	0x000dbc3b
   d4398:	000dbc4d 	.word	0x000dbc4d
   d439c:	000dbc5e 	.word	0x000dbc5e
   d43a0:	000dbc71 	.word	0x000dbc71
   d43a4:	000d4405 	.word	0x000d4405
   d43a8:	2003e1f0 	.word	0x2003e1f0
   d43ac:	000d4441 	.word	0x000d4441
   d43b0:	000d4581 	.word	0x000d4581
   d43b4:	000dbc95 	.word	0x000dbc95

000d43b8 <_Z12PostToUbidotv>:
  digitalWrite (led_red, LOW);//led off    
  ubidots.add(shutterIndicator, 0);//show ubidots shutter is close
  PostToUbidot(); // send to ubidot
}

void PostToUbidot(void){
   d43b8:	b510      	push	{r4, lr}

 char* context = (char *) malloc(sizeof(char) * 50);
   d43ba:	2032      	movs	r0, #50	; 0x32
   d43bc:	f002 faa4 	bl	d6908 <malloc>
 //Builds the context with the coordinates to send to Ubidots
 ubidots.getContext(context);
   d43c0:	4601      	mov	r1, r0
  PostToUbidot(); // send to ubidot
}

void PostToUbidot(void){

 char* context = (char *) malloc(sizeof(char) * 50);
   d43c2:	4604      	mov	r4, r0
 //Builds the context with the coordinates to send to Ubidots
 ubidots.getContext(context);
   d43c4:	480b      	ldr	r0, [pc, #44]	; (d43f4 <_Z12PostToUbidotv+0x3c>)
   d43c6:	f001 f911 	bl	d55ec <_ZN7Ubidots10getContextEPc>
 bool bufferSent = false;
 bufferSent = ubidots.send(VARIABLE_LABEL, PRIVATE);//Will use particle webhooks to send data
   d43ca:	4b0b      	ldr	r3, [pc, #44]	; (d43f8 <_Z12PostToUbidotv+0x40>)
   d43cc:	490b      	ldr	r1, [pc, #44]	; (d43fc <_Z12PostToUbidotv+0x44>)
   d43ce:	781a      	ldrb	r2, [r3, #0]
   d43d0:	4808      	ldr	r0, [pc, #32]	; (d43f4 <_Z12PostToUbidotv+0x3c>)
   d43d2:	f001 f887 	bl	d54e4 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

 if(bufferSent){
   d43d6:	b120      	cbz	r0, d43e2 <_Z12PostToUbidotv+0x2a>
   //Do something if values were sent properly
   Serial.println("Values sent by the device");
   d43d8:	f003 fc18 	bl	d7c0c <_Z16_fetch_usbserialv>
   d43dc:	4908      	ldr	r1, [pc, #32]	; (d4400 <_Z12PostToUbidotv+0x48>)
   d43de:	f002 fe90 	bl	d7102 <_ZN5Print7printlnEPKc>
  }
 //frees memory
 free(context);
   d43e2:	4620      	mov	r0, r4
   d43e4:	f002 fa98 	bl	d6918 <free>
 delay(2000);
   d43e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d43ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   //Do something if values were sent properly
   Serial.println("Values sent by the device");
  }
 //frees memory
 free(context);
 delay(2000);
   d43f0:	f002 bfa0 	b.w	d7334 <delay>
   d43f4:	2003e158 	.word	0x2003e158
   d43f8:	2003e150 	.word	0x2003e150
   d43fc:	2003e1ac 	.word	0x2003e1ac
   d4400:	000dbca2 	.word	0x000dbca2

000d4404 <_Z16shutterOpenAlarmv>:
 Particle.subscribe("timerwebhook", myHandler);
}


// functions to be called when an alarm triggers:
void shutterOpenAlarm(){
   d4404:	b508      	push	{r3, lr}
  Serial.println("Alarm: - OPEN SHUTTER");   
   d4406:	f003 fc01 	bl	d7c0c <_Z16_fetch_usbserialv>
   d440a:	490a      	ldr	r1, [pc, #40]	; (d4434 <_Z16shutterOpenAlarmv+0x30>)
   d440c:	f002 fe79 	bl	d7102 <_ZN5Print7printlnEPKc>
  digitalWrite (led_green, LOW);//led on
   d4410:	2100      	movs	r1, #0
   d4412:	2008      	movs	r0, #8
   d4414:	f004 f991 	bl	d873a <digitalWrite>
  digitalWrite (led_red, HIGH);//led off
   d4418:	2101      	movs	r1, #1
   d441a:	2006      	movs	r0, #6
   d441c:	f004 f98d 	bl	d873a <digitalWrite>
  ubidots.add(shutterIndicator, 1);//show ubidots shutter is open
   d4420:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d4424:	4904      	ldr	r1, [pc, #16]	; (d4438 <_Z16shutterOpenAlarmv+0x34>)
   d4426:	4805      	ldr	r0, [pc, #20]	; (d443c <_Z16shutterOpenAlarmv+0x38>)
   d4428:	f001 f853 	bl	d54d2 <_ZN7Ubidots3addEPcf>
  PostToUbidot(); // send to ubidot
}
   d442c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void shutterOpenAlarm(){
  Serial.println("Alarm: - OPEN SHUTTER");   
  digitalWrite (led_green, LOW);//led on
  digitalWrite (led_red, HIGH);//led off
  ubidots.add(shutterIndicator, 1);//show ubidots shutter is open
  PostToUbidot(); // send to ubidot
   d4430:	f7ff bfc2 	b.w	d43b8 <_Z12PostToUbidotv>
   d4434:	000dbcbc 	.word	0x000dbcbc
   d4438:	2003e018 	.word	0x2003e018
   d443c:	2003e158 	.word	0x2003e158

000d4440 <_Z17shutterCloseAlarmv>:
}

void shutterCloseAlarm(){
   d4440:	b508      	push	{r3, lr}
  Serial.printf("Alarm: - CLOSE shutter\n");  
   d4442:	f003 fbe3 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4446:	4a0b      	ldr	r2, [pc, #44]	; (d4474 <_Z17shutterCloseAlarmv+0x34>)
   d4448:	2100      	movs	r1, #0
   d444a:	f002 fe84 	bl	d7156 <_ZN5Print11printf_implEbPKcz>
  digitalWrite (led_green, HIGH);//led off    
   d444e:	2101      	movs	r1, #1
   d4450:	2008      	movs	r0, #8
   d4452:	f004 f972 	bl	d873a <digitalWrite>
  digitalWrite (led_red, LOW);//led off    
   d4456:	2100      	movs	r1, #0
   d4458:	2006      	movs	r0, #6
   d445a:	f004 f96e 	bl	d873a <digitalWrite>
  ubidots.add(shutterIndicator, 0);//show ubidots shutter is close
   d445e:	ed9f 0a06 	vldr	s0, [pc, #24]	; d4478 <_Z17shutterCloseAlarmv+0x38>
   d4462:	4906      	ldr	r1, [pc, #24]	; (d447c <_Z17shutterCloseAlarmv+0x3c>)
   d4464:	4806      	ldr	r0, [pc, #24]	; (d4480 <_Z17shutterCloseAlarmv+0x40>)
   d4466:	f001 f834 	bl	d54d2 <_ZN7Ubidots3addEPcf>
  PostToUbidot(); // send to ubidot
}
   d446a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void shutterCloseAlarm(){
  Serial.printf("Alarm: - CLOSE shutter\n");  
  digitalWrite (led_green, HIGH);//led off    
  digitalWrite (led_red, LOW);//led off    
  ubidots.add(shutterIndicator, 0);//show ubidots shutter is close
  PostToUbidot(); // send to ubidot
   d446e:	f7ff bfa3 	b.w	d43b8 <_Z12PostToUbidotv>
   d4472:	bf00      	nop
   d4474:	000dbcd2 	.word	0x000dbcd2
   d4478:	00000000 	.word	0x00000000
   d447c:	2003e018 	.word	0x2003e018
   d4480:	2003e158 	.word	0x2003e158

000d4484 <_Z10setControlf>:
 free(context);
 delay(2000);
}

float setControl(float value) {
    if (value == 3) {
   d4484:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4488:	eeb4 0a67 	vcmp.f32	s0, s15
   d448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4490:	d00b      	beq.n	d44aa <_Z10setControlf+0x26>
        return 3;
    }
    if (value == 1) {
   d4492:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        return 1;
    }
    return 2;
   d4496:	eeb4 0a67 	vcmp.f32	s0, s15
   d449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d449e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d44a2:	bf08      	it	eq
   d44a4:	eeb0 0a67 	vmoveq.f32	s0, s15
   d44a8:	4770      	bx	lr
 delay(2000);
}

float setControl(float value) {
    if (value == 3) {
        return 3;
   d44aa:	eeb0 0a67 	vmov.f32	s0, s15
    }
    if (value == 1) {
        return 1;
    }
    return 2;
}
   d44ae:	4770      	bx	lr

000d44b0 <_Z25checkCurrentShutterStatusv>:
      Serial.printf("shutter contrll %f \n",shuttercontrol);
}



void checkCurrentShutterStatus(){
   d44b0:	b508      	push	{r3, lr}
   d44b2:	ed2d 8b02 	vpush	{d8}
//&&(valueShutterMinuteOpen >= Time.minute() <=valueShutterMinuteClose )
//

if (((valueShutterHourOpen) < Time.hour()) && (Time.hour() < valueShutterHourClose ) ){
   d44b6:	4b1d      	ldr	r3, [pc, #116]	; (d452c <_Z25checkCurrentShutterStatusv+0x7c>)
   d44b8:	ed93 8a00 	vldr	s16, [r3]
   d44bc:	f002 ff12 	bl	d72e4 <_ZN9TimeClass4hourEv>
   d44c0:	ee07 0a90 	vmov	s15, r0
   d44c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d44c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d44cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44d0:	d50d      	bpl.n	d44ee <_Z25checkCurrentShutterStatusv+0x3e>
   d44d2:	f002 ff07 	bl	d72e4 <_ZN9TimeClass4hourEv>
   d44d6:	4b16      	ldr	r3, [pc, #88]	; (d4530 <_Z25checkCurrentShutterStatusv+0x80>)
   d44d8:	ee07 0a90 	vmov	s15, r0
   d44dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d44e0:	edd3 7a00 	vldr	s15, [r3]
   d44e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d44e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44ec:	d40a      	bmi.n	d4504 <_Z25checkCurrentShutterStatusv+0x54>
  ubidots.add(shutterIndicator, 1);//show ubidots shutter is open
  PostToUbidot(); // send to ubidot
}

else {
  digitalWrite (led_green, HIGH);//led off    
   d44ee:	2101      	movs	r1, #1
   d44f0:	2008      	movs	r0, #8
   d44f2:	f004 f922 	bl	d873a <digitalWrite>
  digitalWrite (led_red, LOW);//led on
   d44f6:	2100      	movs	r1, #0
   d44f8:	2006      	movs	r0, #6
   d44fa:	f004 f91e 	bl	d873a <digitalWrite>
  ubidots.add(shutterIndicator, 0);//show ubidots shutter is close
   d44fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; d4534 <_Z25checkCurrentShutterStatusv+0x84>
   d4502:	e009      	b.n	d4518 <_Z25checkCurrentShutterStatusv+0x68>
void checkCurrentShutterStatus(){
//&&(valueShutterMinuteOpen >= Time.minute() <=valueShutterMinuteClose )
//

if (((valueShutterHourOpen) < Time.hour()) && (Time.hour() < valueShutterHourClose ) ){
  digitalWrite (led_green, LOW);//led on
   d4504:	2100      	movs	r1, #0
   d4506:	2008      	movs	r0, #8
   d4508:	f004 f917 	bl	d873a <digitalWrite>
  digitalWrite (led_red, HIGH);//led off
   d450c:	2101      	movs	r1, #1
   d450e:	2006      	movs	r0, #6
   d4510:	f004 f913 	bl	d873a <digitalWrite>
  ubidots.add(shutterIndicator, 1);//show ubidots shutter is open
   d4514:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d4518:	4907      	ldr	r1, [pc, #28]	; (d4538 <_Z25checkCurrentShutterStatusv+0x88>)
   d451a:	4808      	ldr	r0, [pc, #32]	; (d453c <_Z25checkCurrentShutterStatusv+0x8c>)
   d451c:	f000 ffd9 	bl	d54d2 <_ZN7Ubidots3addEPcf>
  ubidots.add(shutterIndicator, 0);//show ubidots shutter is close
  PostToUbidot(); // send to ubidot
}


}
   d4520:	ecbd 8b02 	vpop	{d8}
   d4524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

if (((valueShutterHourOpen) < Time.hour()) && (Time.hour() < valueShutterHourClose ) ){
  digitalWrite (led_green, LOW);//led on
  digitalWrite (led_red, HIGH);//led off
  ubidots.add(shutterIndicator, 1);//show ubidots shutter is open
  PostToUbidot(); // send to ubidot
   d4528:	f7ff bf46 	b.w	d43b8 <_Z12PostToUbidotv>
   d452c:	2003e124 	.word	0x2003e124
   d4530:	2003e12c 	.word	0x2003e12c
   d4534:	00000000 	.word	0x00000000
   d4538:	2003e018 	.word	0x2003e018
   d453c:	2003e158 	.word	0x2003e158

000d4540 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d4540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4544:	4607      	mov	r7, r0
   d4546:	460c      	mov	r4, r1
{
    if (base == 0) {
   d4548:	4615      	mov	r5, r2
   d454a:	b92a      	cbnz	r2, d4558 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d454c:	6803      	ldr	r3, [r0, #0]
   d454e:	b2c9      	uxtb	r1, r1
   d4550:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d4552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d4556:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4558:	2900      	cmp	r1, #0
   d455a:	da07      	bge.n	d456c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d455c:	2a0a      	cmp	r2, #10
   d455e:	d105      	bne.n	d456c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d4560:	212d      	movs	r1, #45	; 0x2d
   d4562:	f002 fdbf 	bl	d70e4 <_ZN5Print5printEc>
            val = -n;
   d4566:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4568:	4606      	mov	r6, r0
            val = -n;
   d456a:	e001      	b.n	d4570 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d456c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d456e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4570:	b2ea      	uxtb	r2, r5
   d4572:	4638      	mov	r0, r7
   d4574:	f002 fdcf 	bl	d7116 <_ZN5Print11printNumberEmh>
    }
}
   d4578:	4430      	add	r0, r6
   d457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4580 <_Z9myHandlerPKcS0_>:
        return 1;
    }
    return 2;
}

void myHandler(const char *event, const char *data) {
   d4580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Handle the integration response
  i++;
   d4582:	4c20      	ldr	r4, [pc, #128]	; (d4604 <_Z9myHandlerPKcS0_+0x84>)
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	3301      	adds	r3, #1
   d4588:	6023      	str	r3, [r4, #0]
        return 1;
    }
    return 2;
}

void myHandler(const char *event, const char *data) {
   d458a:	460d      	mov	r5, r1
   d458c:	4606      	mov	r6, r0
  // Handle the integration response
  i++;
  Serial.println(i);
   d458e:	f003 fb3d 	bl	d7c0c <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d4592:	220a      	movs	r2, #10
   d4594:	6821      	ldr	r1, [r4, #0]
   d4596:	4607      	mov	r7, r0
   d4598:	f7ff ffd2 	bl	d4540 <_ZN5Print5printIiLi0EEEjT_i>
        n += println();
   d459c:	4638      	mov	r0, r7
   d459e:	f002 fda4 	bl	d70ea <_ZN5Print7printlnEv>
  Serial.print(event);
   d45a2:	f003 fb33 	bl	d7c0c <_Z16_fetch_usbserialv>
   d45a6:	4631      	mov	r1, r6
   d45a8:	f002 fd98 	bl	d70dc <_ZN5Print5printEPKc>
  Serial.print(", data: ");
   d45ac:	f003 fb2e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d45b0:	4915      	ldr	r1, [pc, #84]	; (d4608 <_Z9myHandlerPKcS0_+0x88>)
   d45b2:	f002 fd93 	bl	d70dc <_ZN5Print5printEPKc>
  if (data) {
   d45b6:	b1e5      	cbz	r5, d45f2 <_Z9myHandlerPKcS0_+0x72>
   // Serial.println(data);
    shuttercontrol = setControl(atof(data));
   d45b8:	4628      	mov	r0, r5
   d45ba:	f005 f847 	bl	d964c <atof>
   d45be:	ec51 0b10 	vmov	r0, r1, d0
   d45c2:	f004 fff3 	bl	d95ac <__aeabi_d2f>
   d45c6:	ee00 0a10 	vmov	s0, r0
   d45ca:	f7ff ff5b 	bl	d4484 <_Z10setControlf>
   d45ce:	4c0f      	ldr	r4, [pc, #60]	; (d460c <_Z9myHandlerPKcS0_+0x8c>)
   d45d0:	ed84 0a00 	vstr	s0, [r4]
    Serial.printf("%f\n",shuttercontrol);
   d45d4:	f003 fb1a 	bl	d7c0c <_Z16_fetch_usbserialv>
   d45d8:	4605      	mov	r5, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45da:	6820      	ldr	r0, [r4, #0]
   d45dc:	f004 fcb0 	bl	d8f40 <__aeabi_f2d>
   d45e0:	4a0b      	ldr	r2, [pc, #44]	; (d4610 <_Z9myHandlerPKcS0_+0x90>)
   d45e2:	e9cd 0100 	strd	r0, r1, [sp]
   d45e6:	2100      	movs	r1, #0
   d45e8:	4628      	mov	r0, r5
   d45ea:	f002 fdb4 	bl	d7156 <_ZN5Print11printf_implEbPKcz>
  } else {
    Serial.println("NULL");
  }
}
   d45ee:	b003      	add	sp, #12
   d45f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (data) {
   // Serial.println(data);
    shuttercontrol = setControl(atof(data));
    Serial.printf("%f\n",shuttercontrol);
  } else {
    Serial.println("NULL");
   d45f2:	f003 fb0b 	bl	d7c0c <_Z16_fetch_usbserialv>
   d45f6:	4907      	ldr	r1, [pc, #28]	; (d4614 <_Z9myHandlerPKcS0_+0x94>)
  }
}
   d45f8:	b003      	add	sp, #12
   d45fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (data) {
   // Serial.println(data);
    shuttercontrol = setControl(atof(data));
    Serial.printf("%f\n",shuttercontrol);
  } else {
    Serial.println("NULL");
   d45fe:	f002 bd80 	b.w	d7102 <_ZN5Print7printlnEPKc>
   d4602:	bf00      	nop
   d4604:	2003e1a4 	.word	0x2003e1a4
   d4608:	000dbcea 	.word	0x000dbcea
   d460c:	2003e1a8 	.word	0x2003e1a8
   d4610:	000dbcf3 	.word	0x000dbcf3
   d4614:	000dbcf7 	.word	0x000dbcf7

000d4618 <_Z11printDigitsi>:
  printDigits(Time.minute());
  printDigits(Time.second());
  Serial.println(); 
}
void printDigits(int digits)
{
   d4618:	b510      	push	{r4, lr}
   d461a:	4604      	mov	r4, r0
  Serial.print(":");
   d461c:	f003 faf6 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4620:	4908      	ldr	r1, [pc, #32]	; (d4644 <_Z11printDigitsi+0x2c>)
   d4622:	f002 fd5b 	bl	d70dc <_ZN5Print5printEPKc>
  if(digits < 10)
   d4626:	2c09      	cmp	r4, #9
   d4628:	dc04      	bgt.n	d4634 <_Z11printDigitsi+0x1c>
    Serial.print('0');
   d462a:	f003 faef 	bl	d7c0c <_Z16_fetch_usbserialv>
   d462e:	2130      	movs	r1, #48	; 0x30
   d4630:	f002 fd58 	bl	d70e4 <_ZN5Print5printEc>
  Serial.print(digits);
   d4634:	f003 faea 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4638:	220a      	movs	r2, #10
   d463a:	4621      	mov	r1, r4
   d463c:	f7ff ff80 	bl	d4540 <_ZN5Print5printIiLi0EEEjT_i>
   d4640:	bd10      	pop	{r4, pc}
   d4642:	bf00      	nop
   d4644:	000dbf2c 	.word	0x000dbf2c

000d4648 <_Z19digitalClockDisplayv>:
}


}
void digitalClockDisplay()
{
   d4648:	b510      	push	{r4, lr}
  // digital clock display of the time
  Serial.print(Time.hour());
   d464a:	f003 fadf 	bl	d7c0c <_Z16_fetch_usbserialv>
   d464e:	4604      	mov	r4, r0
   d4650:	f002 fe48 	bl	d72e4 <_ZN9TimeClass4hourEv>
   d4654:	220a      	movs	r2, #10
   d4656:	4601      	mov	r1, r0
   d4658:	4620      	mov	r0, r4
   d465a:	f7ff ff71 	bl	d4540 <_ZN5Print5printIiLi0EEEjT_i>
  printDigits(Time.minute());
   d465e:	f002 fe4b 	bl	d72f8 <_ZN9TimeClass6minuteEv>
   d4662:	f7ff ffd9 	bl	d4618 <_Z11printDigitsi>
  printDigits(Time.second());
   d4666:	f002 fe51 	bl	d730c <_ZN9TimeClass6secondEv>
   d466a:	f7ff ffd5 	bl	d4618 <_Z11printDigitsi>
  Serial.println(); 
   d466e:	f003 facd 	bl	d7c0c <_Z16_fetch_usbserialv>
}
   d4672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  // digital clock display of the time
  Serial.print(Time.hour());
  printDigits(Time.minute());
  printDigits(Time.second());
  Serial.println(); 
   d4676:	f002 bd38 	b.w	d70ea <_ZN5Print7printlnEv>
	...

000d467c <loop>:
  } else {
    Serial.println("NULL");
  }
}

void loop() {    
   d467c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  digitalClockDisplay();
   d467e:	f7ff ffe3 	bl	d4648 <_Z19digitalClockDisplayv>
  if (shutterStatus == 0)  checkCurrentShutterStatus();
   d4682:	4b23      	ldr	r3, [pc, #140]	; (d4710 <loop+0x94>)
   d4684:	781a      	ldrb	r2, [r3, #0]
   d4686:	461c      	mov	r4, r3
   d4688:	b90a      	cbnz	r2, d468e <loop+0x12>
   d468a:	f7ff ff11 	bl	d44b0 <_Z25checkCurrentShutterStatusv>
  shutterStatus = 1;
   d468e:	2501      	movs	r5, #1
  Alarm.delay(1000);
   d4690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4694:	481f      	ldr	r0, [pc, #124]	; (d4714 <loop+0x98>)
}

void loop() {    
  digitalClockDisplay();
  if (shutterStatus == 0)  checkCurrentShutterStatus();
  shutterStatus = 1;
   d4696:	7025      	strb	r5, [r4, #0]
  Alarm.delay(1000);
   d4698:	f000 f9c8 	bl	d4a2c <_ZN15TimeAlarmsClass5delayEm>
  if (shuttercontrol == 3) {
   d469c:	4b1e      	ldr	r3, [pc, #120]	; (d4718 <loop+0x9c>)
   d469e:	edd3 7a00 	vldr	s15, [r3]
   d46a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   d46a6:	eef4 7a47 	vcmp.f32	s15, s14
   d46aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46ae:	461c      	mov	r4, r3
   d46b0:	d101      	bne.n	d46b6 <loop+0x3a>
      digitalWrite(NCH1, HIGH);//Open the shutter n channel
   d46b2:	4629      	mov	r1, r5
   d46b4:	e015      	b.n	d46e2 <loop+0x66>
      digitalWrite(PCH1, LOW);//close the shutter
  }
  else if (shuttercontrol == 1) {
   d46b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d46ba:	eef4 7a47 	vcmp.f32	s15, s14
   d46be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46c2:	d106      	bne.n	d46d2 <loop+0x56>
     digitalWrite(PCH1, HIGH);//close the shutter p channel
   d46c4:	4629      	mov	r1, r5
   d46c6:	2012      	movs	r0, #18
   d46c8:	f004 f837 	bl	d873a <digitalWrite>
     digitalWrite(NCH1, LOW);
   d46cc:	2100      	movs	r1, #0
   d46ce:	2013      	movs	r0, #19
   d46d0:	e00c      	b.n	d46ec <loop+0x70>
   }
  else if (shuttercontrol == 2) {
   d46d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d46d6:	eef4 7a47 	vcmp.f32	s15, s14
   d46da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46de:	d107      	bne.n	d46f0 <loop+0x74>
     
    digitalWrite(NCH1, LOW);//do Nothing
   d46e0:	2100      	movs	r1, #0
   d46e2:	2013      	movs	r0, #19
   d46e4:	f004 f829 	bl	d873a <digitalWrite>
    digitalWrite(PCH1, LOW);//do nothing 
   d46e8:	2100      	movs	r1, #0
   d46ea:	2012      	movs	r0, #18
   d46ec:	f004 f825 	bl	d873a <digitalWrite>
  } 
      Serial.printf("shutter contrll %f \n",shuttercontrol);
   d46f0:	f003 fa8c 	bl	d7c0c <_Z16_fetch_usbserialv>
   d46f4:	4605      	mov	r5, r0
   d46f6:	6820      	ldr	r0, [r4, #0]
   d46f8:	f004 fc22 	bl	d8f40 <__aeabi_f2d>
   d46fc:	4a07      	ldr	r2, [pc, #28]	; (d471c <loop+0xa0>)
   d46fe:	e9cd 0100 	strd	r0, r1, [sp]
   d4702:	2100      	movs	r1, #0
   d4704:	4628      	mov	r0, r5
   d4706:	f002 fd26 	bl	d7156 <_ZN5Print11printf_implEbPKcz>
}
   d470a:	b003      	add	sp, #12
   d470c:	bd30      	pop	{r4, r5, pc}
   d470e:	bf00      	nop
   d4710:	2003e1cc 	.word	0x2003e1cc
   d4714:	2003e1f0 	.word	0x2003e1f0
   d4718:	2003e1a8 	.word	0x2003e1a8
   d471c:	000dbcfc 	.word	0x000dbcfc

000d4720 <_GLOBAL__sub_I_Blynk>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4720:	4b19      	ldr	r3, [pc, #100]	; (d4788 <_GLOBAL__sub_I_Blynk+0x68>)
  delay(80);
  digitalWrite (led_red, HIGH);//led off
  digitalWrite (led_blue, HIGH);//led off
  digitalWrite (led_green, HIGH);//led off
  return;
}
   d4722:	b570      	push	{r4, r5, r6, lr}
   d4724:	2400      	movs	r4, #0
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4726:	4d19      	ldr	r5, [pc, #100]	; (d478c <_GLOBAL__sub_I_Blynk+0x6c>)
   d4728:	701c      	strb	r4, [r3, #0]
   d472a:	4b19      	ldr	r3, [pc, #100]	; (d4790 <_GLOBAL__sub_I_Blynk+0x70>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d472c:	4e19      	ldr	r6, [pc, #100]	; (d4794 <_GLOBAL__sub_I_Blynk+0x74>)
   d472e:	2201      	movs	r2, #1
   d4730:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4732:	f001 fe7d 	bl	d6430 <HAL_Pin_Map>
   d4736:	4628      	mov	r0, r5
   d4738:	f003 fecc 	bl	d84d4 <_ZN9TCPClientC1Ev>
   d473c:	f105 001c 	add.w	r0, r5, #28
   d4740:	f003 f9a6 	bl	d7a90 <_ZN9IPAddressC1Ev>
   d4744:	4632      	mov	r2, r6
   d4746:	4914      	ldr	r1, [pc, #80]	; (d4798 <_GLOBAL__sub_I_Blynk+0x78>)
   d4748:	636c      	str	r4, [r5, #52]	; 0x34
   d474a:	4628      	mov	r0, r5
   d474c:	872c      	strh	r4, [r5, #56]	; 0x38
   d474e:	f004 f86d 	bl	d882c <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d4752:	4b12      	ldr	r3, [pc, #72]	; (d479c <_GLOBAL__sub_I_Blynk+0x7c>)
   d4754:	601d      	str	r5, [r3, #0]


//const char* WEBHOOK_NAME = "timerwebhook";
//Ubidots ubidots(WEBHOOK_NAME, UBI_PARTICLE);
//Ubidots ubidots(UBIDOTS_TOKEN, UBI_TCP); // Comment this line to use another protocol.
Ubidots ubidots(UBIDOTS_TOKEN, UBI_HTTP); // Uncomment this line to use HTTP protocol.
   d4756:	4d12      	ldr	r5, [pc, #72]	; (d47a0 <_GLOBAL__sub_I_Blynk+0x80>)
   d4758:	605c      	str	r4, [r3, #4]
   d475a:	609c      	str	r4, [r3, #8]
   d475c:	60dc      	str	r4, [r3, #12]
   d475e:	611c      	str	r4, [r3, #16]
   d4760:	615c      	str	r4, [r3, #20]
   d4762:	831c      	strh	r4, [r3, #24]
   d4764:	835c      	strh	r4, [r3, #26]
   d4766:	771c      	strb	r4, [r3, #28]
   d4768:	775c      	strb	r4, [r3, #29]
   d476a:	f001 fea1 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
   d476e:	4622      	mov	r2, r4
   d4770:	490c      	ldr	r1, [pc, #48]	; (d47a4 <_GLOBAL__sub_I_Blynk+0x84>)
   d4772:	4628      	mov	r0, r5
   d4774:	f000 fe80 	bl	d5478 <_ZN7UbidotsC1EPc11IotProtocol>
   d4778:	4632      	mov	r2, r6
   d477a:	4628      	mov	r0, r5
   d477c:	490a      	ldr	r1, [pc, #40]	; (d47a8 <_GLOBAL__sub_I_Blynk+0x88>)
  delay(80);
  digitalWrite (led_red, HIGH);//led off
  digitalWrite (led_blue, HIGH);//led off
  digitalWrite (led_green, HIGH);//led off
  return;
}
   d477e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}


//const char* WEBHOOK_NAME = "timerwebhook";
//Ubidots ubidots(WEBHOOK_NAME, UBI_PARTICLE);
//Ubidots ubidots(UBIDOTS_TOKEN, UBI_TCP); // Comment this line to use another protocol.
Ubidots ubidots(UBIDOTS_TOKEN, UBI_HTTP); // Uncomment this line to use HTTP protocol.
   d4782:	f004 b853 	b.w	d882c <__aeabi_atexit>
   d4786:	bf00      	nop
   d4788:	2003e128 	.word	0x2003e128
   d478c:	2003e168 	.word	0x2003e168
   d4790:	2003e150 	.word	0x2003e150
   d4794:	2003e11c 	.word	0x2003e11c
   d4798:	000d4155 	.word	0x000d4155
   d479c:	2003e130 	.word	0x2003e130
   d47a0:	2003e158 	.word	0x2003e158
   d47a4:	000dbd11 	.word	0x000dbd11
   d47a8:	000d5495 	.word	0x000d5495

000d47ac <_ZN10AlarmClassC1Ev>:
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
   d47ac:	7b02      	ldrb	r2, [r0, #12]
  Mode.alarmType = dtNotAllocated;
   d47ae:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
   d47b2:	f36f 0203 	bfc	r2, #0, #4
   d47b6:	7302      	strb	r2, [r0, #12]
  value = nextTrigger = 0;
   d47b8:	2200      	movs	r2, #0
   d47ba:	6082      	str	r2, [r0, #8]
   d47bc:	6042      	str	r2, [r0, #4]
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
   d47be:	6002      	str	r2, [r0, #0]
}
   d47c0:	4770      	bx	lr
	...

000d47c4 <_ZN10AlarmClass17updateNextTriggerEv>:
//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
{  
   d47c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if( (value != 0) && Mode.isEnabled )
   d47c8:	6843      	ldr	r3, [r0, #4]
//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
{  
   d47ca:	4604      	mov	r4, r0
  if( (value != 0) && Mode.isEnabled )
   d47cc:	2b00      	cmp	r3, #0
   d47ce:	f000 8088 	beq.w	d48e2 <_ZN10AlarmClass17updateNextTriggerEv+0x11e>
   d47d2:	7b03      	ldrb	r3, [r0, #12]
   d47d4:	06db      	lsls	r3, r3, #27
   d47d6:	f140 8084 	bpl.w	d48e2 <_ZN10AlarmClass17updateNextTriggerEv+0x11e>
  {
    time_t time = now();
   d47da:	f002 fd7c 	bl	d72d6 <_ZN9TimeClass3nowEv>
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
   d47de:	7b23      	ldrb	r3, [r4, #12]
 
void AlarmClass::updateNextTrigger()
{  
  if( (value != 0) && Mode.isEnabled )
  {
    time_t time = now();
   d47e0:	f8df 8110 	ldr.w	r8, [pc, #272]	; d48f4 <_ZN10AlarmClass17updateNextTriggerEv+0x130>
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
   d47e4:	f103 020e 	add.w	r2, r3, #14
 
void AlarmClass::updateNextTrigger()
{  
  if( (value != 0) && Mode.isEnabled )
  {
    time_t time = now();
   d47e8:	f8d8 5000 	ldr.w	r5, [r8]
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
   d47ec:	f002 020f 	and.w	r2, r2, #15
   d47f0:	2a02      	cmp	r2, #2
 
void AlarmClass::updateNextTrigger()
{  
  if( (value != 0) && Mode.isEnabled )
  {
    time_t time = now();
   d47f2:	4405      	add	r5, r0
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
   d47f4:	d86b      	bhi.n	d48ce <_ZN10AlarmClass17updateNextTriggerEv+0x10a>
   d47f6:	68a2      	ldr	r2, [r4, #8]
   d47f8:	4295      	cmp	r5, r2
   d47fa:	db68      	blt.n	d48ce <_ZN10AlarmClass17updateNextTriggerEv+0x10a>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
   d47fc:	f003 020f 	and.w	r2, r3, #15
   d4800:	2a02      	cmp	r2, #2
   d4802:	d101      	bne.n	d4808 <_ZN10AlarmClass17updateNextTriggerEv+0x44>
      {
        nextTrigger = value;  // yes, trigger on this value   
   d4804:	6863      	ldr	r3, [r4, #4]
   d4806:	e014      	b.n	d4832 <_ZN10AlarmClass17updateNextTriggerEv+0x6e>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
   d4808:	2a03      	cmp	r2, #3
   d480a:	d117      	bne.n	d483c <_ZN10AlarmClass17updateNextTriggerEv+0x78>
      {
        if( value + previousMidnight(now()) <= time)
   d480c:	6866      	ldr	r6, [r4, #4]
   d480e:	f002 fd62 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d4812:	f8d8 3000 	ldr.w	r3, [r8]
   d4816:	6861      	ldr	r1, [r4, #4]
   d4818:	4418      	add	r0, r3
   d481a:	4b35      	ldr	r3, [pc, #212]	; (d48f0 <_ZN10AlarmClass17updateNextTriggerEv+0x12c>)
   d481c:	fbb0 f0f3 	udiv	r0, r0, r3
   d4820:	fb03 6000 	mla	r0, r3, r0, r6
   d4824:	42a8      	cmp	r0, r5
   d4826:	fbb5 f2f3 	udiv	r2, r5, r3
   d482a:	d804      	bhi.n	d4836 <_ZN10AlarmClass17updateNextTriggerEv+0x72>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
   d482c:	fb02 3303 	mla	r3, r2, r3, r3
   d4830:	440b      	add	r3, r1
   d4832:	60a3      	str	r3, [r4, #8]
   d4834:	e04b      	b.n	d48ce <_ZN10AlarmClass17updateNextTriggerEv+0x10a>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
   d4836:	fb03 1302 	mla	r3, r3, r2, r1
   d483a:	e7fa      	b.n	d4832 <_ZN10AlarmClass17updateNextTriggerEv+0x6e>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
   d483c:	2a04      	cmp	r2, #4
   d483e:	d143      	bne.n	d48c8 <_ZN10AlarmClass17updateNextTriggerEv+0x104>
      {
        if( (value + previousSunday(now())) <= time)
   d4840:	f8d4 a004 	ldr.w	sl, [r4, #4]
   d4844:	4e2a      	ldr	r6, [pc, #168]	; (d48f0 <_ZN10AlarmClass17updateNextTriggerEv+0x12c>)
   d4846:	f002 fd46 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d484a:	f8d8 3000 	ldr.w	r3, [r8]
   d484e:	18c7      	adds	r7, r0, r3
   d4850:	f002 fd41 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d4854:	f8d8 2000 	ldr.w	r2, [r8]
   d4858:	4410      	add	r0, r2
   d485a:	fbb0 f9f6 	udiv	r9, r0, r6
   d485e:	fb06 0919 	mls	r9, r6, r9, r0
   d4862:	f002 fd38 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d4866:	f8d8 2000 	ldr.w	r2, [r8]
   d486a:	eb0a 0307 	add.w	r3, sl, r7
   d486e:	4410      	add	r0, r2
   d4870:	2207      	movs	r2, #7
   d4872:	fbb0 f0f6 	udiv	r0, r0, r6
   d4876:	3004      	adds	r0, #4
   d4878:	fbb0 f1f2 	udiv	r1, r0, r2
   d487c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   d4880:	ebc9 0303 	rsb	r3, r9, r3
   d4884:	1a40      	subs	r0, r0, r1
   d4886:	fb06 3010 	mls	r0, r6, r0, r3
   d488a:	42a8      	cmp	r0, r5
   d488c:	6861      	ldr	r1, [r4, #4]
   d488e:	fbb5 f3f6 	udiv	r3, r5, r6
   d4892:	d80e      	bhi.n	d48b2 <_ZN10AlarmClass17updateNextTriggerEv+0xee>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
   d4894:	f501 2113 	add.w	r1, r1, #602112	; 0x93000
   d4898:	f501 6128 	add.w	r1, r1, #2688	; 0xa80
   d489c:	fb06 1103 	mla	r1, r6, r3, r1
   d48a0:	3304      	adds	r3, #4
   d48a2:	fbb3 f2f2 	udiv	r2, r3, r2
   d48a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   d48aa:	1a9a      	subs	r2, r3, r2
   d48ac:	fb06 1312 	mls	r3, r6, r2, r1
   d48b0:	e7bf      	b.n	d4832 <_ZN10AlarmClass17updateNextTriggerEv+0x6e>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
   d48b2:	fb06 1103 	mla	r1, r6, r3, r1
   d48b6:	3304      	adds	r3, #4
   d48b8:	fbb3 f2f2 	udiv	r2, r3, r2
   d48bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   d48c0:	1a9b      	subs	r3, r3, r2
   d48c2:	fb06 1313 	mls	r3, r6, r3, r1
   d48c6:	e7b4      	b.n	d4832 <_ZN10AlarmClass17updateNextTriggerEv+0x6e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
   d48c8:	f36f 1304 	bfc	r3, #4, #1
   d48cc:	7323      	strb	r3, [r4, #12]
      }	  
    }
    if( Mode.alarmType == dtTimer)
   d48ce:	7b23      	ldrb	r3, [r4, #12]
   d48d0:	f003 030f 	and.w	r3, r3, #15
   d48d4:	2b01      	cmp	r3, #1
   d48d6:	d108      	bne.n	d48ea <_ZN10AlarmClass17updateNextTriggerEv+0x126>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
   d48d8:	6863      	ldr	r3, [r4, #4]
   d48da:	441d      	add	r5, r3
   d48dc:	60a5      	str	r5, [r4, #8]
   d48de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
   d48e2:	7b23      	ldrb	r3, [r4, #12]
   d48e4:	f36f 1304 	bfc	r3, #4, #1
   d48e8:	7323      	strb	r3, [r4, #12]
   d48ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d48ee:	bf00      	nop
   d48f0:	00015180 	.word	0x00015180
   d48f4:	2003e3c0 	.word	0x2003e3c0

000d48f8 <_ZN15TimeAlarmsClass11isAllocatedEh>:
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
   d48f8:	2905      	cmp	r1, #5
   d48fa:	d807      	bhi.n	d490c <_ZN15TimeAlarmsClass11isAllocatedEh+0x14>
   d48fc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   d4900:	7b00      	ldrb	r0, [r0, #12]
   d4902:	f010 000f 	ands.w	r0, r0, #15
   d4906:	bf18      	it	ne
   d4908:	2001      	movne	r0, #1
   d490a:	4770      	bx	lr
   d490c:	2000      	movs	r0, #0
     }
   d490e:	4770      	bx	lr

000d4910 <_ZN15TimeAlarmsClass6enableEh>:
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
   d4910:	b510      	push	{r4, lr}
   d4912:	4602      	mov	r2, r0
   d4914:	460c      	mov	r4, r1
      if(isAllocated(ID)) {
   d4916:	f7ff ffef 	bl	d48f8 <_ZN15TimeAlarmsClass11isAllocatedEh>
   d491a:	b198      	cbz	r0, d4944 <_ZN15TimeAlarmsClass6enableEh+0x34>
   d491c:	0109      	lsls	r1, r1, #4
   d491e:	1853      	adds	r3, r2, r1
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
   d4920:	685b      	ldr	r3, [r3, #4]
   d4922:	b11b      	cbz	r3, d492c <_ZN15TimeAlarmsClass6enableEh+0x1c>
   d4924:	5853      	ldr	r3, [r2, r1]
   d4926:	3300      	adds	r3, #0
   d4928:	bf18      	it	ne
   d492a:	2301      	movne	r3, #1
   d492c:	eb02 1004 	add.w	r0, r2, r4, lsl #4
   d4930:	f100 0208 	add.w	r2, r0, #8
   d4934:	7911      	ldrb	r1, [r2, #4]
   d4936:	f363 1104 	bfi	r1, r3, #4, #1
   d493a:	7111      	strb	r1, [r2, #4]
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
      }
    }
   d493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
   d4940:	f7ff bf40 	b.w	d47c4 <_ZN10AlarmClass17updateNextTriggerEv>
   d4944:	bd10      	pop	{r4, pc}

000d4946 <_ZN15TimeAlarmsClass7disableEh>:
      }
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
   d4946:	b508      	push	{r3, lr}
   d4948:	4603      	mov	r3, r0
      if(isAllocated(ID))
   d494a:	f7ff ffd5 	bl	d48f8 <_ZN15TimeAlarmsClass11isAllocatedEh>
   d494e:	b128      	cbz	r0, d495c <_ZN15TimeAlarmsClass7disableEh+0x16>
        Alarm[ID].Mode.isEnabled = false;
   d4950:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   d4954:	7b0b      	ldrb	r3, [r1, #12]
   d4956:	f36f 1304 	bfc	r3, #4, #1
   d495a:	730b      	strb	r3, [r1, #12]
   d495c:	bd08      	pop	{r3, pc}

000d495e <_ZN15TimeAlarmsClass4freeEh>:
      else 	
        return dtNotAllocated;  
    }

    void TimeAlarmsClass::free(AlarmID_t ID)
    {
   d495e:	b510      	push	{r4, lr}
   d4960:	460b      	mov	r3, r1
   d4962:	4604      	mov	r4, r0
      if(isAllocated(ID))
   d4964:	f7ff ffc8 	bl	d48f8 <_ZN15TimeAlarmsClass11isAllocatedEh>
   d4968:	b168      	cbz	r0, d4986 <_ZN15TimeAlarmsClass4freeEh+0x28>
      {
        Alarm[ID].Mode.isEnabled = false;
   d496a:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d496e:	011b      	lsls	r3, r3, #4
   d4970:	7b0a      	ldrb	r2, [r1, #12]
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
   d4972:	f002 02ef 	and.w	r2, r2, #239	; 0xef
   d4976:	f36f 0203 	bfc	r2, #0, #4
   d497a:	18e0      	adds	r0, r4, r3
   d497c:	730a      	strb	r2, [r1, #12]
        Alarm[ID].onTickHandler = 0;
   d497e:	2200      	movs	r2, #0
   d4980:	50e2      	str	r2, [r4, r3]
    	Alarm[ID].value = 0;
   d4982:	6042      	str	r2, [r0, #4]
    	Alarm[ID].nextTrigger = 0;   	
   d4984:	608a      	str	r2, [r1, #8]
   d4986:	bd10      	pop	{r4, pc}

000d4988 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
   d4988:	b538      	push	{r3, r4, r5, lr}
   d498a:	f100 0160 	add.w	r1, r0, #96	; 0x60
   d498e:	4605      	mov	r5, r0
   d4990:	4603      	mov	r3, r0
   d4992:	4618      	mov	r0, r3
   d4994:	f7ff ff0a 	bl	d47ac <_ZN10AlarmClassC1Ev>
   d4998:	3310      	adds	r3, #16
   d499a:	428b      	cmp	r3, r1
   d499c:	d1f9      	bne.n	d4992 <_ZN15TimeAlarmsClassC1Ev+0xa>
{
  isServicing = false;
   d499e:	2400      	movs	r4, #0
   d49a0:	f885 4060 	strb.w	r4, [r5, #96]	; 0x60
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
   d49a4:	b2e1      	uxtb	r1, r4
   d49a6:	4628      	mov	r0, r5
   d49a8:	3401      	adds	r4, #1
   d49aa:	f7ff ffd8 	bl	d495e <_ZN15TimeAlarmsClass4freeEh>
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
   d49ae:	2c06      	cmp	r4, #6
   d49b0:	d1f8      	bne.n	d49a4 <_ZN15TimeAlarmsClassC1Ev+0x1c>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
   d49b2:	4628      	mov	r0, r5
   d49b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49b8 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    {
   d49b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if(! isServicing)
   d49ba:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    {
   d49be:	4604      	mov	r4, r0
      if(! isServicing)
   d49c0:	bb8b      	cbnz	r3, d4a26 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x6e>
      {
        isServicing = true;
   d49c2:	2201      	movs	r2, #1
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
   d49c4:	4d18      	ldr	r5, [pc, #96]	; (d4a28 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x70>)
    
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
   d49c6:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
   d49ca:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
   d49ce:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   d49d2:	2b05      	cmp	r3, #5
   d49d4:	d820      	bhi.n	d4a18 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x60>
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
   d49d6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   d49da:	7b1b      	ldrb	r3, [r3, #12]
   d49dc:	06da      	lsls	r2, r3, #27
   d49de:	d515      	bpl.n	d4a0c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x54>
   d49e0:	f002 fc79 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d49e4:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   d49e8:	682b      	ldr	r3, [r5, #0]
   d49ea:	010a      	lsls	r2, r1, #4
   d49ec:	4403      	add	r3, r0
   d49ee:	18a0      	adds	r0, r4, r2
   d49f0:	f100 0708 	add.w	r7, r0, #8
   d49f4:	6886      	ldr	r6, [r0, #8]
   d49f6:	42b3      	cmp	r3, r6
   d49f8:	db08      	blt.n	d4a0c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x54>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
   d49fa:	793b      	ldrb	r3, [r7, #4]
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
   d49fc:	58a6      	ldr	r6, [r4, r2]
            if(Alarm[servicedAlarmId].Mode.isOneShot)
   d49fe:	069b      	lsls	r3, r3, #26
   d4a00:	d50e      	bpl.n	d4a20 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x68>
               free(servicedAlarmId);  // free the ID if mode is OnShot		
   d4a02:	4620      	mov	r0, r4
   d4a04:	f7ff ffab 	bl	d495e <_ZN15TimeAlarmsClass4freeEh>
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
            if( TickHandler != NULL) {        
   d4a08:	b106      	cbz	r6, d4a0c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x54>
              (*TickHandler)();     // call the handler  
   d4a0a:	47b0      	blx	r6
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
   d4a0c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   d4a10:	3301      	adds	r3, #1
   d4a12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   d4a16:	e7da      	b.n	d49ce <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x16>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
   d4a18:	2300      	movs	r3, #0
   d4a1a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      }
    }
   d4a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
   d4a20:	f7ff fed0 	bl	d47c4 <_ZN10AlarmClass17updateNextTriggerEv>
   d4a24:	e7f0      	b.n	d4a08 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x50>
   d4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a28:	2003e3c0 	.word	0x2003e3c0

000d4a2c <_ZN15TimeAlarmsClass5delayEm>:
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
   d4a2c:	b570      	push	{r4, r5, r6, lr}
   d4a2e:	4604      	mov	r4, r0
   d4a30:	460e      	mov	r6, r1
   d4a32:	f001 fd3d 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
   d4a36:	4605      	mov	r5, r0
   d4a38:	f001 fd3a 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
      unsigned long start = millis();
      while( millis() - start  <= ms)
   d4a3c:	1b40      	subs	r0, r0, r5
   d4a3e:	42b0      	cmp	r0, r6
   d4a40:	d803      	bhi.n	d4a4a <_ZN15TimeAlarmsClass5delayEm+0x1e>
        serviceAlarms();
   d4a42:	4620      	mov	r0, r4
   d4a44:	f7ff ffb8 	bl	d49b8 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
   d4a48:	e7f6      	b.n	d4a38 <_ZN15TimeAlarmsClass5delayEm+0xc>
   d4a4a:	bd70      	pop	{r4, r5, r6, pc}

000d4a4c <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th>:
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
   d4a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a50:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   d4a54:	469b      	mov	fp, r3
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
   d4a56:	f1a9 0302 	sub.w	r3, r9, #2
   d4a5a:	2b02      	cmp	r3, #2
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
   d4a5c:	4605      	mov	r5, r0
   d4a5e:	4688      	mov	r8, r1
   d4a60:	4692      	mov	sl, r2
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
   d4a62:	d80a      	bhi.n	d4a7a <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x2e>
   d4a64:	f002 fc37 	bl	d72d6 <_ZN9TimeClass3nowEv>
   d4a68:	4b15      	ldr	r3, [pc, #84]	; (d4ac0 <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x74>)
   d4a6a:	681c      	ldr	r4, [r3, #0]
   d4a6c:	4b15      	ldr	r3, [pc, #84]	; (d4ac4 <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x78>)
   d4a6e:	4420      	add	r0, r4
   d4a70:	4298      	cmp	r0, r3
   d4a72:	d802      	bhi.n	d4a7a <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x2e>
    	    isEnabled ?  enable(id) : disable(id);   
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
   d4a74:	20ff      	movs	r0, #255	; 0xff
   d4a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
   d4a7a:	2000      	movs	r0, #0
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
   d4a7c:	eb05 1600 	add.w	r6, r5, r0, lsl #4
   d4a80:	b2c4      	uxtb	r4, r0
   d4a82:	7b33      	ldrb	r3, [r6, #12]
   d4a84:	071a      	lsls	r2, r3, #28
   d4a86:	d117      	bne.n	d4ab8 <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x6c>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    	    Alarm[id].Mode.isOneShot = isOneShot;
   d4a88:	461a      	mov	r2, r3
   d4a8a:	f36b 1245 	bfi	r2, fp, #5, #1
    	    Alarm[id].Mode.alarmType = alarmType;
   d4a8e:	4613      	mov	r3, r2
   d4a90:	f369 0303 	bfi	r3, r9, #0, #4
   d4a94:	7333      	strb	r3, [r6, #12]
    	    Alarm[id].value = value;
    	    isEnabled ?  enable(id) : disable(id);   
   d4a96:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
   d4a9a:	f8c6 a000 	str.w	sl, [r6]
    	    Alarm[id].Mode.isOneShot = isOneShot;
    	    Alarm[id].Mode.alarmType = alarmType;
    	    Alarm[id].value = value;
   d4a9e:	f8c6 8004 	str.w	r8, [r6, #4]
    	    isEnabled ?  enable(id) : disable(id);   
   d4aa2:	4621      	mov	r1, r4
   d4aa4:	4628      	mov	r0, r5
   d4aa6:	b113      	cbz	r3, d4aae <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x62>
   d4aa8:	f7ff ff32 	bl	d4910 <_ZN15TimeAlarmsClass6enableEh>
   d4aac:	e001      	b.n	d4ab2 <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x66>
   d4aae:	f7ff ff4a 	bl	d4946 <_ZN15TimeAlarmsClass7disableEh>
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ab8:	3001      	adds	r0, #1
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
   d4aba:	2806      	cmp	r0, #6
   d4abc:	d1de      	bne.n	d4a7c <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x30>
   d4abe:	e7d9      	b.n	d4a74 <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th+0x28>
   d4ac0:	2003e3c0 	.word	0x2003e3c0
   d4ac4:	01dfe1ff 	.word	0x01dfe1ff

000d4ac8 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
   d4ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
   d4aca:	243c      	movs	r4, #60	; 0x3c
   d4acc:	fb04 3402 	mla	r4, r4, r2, r3
   d4ad0:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d4ad4:	2203      	movs	r2, #3
   d4ad6:	2301      	movs	r3, #1
   d4ad8:	e88d 000c 	stmia.w	sp, {r2, r3}
   d4adc:	fb05 4101 	mla	r1, r5, r1, r4
   d4ae0:	2300      	movs	r3, #0
   d4ae2:	9a06      	ldr	r2, [sp, #24]
   d4ae4:	f7ff ffb2 	bl	d4a4c <_ZN15TimeAlarmsClass6createElPFvvEh15dtAlarmPeriod_th>
    }
   d4ae8:	b003      	add	sp, #12
   d4aea:	bd30      	pop	{r4, r5, pc}

000d4aec <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
   d4aec:	b508      	push	{r3, lr}
   d4aee:	f001 fc9f 	bl	d6430 <HAL_Pin_Map>
   d4af2:	4802      	ldr	r0, [pc, #8]	; (d4afc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x10>)
   d4af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4af8:	f7ff bf46 	b.w	d4988 <_ZN15TimeAlarmsClassC1Ev>
   d4afc:	2003e1f0 	.word	0x2003e1f0

000d4b00 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d4b00:	7501      	strb	r1, [r0, #20]
   d4b02:	4770      	bx	lr

000d4b04 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
   d4b04:	b530      	push	{r4, r5, lr}
               const char* token) {
   d4b06:	4d06      	ldr	r5, [pc, #24]	; (d4b20 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d4b08:	6005      	str	r5, [r0, #0]
   d4b0a:	2500      	movs	r5, #0
   d4b0c:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d4b0e:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d4b10:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d4b14:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d4b16:	6185      	str	r5, [r0, #24]
  _host = host;
   d4b18:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d4b1a:	60c3      	str	r3, [r0, #12]
  _port = port;
   d4b1c:	6102      	str	r2, [r0, #16]
}
   d4b1e:	bd30      	pop	{r4, r5, pc}
   d4b20:	000dbe40 	.word	0x000dbe40

000d4b24 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
   d4b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b28:	460d      	mov	r5, r1
   d4b2a:	4617      	mov	r7, r2
   d4b2c:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
   d4b2e:	f003 f86d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4b32:	491c      	ldr	r1, [pc, #112]	; (d4ba4 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d4b34:	f002 fae5 	bl	d7102 <_ZN5Print7printlnEPKc>
   d4b38:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4b3a:	481b      	ldr	r0, [pc, #108]	; (d4ba8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d4b3c:	f003 fc86 	bl	d844c <_ZN9TCPClient6statusEv>
   d4b40:	bb68      	cbnz	r0, d4b9e <_ZN6UbiTCP9reconnectEPKci+0x7a>
   d4b42:	2c05      	cmp	r4, #5
   d4b44:	d101      	bne.n	d4b4a <_ZN6UbiTCP9reconnectEPKci+0x26>
   d4b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
   d4b4a:	7d33      	ldrb	r3, [r6, #20]
   d4b4c:	b1c3      	cbz	r3, d4b80 <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
   d4b4e:	f003 f85d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4b52:	4916      	ldr	r1, [pc, #88]	; (d4bac <_ZN6UbiTCP9reconnectEPKci+0x88>)
   d4b54:	f002 fac2 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(host);
   d4b58:	f003 f858 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4b5c:	4629      	mov	r1, r5
   d4b5e:	f002 fabd 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d4b62:	f003 f853 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4b66:	4912      	ldr	r1, [pc, #72]	; (d4bb0 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
   d4b68:	f002 fab8 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d4b6c:	f003 f84e 	bl	d7c0c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b70:	220a      	movs	r2, #10
   d4b72:	4680      	mov	r8, r0
   d4b74:	4621      	mov	r1, r4
   d4b76:	f002 face 	bl	d7116 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b7a:	4640      	mov	r0, r8
   d4b7c:	f002 fab5 	bl	d70ea <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
   d4b80:	4809      	ldr	r0, [pc, #36]	; (d4ba8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d4b82:	f003 fbef 	bl	d8364 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d4b86:	2300      	movs	r3, #0
   d4b88:	b2ba      	uxth	r2, r7
   d4b8a:	4629      	mov	r1, r5
   d4b8c:	4806      	ldr	r0, [pc, #24]	; (d4ba8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d4b8e:	f003 faed 	bl	d816c <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
   d4b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b96:	f002 fbcd 	bl	d7334 <delay>
   d4b9a:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4b9c:	e7cd      	b.n	d4b3a <_ZN6UbiTCP9reconnectEPKci+0x16>
   d4b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba2:	bf00      	nop
   d4ba4:	000dbd35 	.word	0x000dbd35
   d4ba8:	2003e254 	.word	0x2003e254
   d4bac:	000dbd4d 	.word	0x000dbd4d
   d4bb0:	000dbd63 	.word	0x000dbd63

000d4bb4 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
   d4bb4:	b570      	push	{r4, r5, r6, lr}
   d4bb6:	4605      	mov	r5, r0
  int timeout = 0;
   d4bb8:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d4bba:	480d      	ldr	r0, [pc, #52]	; (d4bf0 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
   d4bbc:	f003 fbea 	bl	d8394 <_ZN9TCPClient9availableEv>
   d4bc0:	4606      	mov	r6, r0
   d4bc2:	b910      	cbnz	r0, d4bca <_ZN6UbiTCP16waitServerAnswerEv+0x16>
   d4bc4:	69ab      	ldr	r3, [r5, #24]
   d4bc6:	429c      	cmp	r4, r3
   d4bc8:	db01      	blt.n	d4bce <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d4bca:	2001      	movs	r0, #1
   d4bcc:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d4bce:	2001      	movs	r0, #1
   d4bd0:	f002 fbb0 	bl	d7334 <delay>
    if (timeout > _timeout - 1) {
   d4bd4:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
   d4bd6:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d4bd8:	429c      	cmp	r4, r3
   d4bda:	dbee      	blt.n	d4bba <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
   d4bdc:	7d28      	ldrb	r0, [r5, #20]
   d4bde:	b130      	cbz	r0, d4bee <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d4be0:	f003 f814 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4be4:	4903      	ldr	r1, [pc, #12]	; (d4bf4 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d4be6:	f002 fa8c 	bl	d7102 <_ZN5Print7printlnEPKc>
   d4bea:	4630      	mov	r0, r6
   d4bec:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d4bee:	bd70      	pop	{r4, r5, r6, pc}
   d4bf0:	2003e254 	.word	0x2003e254
   d4bf4:	000dbd77 	.word	0x000dbd77

000d4bf8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
   d4bfc:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4bfe:	4606      	mov	r6, r0
   d4c00:	4688      	mov	r8, r1
   d4c02:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
   d4c04:	b14b      	cbz	r3, d4c1a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d4c06:	f003 f801 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4c0a:	4926      	ldr	r1, [pc, #152]	; (d4ca4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
   d4c0c:	f002 fa79 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d4c10:	f002 fffc 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4c14:	4924      	ldr	r1, [pc, #144]	; (d4ca8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d4c16:	f002 fa74 	bl	d7102 <_ZN5Print7printlnEPKc>
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4c1a:	2400      	movs	r4, #0
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4c1c:	f240 29bb 	movw	r9, #699	; 0x2bb
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
   d4c20:	4822      	ldr	r0, [pc, #136]	; (d4cac <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d4c22:	f003 fbb7 	bl	d8394 <_ZN9TCPClient9availableEv>
   d4c26:	b178      	cbz	r0, d4c48 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
   d4c28:	4820      	ldr	r0, [pc, #128]	; (d4cac <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d4c2a:	f003 fa5c 	bl	d80e6 <_ZN9TCPClient4readEv>
    if (_debug) {
   d4c2e:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
   d4c30:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d4c32:	b12b      	cbz	r3, d4c40 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
   d4c34:	f002 ffea 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4c38:	6803      	ldr	r3, [r0, #0]
   d4c3a:	4639      	mov	r1, r7
   d4c3c:	689b      	ldr	r3, [r3, #8]
   d4c3e:	4798      	blx	r3
    }
    response[j] = c;
   d4c40:	552f      	strb	r7, [r5, r4]
    j++;
   d4c42:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4c44:	454c      	cmp	r4, r9
   d4c46:	d1eb      	bne.n	d4c20 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
   d4c48:	7d33      	ldrb	r3, [r6, #20]
   d4c4a:	b123      	cbz	r3, d4c56 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
   d4c4c:	f002 ffde 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4c50:	4917      	ldr	r1, [pc, #92]	; (d4cb0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d4c52:	f002 fa56 	bl	d7102 <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
   d4c56:	2300      	movs	r3, #0
   d4c58:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
   d4c5a:	4b16      	ldr	r3, [pc, #88]	; (d4cb4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d4c5c:	4598      	cmp	r8, r3
   d4c5e:	d10d      	bne.n	d4c7c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
    char* pch = strstr(response, "OK");
   d4c60:	4915      	ldr	r1, [pc, #84]	; (d4cb8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d4c62:	4628      	mov	r0, r5
   d4c64:	f004 fea7 	bl	d99b6 <strstr>
    if (pch != NULL) {
      result = 1;
   d4c68:	eddf 7a14 	vldr	s15, [pc, #80]	; d4cbc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d4c6c:	2800      	cmp	r0, #0
   d4c6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d4c72:	bf08      	it	eq
   d4c74:	eeb0 0a67 	vmoveq.f32	s0, s15
   d4c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
   d4c7c:	217c      	movs	r1, #124	; 0x7c
   d4c7e:	4628      	mov	r0, r5
   d4c80:	f004 fe2e 	bl	d98e0 <strchr>
  if (pch != NULL) {
   d4c84:	b150      	cbz	r0, d4c9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>
    result = atof(pch + 1);
   d4c86:	3001      	adds	r0, #1
   d4c88:	f004 fce0 	bl	d964c <atof>
   d4c8c:	ec51 0b10 	vmov	r0, r1, d0
   d4c90:	f004 fc8c 	bl	d95ac <__aeabi_d2f>
   d4c94:	ee00 0a10 	vmov	s0, r0
   d4c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
   d4c9c:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4cbc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
   d4ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4ca4:	000dbdbe 	.word	0x000dbdbe
   d4ca8:	000dbdaa 	.word	0x000dbdaa
   d4cac:	2003e254 	.word	0x2003e254
   d4cb0:	000dbdbd 	.word	0x000dbdbd
   d4cb4:	000dbdc9 	.word	0x000dbdc9
   d4cb8:	000dbdce 	.word	0x000dbdce
   d4cbc:	cda2425f 	.word	0xcda2425f

000d4cc0 <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d4cc0:	b570      	push	{r4, r5, r6, lr}
   d4cc2:	ed2d 8b02 	vpush	{d8}
   d4cc6:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4cc8:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d4cca:	460e      	mov	r6, r1
   d4ccc:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4cce:	6841      	ldr	r1, [r0, #4]
   d4cd0:	4849      	ldr	r0, [pc, #292]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4cd2:	f242 3234 	movw	r2, #9012	; 0x2334
   d4cd6:	f003 fa49 	bl	d816c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f242 3234 	movw	r2, #9012	; 0x2334
   d4ce0:	6861      	ldr	r1, [r4, #4]
   d4ce2:	f7ff ff1f 	bl	d4b24 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
   d4ce6:	4844      	ldr	r0, [pc, #272]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4ce8:	f003 f969 	bl	d7fbe <_ZN9TCPClient9connectedEv>
   d4cec:	2800      	cmp	r0, #0
   d4cee:	d077      	beq.n	d4de0 <_ZN6UbiTCP3getEPKcS1_+0x120>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
   d4cf0:	68a1      	ldr	r1, [r4, #8]
   d4cf2:	4841      	ldr	r0, [pc, #260]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4cf4:	f002 f9f2 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
   d4cf8:	4940      	ldr	r1, [pc, #256]	; (d4dfc <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d4cfa:	483f      	ldr	r0, [pc, #252]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4cfc:	f002 f9ee 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
   d4d00:	68e1      	ldr	r1, [r4, #12]
   d4d02:	483d      	ldr	r0, [pc, #244]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d04:	f002 f9ea 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
   d4d08:	493d      	ldr	r1, [pc, #244]	; (d4e00 <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d4d0a:	483b      	ldr	r0, [pc, #236]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d0c:	f002 f9e6 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
   d4d10:	4631      	mov	r1, r6
   d4d12:	4839      	ldr	r0, [pc, #228]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d14:	f002 f9e2 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
   d4d18:	493a      	ldr	r1, [pc, #232]	; (d4e04 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d4d1a:	4837      	ldr	r0, [pc, #220]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d1c:	f002 f9de 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
   d4d20:	4629      	mov	r1, r5
   d4d22:	4835      	ldr	r0, [pc, #212]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d24:	f002 f9da 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
   d4d28:	4937      	ldr	r1, [pc, #220]	; (d4e08 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d4d2a:	4833      	ldr	r0, [pc, #204]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4d2c:	f002 f9d6 	bl	d70dc <_ZN5Print5printEPKc>

    if (_debug) {
   d4d30:	7d23      	ldrb	r3, [r4, #20]
   d4d32:	b3b3      	cbz	r3, d4da2 <_ZN6UbiTCP3getEPKcS1_+0xe2>
      Serial.println("----");
   d4d34:	f002 ff6a 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d38:	4934      	ldr	r1, [pc, #208]	; (d4e0c <_ZN6UbiTCP3getEPKcS1_+0x14c>)
   d4d3a:	f002 f9e2 	bl	d7102 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
   d4d3e:	f002 ff65 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d42:	4933      	ldr	r1, [pc, #204]	; (d4e10 <_ZN6UbiTCP3getEPKcS1_+0x150>)
   d4d44:	f002 f9dd 	bl	d7102 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
   d4d48:	f002 ff60 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d4c:	68a1      	ldr	r1, [r4, #8]
   d4d4e:	f002 f9c5 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("|LV|");
   d4d52:	f002 ff5b 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d56:	4929      	ldr	r1, [pc, #164]	; (d4dfc <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d4d58:	f002 f9c0 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_token);
   d4d5c:	f002 ff56 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d60:	68e1      	ldr	r1, [r4, #12]
   d4d62:	f002 f9bb 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("|");
   d4d66:	f002 ff51 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d6a:	4925      	ldr	r1, [pc, #148]	; (d4e00 <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d4d6c:	f002 f9b6 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d4d70:	f002 ff4c 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d74:	4631      	mov	r1, r6
   d4d76:	f002 f9b1 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(":");
   d4d7a:	f002 ff47 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d7e:	4921      	ldr	r1, [pc, #132]	; (d4e04 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d4d80:	f002 f9ac 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d4d84:	f002 ff42 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d88:	4629      	mov	r1, r5
   d4d8a:	f002 f9a7 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("|end");
   d4d8e:	f002 ff3d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d92:	491d      	ldr	r1, [pc, #116]	; (d4e08 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d4d94:	f002 f9a2 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.println("\n----");
   d4d98:	f002 ff38 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4d9c:	491d      	ldr	r1, [pc, #116]	; (d4e14 <_ZN6UbiTCP3getEPKcS1_+0x154>)
   d4d9e:	f002 f9b0 	bl	d7102 <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d4da2:	4620      	mov	r0, r4
   d4da4:	f7ff ff06 	bl	d4bb4 <_ZN6UbiTCP16waitServerAnswerEv>
   d4da8:	b928      	cbnz	r0, d4db6 <_ZN6UbiTCP3getEPKcS1_+0xf6>
      _client_tcp_ubi.stop();
   d4daa:	4813      	ldr	r0, [pc, #76]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4dac:	f003 fada 	bl	d8364 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
   d4db0:	ed9f 0a19 	vldr	s0, [pc, #100]	; d4e18 <_ZN6UbiTCP3getEPKcS1_+0x158>
   d4db4:	e01d      	b.n	d4df2 <_ZN6UbiTCP3getEPKcS1_+0x132>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4db6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d4dba:	f001 fda5 	bl	d6908 <malloc>
    float value = parseTCPAnswer("LV", response);
   d4dbe:	4917      	ldr	r1, [pc, #92]	; (d4e1c <_ZN6UbiTCP3getEPKcS1_+0x15c>)
   d4dc0:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4dc2:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	f7ff ff17 	bl	d4bf8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d4dca:	480b      	ldr	r0, [pc, #44]	; (d4df8 <_ZN6UbiTCP3getEPKcS1_+0x138>)
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
    float value = parseTCPAnswer("LV", response);
   d4dcc:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d4dd0:	f003 fac8 	bl	d8364 <_ZN9TCPClient4stopEv>
    free(response);
   d4dd4:	4628      	mov	r0, r5
   d4dd6:	f001 fd9f 	bl	d6918 <free>
    return value;
   d4dda:	eeb0 0a48 	vmov.f32	s0, s16
   d4dde:	e008      	b.n	d4df2 <_ZN6UbiTCP3getEPKcS1_+0x132>
  }

  if (_debug) {
   d4de0:	7d23      	ldrb	r3, [r4, #20]
   d4de2:	2b00      	cmp	r3, #0
   d4de4:	d0e1      	beq.n	d4daa <_ZN6UbiTCP3getEPKcS1_+0xea>
    Serial.println("ERROR could not connect to the server");
   d4de6:	f002 ff11 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4dea:	490d      	ldr	r1, [pc, #52]	; (d4e20 <_ZN6UbiTCP3getEPKcS1_+0x160>)
   d4dec:	f002 f989 	bl	d7102 <_ZN5Print7printlnEPKc>
   d4df0:	e7db      	b.n	d4daa <_ZN6UbiTCP3getEPKcS1_+0xea>
  }

  _client_tcp_ubi.stop();
  return ERROR_VALUE;
}
   d4df2:	ecbd 8b02 	vpop	{d8}
   d4df6:	bd70      	pop	{r4, r5, r6, pc}
   d4df8:	2003e254 	.word	0x2003e254
   d4dfc:	000dbdd1 	.word	0x000dbdd1
   d4e00:	000dbdd4 	.word	0x000dbdd4
   d4e04:	000dbf2c 	.word	0x000dbf2c
   d4e08:	000dbf6a 	.word	0x000dbf6a
   d4e0c:	000dbdec 	.word	0x000dbdec
   d4e10:	000dbdd6 	.word	0x000dbdd6
   d4e14:	000dbdeb 	.word	0x000dbdeb
   d4e18:	cda2425f 	.word	0xcda2425f
   d4e1c:	000dbdf1 	.word	0x000dbdf1
   d4e20:	000dbdf4 	.word	0x000dbdf4

000d4e24 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d4e24:	b570      	push	{r4, r5, r6, lr}
   d4e26:	ed2d 8b02 	vpush	{d8}
   d4e2a:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4e2c:	6841      	ldr	r1, [r0, #4]
   d4e2e:	4822      	ldr	r0, [pc, #136]	; (d4eb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e30:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d4e34:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4e36:	2300      	movs	r3, #0
   d4e38:	f003 f998 	bl	d816c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	f242 3234 	movw	r2, #9012	; 0x2334
   d4e42:	6861      	ldr	r1, [r4, #4]
   d4e44:	f7ff fe6e 	bl	d4b24 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
   d4e48:	481b      	ldr	r0, [pc, #108]	; (d4eb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e4a:	f003 f8b8 	bl	d7fbe <_ZN9TCPClient9connectedEv>
   d4e4e:	b330      	cbz	r0, d4e9e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x7a>
    _client_tcp_ubi.print(payload);
   d4e50:	4629      	mov	r1, r5
   d4e52:	4819      	ldr	r0, [pc, #100]	; (d4eb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e54:	f002 f942 	bl	d70dc <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
   d4e58:	4620      	mov	r0, r4
   d4e5a:	f7ff feab 	bl	d4bb4 <_ZN6UbiTCP16waitServerAnswerEv>
   d4e5e:	4605      	mov	r5, r0
   d4e60:	b920      	cbnz	r0, d4e6c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x48>
    _client_tcp_ubi.stop();
   d4e62:	4815      	ldr	r0, [pc, #84]	; (d4eb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e64:	f003 fa7e 	bl	d8364 <_ZN9TCPClient4stopEv>
    return false;
   d4e68:	2500      	movs	r5, #0
   d4e6a:	e021      	b.n	d4eb0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d4e6c:	2064      	movs	r0, #100	; 0x64
   d4e6e:	f001 fd4b 	bl	d6908 <malloc>

  float value = parseTCPAnswer("POST", response);
   d4e72:	4912      	ldr	r1, [pc, #72]	; (d4ebc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d4e74:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d4e76:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f7ff febd 	bl	d4bf8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d4e7e:	4630      	mov	r0, r6
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);

  float value = parseTCPAnswer("POST", response);
   d4e80:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d4e84:	f001 fd48 	bl	d6918 <free>
  if (value != ERROR_VALUE) {
   d4e88:	eddf 7a0d 	vldr	s15, [pc, #52]	; d4ec0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d4e8c:	eeb4 8a67 	vcmp.f32	s16, s15
   d4e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e94:	d0e5      	beq.n	d4e62 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d4e96:	4808      	ldr	r0, [pc, #32]	; (d4eb8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e98:	f003 fa64 	bl	d8364 <_ZN9TCPClient4stopEv>
   d4e9c:	e008      	b.n	d4eb0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
   d4e9e:	7d23      	ldrb	r3, [r4, #20]
   d4ea0:	2b00      	cmp	r3, #0
   d4ea2:	d0de      	beq.n	d4e62 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d4ea4:	f002 feb2 	bl	d7c0c <_Z16_fetch_usbserialv>
   d4ea8:	4906      	ldr	r1, [pc, #24]	; (d4ec4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d4eaa:	f002 f92a 	bl	d7102 <_ZN5Print7printlnEPKc>
   d4eae:	e7d8      	b.n	d4e62 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
   d4eb0:	ecbd 8b02 	vpop	{d8}
   d4eb4:	4628      	mov	r0, r5
   d4eb6:	bd70      	pop	{r4, r5, r6, pc}
   d4eb8:	2003e254 	.word	0x2003e254
   d4ebc:	000dbdc9 	.word	0x000dbdc9
   d4ec0:	cda2425f 	.word	0xcda2425f
   d4ec4:	000dbe1a 	.word	0x000dbe1a

000d4ec8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d4ec8:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d4eca:	4c06      	ldr	r4, [pc, #24]	; (d4ee4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d4ecc:	f001 fab0 	bl	d6430 <HAL_Pin_Map>
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	f003 faff 	bl	d84d4 <_ZN9TCPClientC1Ev>
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	4a03      	ldr	r2, [pc, #12]	; (d4ee8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d4eda:	4904      	ldr	r1, [pc, #16]	; (d4eec <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d4edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ee0:	f003 bca4 	b.w	d882c <__aeabi_atexit>
   d4ee4:	2003e254 	.word	0x2003e254
   d4ee8:	2003e11c 	.word	0x2003e11c
   d4eec:	000d4135 	.word	0x000d4135

000d4ef0 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d4ef0:	b538      	push	{r3, r4, r5, lr}
   d4ef2:	4604      	mov	r4, r0
  _dirty = true;
   d4ef4:	2001      	movs	r0, #1
   d4ef6:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d4ef8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4efc:	68e5      	ldr	r5, [r4, #12]
   d4efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4f02:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d4f06:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d4f0a:	68e0      	ldr	r0, [r4, #12]
   d4f0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d4f10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d4f14:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d4f18:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d4f1c:	68e0      	ldr	r0, [r4, #12]
   d4f1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d4f22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d4f26:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d4f28:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d4f2c:	68e1      	ldr	r1, [r4, #12]
   d4f2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d4f32:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d4f36:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d4f38:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d4f3c:	68e2      	ldr	r2, [r4, #12]
   d4f3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4f42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4f46:	9a04      	ldr	r2, [sp, #16]
   d4f48:	611a      	str	r2, [r3, #16]
  _current_value++;
   d4f4a:	7c23      	ldrb	r3, [r4, #16]
   d4f4c:	3301      	adds	r3, #1
   d4f4e:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d4f50:	2b0a      	cmp	r3, #10
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
   d4f52:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d4f54:	dd08      	ble.n	d4f68 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d4f56:	7ca3      	ldrb	r3, [r4, #18]
   d4f58:	b123      	cbz	r3, d4f64 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(
   d4f5a:	f002 fe57 	bl	d7c0c <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
   d4f5e:	4903      	ldr	r1, [pc, #12]	; (d4f6c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d4f60:	f002 f8cf 	bl	d7102 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d4f64:	230a      	movs	r3, #10
   d4f66:	7423      	strb	r3, [r4, #16]
   d4f68:	bd38      	pop	{r3, r4, r5, pc}
   d4f6a:	bf00      	nop
   d4f6c:	000dbe4c 	.word	0x000dbe4c

000d4f70 <_ZN18UbiProtocolHandler3getEPKcS1_>:
  _current_value = 0;
  return result;
}

float UbiProtocolHandler::get(const char* device_label,
                              const char* variable_label) {
   d4f70:	b510      	push	{r4, lr}
  if (_iot_protocol == UBI_UDP || _iot_protocol == UBI_PARTICLE) {
   d4f72:	7cc3      	ldrb	r3, [r0, #19]
   d4f74:	3b02      	subs	r3, #2
   d4f76:	2b01      	cmp	r3, #1
   d4f78:	d905      	bls.n	d4f86 <_ZN18UbiProtocolHandler3getEPKcS1_+0x16>
    return ERROR_VALUE;
  }

  float value = ERROR_VALUE;

  value = _ubiProtocol->get(device_label, variable_label);
   d4f7a:	6840      	ldr	r0, [r0, #4]
   d4f7c:	6803      	ldr	r3, [r0, #0]

  return value;
}
   d4f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ERROR_VALUE;
  }

  float value = ERROR_VALUE;

  value = _ubiProtocol->get(device_label, variable_label);
   d4f82:	685b      	ldr	r3, [r3, #4]
   d4f84:	4718      	bx	r3
}

float UbiProtocolHandler::get(const char* device_label,
                              const char* variable_label) {
  if (_iot_protocol == UBI_UDP || _iot_protocol == UBI_PARTICLE) {
    Serial.println(
   d4f86:	f002 fe41 	bl	d7c0c <_Z16_fetch_usbserialv>
        "ERROR, data retrieval is only supported using TCP or HTTP protocols");
   d4f8a:	4903      	ldr	r1, [pc, #12]	; (d4f98 <_ZN18UbiProtocolHandler3getEPKcS1_+0x28>)
   d4f8c:	f002 f8b9 	bl	d7102 <_ZN5Print7printlnEPKc>
  float value = ERROR_VALUE;

  value = _ubiProtocol->get(device_label, variable_label);

  return value;
}
   d4f90:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4f9c <_ZN18UbiProtocolHandler3getEPKcS1_+0x2c>
   d4f94:	bd10      	pop	{r4, pc}
   d4f96:	bf00      	nop
   d4f98:	000dbe8b 	.word	0x000dbe8b
   d4f9c:	cda2425f 	.word	0xcda2425f

000d4fa0 <_ZN18UbiProtocolHandler8setDebugEb>:
/*
  Makes debug messages available
*/

void UbiProtocolHandler::setDebug(bool debug) {
  _debug = debug;
   d4fa0:	7481      	strb	r1, [r0, #18]
  _ubiProtocol->setDebug(debug);
   d4fa2:	6840      	ldr	r0, [r0, #4]
   d4fa4:	6803      	ldr	r3, [r0, #0]
   d4fa6:	689b      	ldr	r3, [r3, #8]
   d4fa8:	4718      	bx	r3
	...

000d4fac <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d4fac:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d4fae:	ee10 0a10 	vmov	r0, s0
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d4fb2:	b087      	sub	sp, #28
   d4fb4:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d4fb6:	f003 ffc3 	bl	d8f40 <__aeabi_f2d>
   d4fba:	ad01      	add	r5, sp, #4
   d4fbc:	4602      	mov	r2, r0
   d4fbe:	460b      	mov	r3, r1
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	4909      	ldr	r1, [pc, #36]	; (d4fe8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
   d4fc4:	f001 fcb0 	bl	d6928 <sprintf>
   d4fc8:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
   d4fca:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
   d4fcc:	5ca9      	ldrb	r1, [r5, r2]
   d4fce:	2920      	cmp	r1, #32
   d4fd0:	d005      	beq.n	d4fde <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d4fd2:	54e1      	strb	r1, [r4, r3]
      k++;
   d4fd4:	3301      	adds	r3, #1
   d4fd6:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d4fd8:	b909      	cbnz	r1, d4fde <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d4fda:	54e1      	strb	r1, [r4, r3]
      break;
   d4fdc:	e002      	b.n	d4fe4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x38>
   d4fde:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d4fe0:	2a14      	cmp	r2, #20
   d4fe2:	d1f3      	bne.n	d4fcc <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
   d4fe4:	b007      	add	sp, #28
   d4fe6:	bd30      	pop	{r4, r5, pc}
   d4fe8:	000dbecf 	.word	0x000dbecf

000d4fec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d4fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ff0:	460c      	mov	r4, r1
   d4ff2:	b089      	sub	sp, #36	; 0x24
   d4ff4:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
   d4ff6:	4949      	ldr	r1, [pc, #292]	; (d511c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	f004 fc89 	bl	d9910 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
   d4ffe:	2600      	movs	r6, #0
   d5000:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5004:	429e      	cmp	r6, r3
   d5006:	da6a      	bge.n	d50de <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf2>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5008:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d500c:	68eb      	ldr	r3, [r5, #12]
   d500e:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d5012:	443b      	add	r3, r7
   d5014:	f10d 090c 	add.w	r9, sp, #12
   d5018:	ed93 0a02 	vldr	s0, [r3, #8]
   d501c:	4649      	mov	r1, r9
   d501e:	4628      	mov	r0, r5
   d5020:	f7ff ffc4 	bl	d4fac <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
   d5024:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
   d5026:	f8cd 9000 	str.w	r9, [sp]
   d502a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d502e:	493c      	ldr	r1, [pc, #240]	; (d5120 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
   d5030:	4622      	mov	r2, r4
   d5032:	4620      	mov	r0, r4
   d5034:	f001 fc78 	bl	d6928 <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5038:	68eb      	ldr	r3, [r5, #12]
   d503a:	443b      	add	r3, r7
   d503c:	68db      	ldr	r3, [r3, #12]
   d503e:	b36b      	cbz	r3, d509c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
   d5040:	4622      	mov	r2, r4
   d5042:	4938      	ldr	r1, [pc, #224]	; (d5124 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
   d5044:	4620      	mov	r0, r4
   d5046:	f001 fc6f 	bl	d6928 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d504a:	68eb      	ldr	r3, [r5, #12]
   d504c:	443b      	add	r3, r7
   d504e:	691b      	ldr	r3, [r3, #16]
   d5050:	b1fb      	cbz	r3, d5092 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5052:	200a      	movs	r0, #10
   d5054:	fb93 f1f0 	sdiv	r1, r3, r0
   d5058:	fb91 fcf0 	sdiv	ip, r1, r0
   d505c:	fb00 1c1c 	mls	ip, r0, ip, r1
   d5060:	fb00 3111 	mls	r1, r0, r1, r3
   d5064:	b2c9      	uxtb	r1, r1
   d5066:	2264      	movs	r2, #100	; 0x64
   d5068:	fb93 f2f2 	sdiv	r2, r3, r2
   d506c:	fb92 fef0 	sdiv	lr, r2, r0
   d5070:	fb00 221e 	mls	r2, r0, lr, r2
   d5074:	9100      	str	r1, [sp, #0]
   d5076:	fa5f f38c 	uxtb.w	r3, ip
   d507a:	b2d2      	uxtb	r2, r2
   d507c:	492a      	ldr	r1, [pc, #168]	; (d5128 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
   d507e:	a802      	add	r0, sp, #8
   d5080:	f001 fc52 	bl	d6928 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5084:	ab02      	add	r3, sp, #8
   d5086:	4622      	mov	r2, r4
   d5088:	4928      	ldr	r1, [pc, #160]	; (d512c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d508a:	4620      	mov	r0, r4
   d508c:	f001 fc4c 	bl	d6928 <sprintf>
   d5090:	e004      	b.n	d509c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      } else {
        sprintf(payload, "%s000", payload);
   d5092:	4622      	mov	r2, r4
   d5094:	4926      	ldr	r1, [pc, #152]	; (d5130 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d5096:	4620      	mov	r0, r4
   d5098:	f001 fc46 	bl	d6928 <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d509c:	68eb      	ldr	r3, [r5, #12]
   d509e:	441f      	add	r7, r3
   d50a0:	687b      	ldr	r3, [r7, #4]
   d50a2:	b123      	cbz	r3, d50ae <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
   d50a4:	4622      	mov	r2, r4
   d50a6:	4923      	ldr	r1, [pc, #140]	; (d5134 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d50a8:	4620      	mov	r0, r4
   d50aa:	f001 fc3d 	bl	d6928 <sprintf>
    }

    sprintf(payload, "%s}", payload);
   d50ae:	4622      	mov	r2, r4
   d50b0:	4921      	ldr	r1, [pc, #132]	; (d5138 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d50b2:	4620      	mov	r0, r4
   d50b4:	f001 fc38 	bl	d6928 <sprintf>
    i++;
   d50b8:	3601      	adds	r6, #1

    if (i < _current_value) {
   d50ba:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
   d50be:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d50c0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d50c2:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
   d50c4:	da04      	bge.n	d50d0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
      sprintf(payload, "%s,", payload);
   d50c6:	491d      	ldr	r1, [pc, #116]	; (d513c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d50c8:	4620      	mov	r0, r4
   d50ca:	f001 fc2d 	bl	d6928 <sprintf>
   d50ce:	e797      	b.n	d5000 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
   d50d0:	4919      	ldr	r1, [pc, #100]	; (d5138 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d50d2:	4620      	mov	r0, r4
   d50d4:	f001 fc28 	bl	d6928 <sprintf>
      _current_value = 0;
   d50d8:	2300      	movs	r3, #0
   d50da:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
   d50dc:	e790      	b.n	d5000 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d50de:	7cab      	ldrb	r3, [r5, #18]
   d50e0:	b1c3      	cbz	r3, d5114 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>
    Serial.println("----------");
   d50e2:	f002 fd93 	bl	d7c0c <_Z16_fetch_usbserialv>
   d50e6:	4916      	ldr	r1, [pc, #88]	; (d5140 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d50e8:	f002 f80b 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d50ec:	f002 fd8e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d50f0:	4914      	ldr	r1, [pc, #80]	; (d5144 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d50f2:	f002 f806 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d50f6:	f002 fd89 	bl	d7c0c <_Z16_fetch_usbserialv>
   d50fa:	4621      	mov	r1, r4
   d50fc:	f002 f801 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d5100:	f002 fd84 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5104:	490e      	ldr	r1, [pc, #56]	; (d5140 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5106:	f001 fffc 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d510a:	f002 fd7f 	bl	d7c0c <_Z16_fetch_usbserialv>
   d510e:	490e      	ldr	r1, [pc, #56]	; (d5148 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d5110:	f001 fff7 	bl	d7102 <_ZN5Print7printlnEPKc>
  }
}
   d5114:	b009      	add	sp, #36	; 0x24
   d5116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d511a:	bf00      	nop
   d511c:	000dbed4 	.word	0x000dbed4
   d5120:	000dbed6 	.word	0x000dbed6
   d5124:	000dbee9 	.word	0x000dbee9
   d5128:	000dbefc 	.word	0x000dbefc
   d512c:	000dbf03 	.word	0x000dbf03
   d5130:	000dbf08 	.word	0x000dbf08
   d5134:	000dbf0e 	.word	0x000dbf0e
   d5138:	000dbf1d 	.word	0x000dbf1d
   d513c:	000dbf21 	.word	0x000dbf21
   d5140:	000dbdbe 	.word	0x000dbdbe
   d5144:	000dbf25 	.word	0x000dbf25
   d5148:	000dc20f 	.word	0x000dc20f

000d514c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d514c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5150:	460c      	mov	r4, r1
   d5152:	4605      	mov	r5, r0
   d5154:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d5156:	4950      	ldr	r1, [pc, #320]	; (d5298 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d5158:	4620      	mov	r0, r4
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d515a:	4616      	mov	r6, r2
   d515c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d515e:	f004 fbd7 	bl	d9910 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d5162:	68ab      	ldr	r3, [r5, #8]
   d5164:	4a4d      	ldr	r2, [pc, #308]	; (d529c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
   d5166:	494e      	ldr	r1, [pc, #312]	; (d52a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d5168:	4620      	mov	r0, r4
   d516a:	f001 fbdd 	bl	d6928 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d516e:	4633      	mov	r3, r6
   d5170:	4622      	mov	r2, r4
   d5172:	494c      	ldr	r1, [pc, #304]	; (d52a4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d5174:	9700      	str	r7, [sp, #0]
   d5176:	4620      	mov	r0, r4
   d5178:	f001 fbd6 	bl	d6928 <sprintf>

  sprintf(payload, "%s=>", payload);
   d517c:	4622      	mov	r2, r4
   d517e:	494a      	ldr	r1, [pc, #296]	; (d52a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d5180:	4620      	mov	r0, r4
   d5182:	f001 fbd1 	bl	d6928 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d5186:	2600      	movs	r6, #0
   d5188:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d518c:	429e      	cmp	r6, r3
   d518e:	da64      	bge.n	d525a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10e>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5190:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d5194:	68eb      	ldr	r3, [r5, #12]
   d5196:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d519a:	443b      	add	r3, r7
   d519c:	f10d 090c 	add.w	r9, sp, #12
   d51a0:	ed93 0a02 	vldr	s0, [r3, #8]
   d51a4:	4649      	mov	r1, r9
   d51a6:	4628      	mov	r0, r5
   d51a8:	f7ff ff00 	bl	d4fac <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
   d51ac:	68eb      	ldr	r3, [r5, #12]
            str_value);
   d51ae:	f8cd 9000 	str.w	r9, [sp]
   d51b2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d51b6:	493b      	ldr	r1, [pc, #236]	; (d52a4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d51b8:	4622      	mov	r2, r4
   d51ba:	4620      	mov	r0, r4
   d51bc:	f001 fbb4 	bl	d6928 <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d51c0:	68eb      	ldr	r3, [r5, #12]
   d51c2:	443b      	add	r3, r7
   d51c4:	685b      	ldr	r3, [r3, #4]
   d51c6:	b123      	cbz	r3, d51d2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x86>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d51c8:	4622      	mov	r2, r4
   d51ca:	4938      	ldr	r1, [pc, #224]	; (d52ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d51cc:	4620      	mov	r0, r4
   d51ce:	f001 fbab 	bl	d6928 <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d51d2:	68eb      	ldr	r3, [r5, #12]
   d51d4:	443b      	add	r3, r7
   d51d6:	68db      	ldr	r3, [r3, #12]
   d51d8:	b363      	cbz	r3, d5234 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d51da:	4622      	mov	r2, r4
   d51dc:	4934      	ldr	r1, [pc, #208]	; (d52b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   d51de:	4620      	mov	r0, r4
   d51e0:	f001 fba2 	bl	d6928 <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d51e4:	68eb      	ldr	r3, [r5, #12]
   d51e6:	441f      	add	r7, r3
   d51e8:	693f      	ldr	r7, [r7, #16]
   d51ea:	b1f7      	cbz	r7, d522a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xde>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d51ec:	200a      	movs	r0, #10
   d51ee:	fb97 f1f0 	sdiv	r1, r7, r0
   d51f2:	fb91 f3f0 	sdiv	r3, r1, r0
   d51f6:	fb00 1313 	mls	r3, r0, r3, r1
   d51fa:	fb00 7111 	mls	r1, r0, r1, r7
   d51fe:	b2c9      	uxtb	r1, r1
   d5200:	2264      	movs	r2, #100	; 0x64
   d5202:	fb97 f2f2 	sdiv	r2, r7, r2
   d5206:	fb92 fef0 	sdiv	lr, r2, r0
   d520a:	fb00 221e 	mls	r2, r0, lr, r2
   d520e:	9100      	str	r1, [sp, #0]
   d5210:	b2db      	uxtb	r3, r3
   d5212:	b2d2      	uxtb	r2, r2
   d5214:	4927      	ldr	r1, [pc, #156]	; (d52b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d5216:	a802      	add	r0, sp, #8
   d5218:	f001 fb86 	bl	d6928 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d521c:	ab02      	add	r3, sp, #8
   d521e:	4622      	mov	r2, r4
   d5220:	4925      	ldr	r1, [pc, #148]	; (d52b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d5222:	4620      	mov	r0, r4
   d5224:	f001 fb80 	bl	d6928 <sprintf>
   d5228:	e004      	b.n	d5234 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      } else {
        sprintf(payload, "%s000", payload);
   d522a:	4622      	mov	r2, r4
   d522c:	4923      	ldr	r1, [pc, #140]	; (d52bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d522e:	4620      	mov	r0, r4
   d5230:	f001 fb7a 	bl	d6928 <sprintf>
      }
    }

    i++;
   d5234:	3601      	adds	r6, #1

    if (i < _current_value) {
   d5236:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
   d523a:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d523c:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d523e:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
   d5240:	da04      	bge.n	d524c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x100>
      sprintf(payload, "%s,", payload);
   d5242:	491f      	ldr	r1, [pc, #124]	; (d52c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d5244:	4620      	mov	r0, r4
   d5246:	f001 fb6f 	bl	d6928 <sprintf>
   d524a:	e79d      	b.n	d5188 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
   d524c:	491d      	ldr	r1, [pc, #116]	; (d52c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d524e:	4620      	mov	r0, r4
   d5250:	f001 fb6a 	bl	d6928 <sprintf>
      _current_value = 0;
   d5254:	2300      	movs	r3, #0
   d5256:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
   d5258:	e796      	b.n	d5188 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d525a:	7cab      	ldrb	r3, [r5, #18]
   d525c:	b1c3      	cbz	r3, d5290 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>
    Serial.println("----------");
   d525e:	f002 fcd5 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5262:	4919      	ldr	r1, [pc, #100]	; (d52c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d5264:	f001 ff4d 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d5268:	f002 fcd0 	bl	d7c0c <_Z16_fetch_usbserialv>
   d526c:	4917      	ldr	r1, [pc, #92]	; (d52cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d526e:	f001 ff48 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d5272:	f002 fccb 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5276:	4621      	mov	r1, r4
   d5278:	f001 ff43 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d527c:	f002 fcc6 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5280:	4911      	ldr	r1, [pc, #68]	; (d52c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d5282:	f001 ff3e 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d5286:	f002 fcc1 	bl	d7c0c <_Z16_fetch_usbserialv>
   d528a:	4903      	ldr	r1, [pc, #12]	; (d5298 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d528c:	f001 ff39 	bl	d7102 <_ZN5Print7printlnEPKc>
  }
}
   d5290:	b009      	add	sp, #36	; 0x24
   d5292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5296:	bf00      	nop
   d5298:	000dc20f 	.word	0x000dc20f
   d529c:	000dbf2e 	.word	0x000dbf2e
   d52a0:	000dbf42 	.word	0x000dbf42
   d52a4:	000dbf4e 	.word	0x000dbf4e
   d52a8:	000dbf56 	.word	0x000dbf56
   d52ac:	000dbf5b 	.word	0x000dbf5b
   d52b0:	000dbf61 	.word	0x000dbf61
   d52b4:	000dbefc 	.word	0x000dbefc
   d52b8:	000dbf03 	.word	0x000dbf03
   d52bc:	000dbf08 	.word	0x000dbf08
   d52c0:	000dbf21 	.word	0x000dbf21
   d52c4:	000dbf68 	.word	0x000dbf68
   d52c8:	000dbdbe 	.word	0x000dbdbe
   d52cc:	000dbf25 	.word	0x000dbf25

000d52d0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d52d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d52d4:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d52d6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d52da:	461f      	mov	r7, r3
   d52dc:	460e      	mov	r6, r1
   d52de:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d52e0:	f001 fb12 	bl	d6908 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d52e4:	7ce3      	ldrb	r3, [r4, #19]
   d52e6:	3b01      	subs	r3, #1
   d52e8:	2b01      	cmp	r3, #1
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d52ea:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d52ec:	d806      	bhi.n	d52fc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
   d52ee:	4601      	mov	r1, r0
   d52f0:	4643      	mov	r3, r8
   d52f2:	4632      	mov	r2, r6
   d52f4:	4620      	mov	r0, r4
   d52f6:	f7ff ff29 	bl	d514c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
   d52fa:	e003      	b.n	d5304 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
   d52fc:	4601      	mov	r1, r0
   d52fe:	4620      	mov	r0, r4
   d5300:	f7ff fe74 	bl	d4fec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
   d5304:	7ca3      	ldrb	r3, [r4, #18]
   d5306:	b123      	cbz	r3, d5312 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
   d5308:	f002 fc80 	bl	d7c0c <_Z16_fetch_usbserialv>
   d530c:	490d      	ldr	r1, [pc, #52]	; (d5344 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
   d530e:	f001 fef8 	bl	d7102 <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d5312:	6860      	ldr	r0, [r4, #4]
   d5314:	6803      	ldr	r3, [r0, #0]
   d5316:	9700      	str	r7, [sp, #0]
   d5318:	4631      	mov	r1, r6
   d531a:	4642      	mov	r2, r8
   d531c:	f8d3 9000 	ldr.w	r9, [r3]
   d5320:	462b      	mov	r3, r5
   d5322:	47c8      	blx	r9
   d5324:	4606      	mov	r6, r0
  free(payload);
   d5326:	4628      	mov	r0, r5
   d5328:	f001 faf6 	bl	d6918 <free>
  delete flags;
   d532c:	2101      	movs	r1, #1
   d532e:	4638      	mov	r0, r7
   d5330:	f003 fa8a 	bl	d8848 <_ZdlPvj>
   d5334:	2300      	movs	r3, #0
  if (result) {
   d5336:	b106      	cbz	r6, d533a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
   d5338:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
   d533a:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
   d533c:	7423      	strb	r3, [r4, #16]
  return result;
}
   d533e:	b003      	add	sp, #12
   d5340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5344:	000dbf6f 	.word	0x000dbf6f

000d5348 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d5348:	b570      	push	{r4, r5, r6, lr}
   d534a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d534c:	2001      	movs	r0, #1
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d534e:	460d      	mov	r5, r1
   d5350:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d5352:	f7fe fea2 	bl	d409a <_Znwj>
  flags->particle_flag = flag;
   d5356:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
   d5358:	4603      	mov	r3, r0
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d535a:	462a      	mov	r2, r5
   d535c:	4629      	mov	r1, r5
   d535e:	4620      	mov	r0, r4
}
   d5360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d5364:	f7ff bfb4 	b.w	d52d0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d5368 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5368:	b570      	push	{r4, r5, r6, lr}
   d536a:	4606      	mov	r6, r0
   d536c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d536e:	b184      	cbz	r4, d5392 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
   d5370:	68e1      	ldr	r1, [r4, #12]
   d5372:	4630      	mov	r0, r6
   d5374:	f7ff fff8 	bl	d5368 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5378:	69e3      	ldr	r3, [r4, #28]
   d537a:	68a5      	ldr	r5, [r4, #8]
   d537c:	b123      	cbz	r3, d5388 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d537e:	f104 0114 	add.w	r1, r4, #20
   d5382:	2203      	movs	r2, #3
   d5384:	4608      	mov	r0, r1
   d5386:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5388:	4620      	mov	r0, r4
   d538a:	f7fe fe8a 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d538e:	462c      	mov	r4, r5
   d5390:	e7ed      	b.n	d536e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
   d5392:	bd70      	pop	{r4, r5, r6, pc}

000d5394 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
   d5394:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5396:	b08d      	sub	sp, #52	; 0x34
   d5398:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d539a:	a801      	add	r0, sp, #4
   d539c:	460d      	mov	r5, r1
   d539e:	4617      	mov	r7, r2
   d53a0:	461e      	mov	r6, r3
   d53a2:	f001 fa89 	bl	d68b8 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d53a6:	9803      	ldr	r0, [sp, #12]
   d53a8:	3001      	adds	r0, #1
   d53aa:	f7fe fe78 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d53ae:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d53b0:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d53b2:	f004 faad 	bl	d9910 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   d53b6:	462a      	mov	r2, r5
   d53b8:	4633      	mov	r3, r6
   d53ba:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
   d53bc:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d53be:	a805      	add	r0, sp, #20
   d53c0:	f000 fe12 	bl	d5fe8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d53c4:	20c8      	movs	r0, #200	; 0xc8
   d53c6:	f001 fa9f 	bl	d6908 <malloc>
   d53ca:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d53cc:	a805      	add	r0, sp, #20
   d53ce:	f000 fd19 	bl	d5e04 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   d53d2:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
   d53d4:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
   d53d6:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d53d8:	9908      	ldr	r1, [sp, #32]
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
   d53da:	60a5      	str	r5, [r4, #8]
   d53dc:	a806      	add	r0, sp, #24
   d53de:	f7ff ffc3 	bl	d5368 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
   d53e2:	a801      	add	r0, sp, #4
   d53e4:	f001 fe0d 	bl	d7002 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
   d53e8:	b00d      	add	sp, #52	; 0x34
   d53ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53ec <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d53ec:	b538      	push	{r3, r4, r5, lr}
                                       IotProtocol iot_protocol) {
   d53ee:	2500      	movs	r5, #0

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d53f0:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
   d53f2:	7405      	strb	r5, [r0, #16]
   d53f4:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
   d53f6:	f7ff ffcd 	bl	d5394 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d53fa:	4620      	mov	r0, r4
   d53fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5400 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d5400:	4b02      	ldr	r3, [pc, #8]	; (d540c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d5402:	2200      	movs	r2, #0
   d5404:	701a      	strb	r2, [r3, #0]
   d5406:	f001 b813 	b.w	d6430 <HAL_Pin_Map>
   d540a:	bf00      	nop
   d540c:	2003e270 	.word	0x2003e270

000d5410 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d5410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5414:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d5416:	2050      	movs	r0, #80	; 0x50
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
   d5418:	7323      	strb	r3, [r4, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d541a:	460d      	mov	r5, r1
   d541c:	4616      	mov	r6, r2
   d541e:	461f      	mov	r7, r3
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d5420:	f001 fa72 	bl	d6908 <malloc>
   d5424:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d5426:	f44f 7082 	mov.w	r0, #260	; 0x104
   d542a:	f7fe fe36 	bl	d409a <_Znwj>
   d542e:	4680      	mov	r8, r0
   d5430:	b110      	cbz	r0, d5438 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d5432:	4629      	mov	r1, r5
   d5434:	f000 fe5e 	bl	d60f4 <_ZN7UbiMeshC1EPc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d5438:	7b23      	ldrb	r3, [r4, #12]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d543a:	f8c4 8000 	str.w	r8, [r4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d543e:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d5440:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d5444:	d00c      	beq.n	d5460 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x50>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d5446:	f7fe fe28 	bl	d409a <_Znwj>
   d544a:	4680      	mov	r8, r0
   d544c:	b120      	cbz	r0, d5458 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x48>
   d544e:	463b      	mov	r3, r7
   d5450:	4632      	mov	r2, r6
   d5452:	4629      	mov	r1, r5
   d5454:	f7ff ffca 	bl	d53ec <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d5458:	f8c4 8004 	str.w	r8, [r4, #4]
   d545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
   d5460:	f7fe fe1b 	bl	d409a <_Znwj>
   d5464:	4607      	mov	r7, r0
   d5466:	b120      	cbz	r0, d5472 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x62>
   d5468:	2301      	movs	r3, #1
   d546a:	4632      	mov	r2, r6
   d546c:	4629      	mov	r1, r5
   d546e:	f7ff ffbd 	bl	d53ec <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d5472:	6067      	str	r7, [r4, #4]
   d5474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5478 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d5478:	b510      	push	{r4, lr}
   d547a:	2300      	movs	r3, #0
   d547c:	4604      	mov	r4, r0
   d547e:	7343      	strb	r3, [r0, #13]
   d5480:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d5482:	4613      	mov	r3, r2
   d5484:	4a02      	ldr	r2, [pc, #8]	; (d5490 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d5486:	f7ff ffc3 	bl	d5410 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d548a:	4620      	mov	r0, r4
   d548c:	bd10      	pop	{r4, pc}
   d548e:	bf00      	nop
   d5490:	000dbf7f 	.word	0x000dbf7f

000d5494 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d5494:	b538      	push	{r3, r4, r5, lr}
   d5496:	4604      	mov	r4, r0
  free(_context);
   d5498:	6880      	ldr	r0, [r0, #8]
   d549a:	f001 fa3d 	bl	d6918 <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d549e:	6825      	ldr	r5, [r4, #0]
   d54a0:	b13d      	cbz	r5, d54b2 <_ZN7UbidotsD1Ev+0x1e>
   d54a2:	4628      	mov	r0, r5
   d54a4:	f000 fe3e 	bl	d6124 <_ZN7UbiMeshD1Ev>
   d54a8:	f44f 7182 	mov.w	r1, #260	; 0x104
   d54ac:	4628      	mov	r0, r5
   d54ae:	f003 f9cb 	bl	d8848 <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d54b2:	4620      	mov	r0, r4
   d54b4:	bd38      	pop	{r3, r4, r5, pc}

000d54b6 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d54b6:	b430      	push	{r4, r5}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d54b8:	7b05      	ldrb	r5, [r0, #12]
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d54ba:	9c02      	ldr	r4, [sp, #8]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d54bc:	2d04      	cmp	r5, #4
   d54be:	d103      	bne.n	d54c8 <_ZN7Ubidots3addEPcfS0_mj+0x12>
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d54c0:	6800      	ldr	r0, [r0, #0]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d54c2:	bc30      	pop	{r4, r5}
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d54c4:	f000 be36 	b.w	d6134 <_ZN7UbiMesh3addEPKcfS1_mj>
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d54c8:	9402      	str	r4, [sp, #8]
   d54ca:	6840      	ldr	r0, [r0, #4]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d54cc:	bc30      	pop	{r4, r5}
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d54ce:	f7ff bd0f 	b.w	d4ef0 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d54d2 <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d54d2:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d54d4:	2300      	movs	r3, #0
   d54d6:	9300      	str	r3, [sp, #0]
   d54d8:	461a      	mov	r2, r3
   d54da:	f7ff ffec 	bl	d54b6 <_ZN7Ubidots3addEPcfS0_mj>
}
   d54de:	b003      	add	sp, #12
   d54e0:	f85d fb04 	ldr.w	pc, [sp], #4

000d54e4 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool Ubidots::send(const char* device_label, PublishFlags flag) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, flag);
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	f7ff bf2f 	b.w	d5348 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d54ec <_ZN7Ubidots3getEPKcS1_>:
      "method");
  return false;
#endif
}

float Ubidots::get(const char* device_label, const char* variable_label) {
   d54ec:	b508      	push	{r3, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d54ee:	7b03      	ldrb	r3, [r0, #12]
   d54f0:	2b04      	cmp	r3, #4
   d54f2:	d004      	beq.n	d54fe <_ZN7Ubidots3getEPKcS1_+0x12>
    _cloudProtocol->get(device_label, variable_label);
   d54f4:	6840      	ldr	r0, [r0, #4]
  }
#else
  Serial.println("[Warning] Your board does not support the get() method");
  return ERROR_VALUE;
#endif
}
   d54f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
    _cloudProtocol->get(device_label, variable_label);
   d54fa:	f7ff bd39 	b.w	d4f70 <_ZN18UbiProtocolHandler3getEPKcS1_>
  } else {
    Serial.println(
   d54fe:	f002 fb85 	bl	d7c0c <_Z16_fetch_usbserialv>
        "[Warning] To retrieve data, please set a valid cloud protocol in the "
        "Ubidots constructor");
   d5502:	4903      	ldr	r1, [pc, #12]	; (d5510 <_ZN7Ubidots3getEPKcS1_+0x24>)
   d5504:	f001 fdfd 	bl	d7102 <_ZN5Print7printlnEPKc>
  }
#else
  Serial.println("[Warning] Your board does not support the get() method");
  return ERROR_VALUE;
#endif
}
   d5508:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5514 <_ZN7Ubidots3getEPKcS1_+0x28>
   d550c:	bd08      	pop	{r3, pc}
   d550e:	bf00      	nop
   d5510:	000dbfe7 	.word	0x000dbfe7
   d5514:	cda2425f 	.word	0xcda2425f

000d5518 <_ZN7Ubidots8setDebugEb>:

void Ubidots::setDebug(bool debug) {
  _debug = debug;
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d5518:	7b03      	ldrb	r3, [r0, #12]
  return ERROR_VALUE;
#endif
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
   d551a:	7381      	strb	r1, [r0, #14]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d551c:	2b04      	cmp	r3, #4
   d551e:	d002      	beq.n	d5526 <_ZN7Ubidots8setDebugEb+0xe>
    _cloudProtocol->setDebug(debug);
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	f7ff bd3d 	b.w	d4fa0 <_ZN18UbiProtocolHandler8setDebugEb>
  } else {
    _protocolMesh->setDebug(debug);
   d5526:	6800      	ldr	r0, [r0, #0]
   d5528:	f000 be58 	b.w	d61dc <_ZN7UbiMesh8setDebugEb>

000d552c <_ZN7Ubidots10getContextEPc11IotProtocol>:
  getContext(context_result, _iotProtocol);
}

void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
  // TCP context type
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   d552c:	1e53      	subs	r3, r2, #1
   d552e:	2b01      	cmp	r3, #1

void Ubidots::getContext(char* context_result) {
  getContext(context_result, _iotProtocol);
}

void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
   d5530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5532:	4605      	mov	r5, r0
   d5534:	460c      	mov	r4, r1
  // TCP context type
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   d5536:	d824      	bhi.n	d5582 <_ZN7Ubidots10getContextEPc11IotProtocol+0x56>
    sprintf(context_result, "");
   d5538:	4927      	ldr	r1, [pc, #156]	; (d55d8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xac>)
   d553a:	4620      	mov	r0, r4
   d553c:	f004 f9e8 	bl	d9910 <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   d5540:	2600      	movs	r6, #0
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s$", context_result);
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d5542:	4637      	mov	r7, r6

void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
  // TCP context type
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
    sprintf(context_result, "");
    for (uint8_t i = 0; i < _current_context;) {
   d5544:	f995 300d 	ldrsb.w	r3, [r5, #13]
   d5548:	429e      	cmp	r6, r3
   d554a:	da42      	bge.n	d55d2 <_ZN7Ubidots10getContextEPc11IotProtocol+0xa6>
      sprintf(context_result, "%s%s=%s", context_result,
              (_context + i)->key_label, (_context + i)->key_value);
   d554c:	68ab      	ldr	r3, [r5, #8]
   d554e:	b232      	sxth	r2, r6
   d5550:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   d5554:	4620      	mov	r0, r4
   d5556:	6849      	ldr	r1, [r1, #4]
   d5558:	9100      	str	r1, [sp, #0]
   d555a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   d555e:	491f      	ldr	r1, [pc, #124]	; (d55dc <_ZN7Ubidots10getContextEPc11IotProtocol+0xb0>)
   d5560:	4622      	mov	r2, r4
   d5562:	f001 f9e1 	bl	d6928 <sprintf>
      i++;
   d5566:	3601      	adds	r6, #1
      if (i < _current_context) {
   d5568:	f995 300d 	ldrsb.w	r3, [r5, #13]
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
    sprintf(context_result, "");
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s%s=%s", context_result,
              (_context + i)->key_label, (_context + i)->key_value);
      i++;
   d556c:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   d556e:	429e      	cmp	r6, r3
   d5570:	da05      	bge.n	d557e <_ZN7Ubidots10getContextEPc11IotProtocol+0x52>
        sprintf(context_result, "%s$", context_result);
   d5572:	4622      	mov	r2, r4
   d5574:	491a      	ldr	r1, [pc, #104]	; (d55e0 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>)
   d5576:	4620      	mov	r0, r4
   d5578:	f001 f9d6 	bl	d6928 <sprintf>
   d557c:	e7e2      	b.n	d5544 <_ZN7Ubidots10getContextEPc11IotProtocol+0x18>
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d557e:	736f      	strb	r7, [r5, #13]
   d5580:	e7e0      	b.n	d5544 <_ZN7Ubidots10getContextEPc11IotProtocol+0x18>
      }
    }
  }

  // HTTP context type
  if (iotProtocol == UBI_PARTICLE || iotProtocol == UBI_HTTP) {
   d5582:	2a03      	cmp	r2, #3
   d5584:	d000      	beq.n	d5588 <_ZN7Ubidots10getContextEPc11IotProtocol+0x5c>
   d5586:	bb22      	cbnz	r2, d55d2 <_ZN7Ubidots10getContextEPc11IotProtocol+0xa6>
    sprintf(context_result, "");
   d5588:	4913      	ldr	r1, [pc, #76]	; (d55d8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xac>)
   d558a:	4620      	mov	r0, r4
   d558c:	f004 f9c0 	bl	d9910 <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   d5590:	2600      	movs	r6, #0
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s,", context_result);
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d5592:	4637      	mov	r7, r6
  }

  // HTTP context type
  if (iotProtocol == UBI_PARTICLE || iotProtocol == UBI_HTTP) {
    sprintf(context_result, "");
    for (uint8_t i = 0; i < _current_context;) {
   d5594:	f995 300d 	ldrsb.w	r3, [r5, #13]
   d5598:	429e      	cmp	r6, r3
   d559a:	da1a      	bge.n	d55d2 <_ZN7Ubidots10getContextEPc11IotProtocol+0xa6>
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result,
              (_context + i)->key_label, (_context + i)->key_value);
   d559c:	68ab      	ldr	r3, [r5, #8]
   d559e:	b232      	sxth	r2, r6
   d55a0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   d55a4:	4620      	mov	r0, r4
   d55a6:	6849      	ldr	r1, [r1, #4]
   d55a8:	9100      	str	r1, [sp, #0]
   d55aa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   d55ae:	490d      	ldr	r1, [pc, #52]	; (d55e4 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb8>)
   d55b0:	4622      	mov	r2, r4
   d55b2:	f001 f9b9 	bl	d6928 <sprintf>
      i++;
   d55b6:	3601      	adds	r6, #1
      if (i < _current_context) {
   d55b8:	f995 300d 	ldrsb.w	r3, [r5, #13]
  if (iotProtocol == UBI_PARTICLE || iotProtocol == UBI_HTTP) {
    sprintf(context_result, "");
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result,
              (_context + i)->key_label, (_context + i)->key_value);
      i++;
   d55bc:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   d55be:	429e      	cmp	r6, r3
   d55c0:	da05      	bge.n	d55ce <_ZN7Ubidots10getContextEPc11IotProtocol+0xa2>
        sprintf(context_result, "%s,", context_result);
   d55c2:	4622      	mov	r2, r4
   d55c4:	4908      	ldr	r1, [pc, #32]	; (d55e8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xbc>)
   d55c6:	4620      	mov	r0, r4
   d55c8:	f001 f9ae 	bl	d6928 <sprintf>
   d55cc:	e7e2      	b.n	d5594 <_ZN7Ubidots10getContextEPc11IotProtocol+0x68>
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d55ce:	736f      	strb	r7, [r5, #13]
   d55d0:	e7e0      	b.n	d5594 <_ZN7Ubidots10getContextEPc11IotProtocol+0x68>
      }
    }
  }
   d55d2:	b003      	add	sp, #12
   d55d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55d6:	bf00      	nop
   d55d8:	000dc20f 	.word	0x000dc20f
   d55dc:	000dc085 	.word	0x000dc085
   d55e0:	000dc08d 	.word	0x000dc08d
   d55e4:	000dc091 	.word	0x000dc091
   d55e8:	000dbf21 	.word	0x000dbf21

000d55ec <_ZN7Ubidots10getContextEPc>:
/*
 * Retrieves the actual stored context properly formatted
 */

void Ubidots::getContext(char* context_result) {
  getContext(context_result, _iotProtocol);
   d55ec:	7b02      	ldrb	r2, [r0, #12]
   d55ee:	f7ff bf9d 	b.w	d552c <_ZN7Ubidots10getContextEPc11IotProtocol>

000d55f2 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d55f2:	b508      	push	{r3, lr}
   d55f4:	f000 ff1c 	bl	d6430 <HAL_Pin_Map>
   d55f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d55fc:	f000 bf58 	b.w	d64b0 <HAL_Timer_Get_Milli_Seconds>

000d5600 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

   d5600:	7501      	strb	r1, [r0, #20]
   d5602:	4770      	bx	lr

000d5604 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d5604:	b570      	push	{r4, r5, r6, lr}
   d5606:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d5608:	2014      	movs	r0, #20
   d560a:	f001 f97d 	bl	d6908 <malloc>
   d560e:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d5610:	2014      	movs	r0, #20
   d5612:	f001 f979 	bl	d6908 <malloc>
   d5616:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5618:	4620      	mov	r0, r4
   d561a:	f004 f99c 	bl	d9956 <strlen>
   d561e:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
   d5620:	2300      	movs	r3, #0
   d5622:	3802      	subs	r0, #2
   d5624:	4298      	cmp	r0, r3
   d5626:	dd17      	ble.n	d5658 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
   d5628:	f812 1b01 	ldrb.w	r1, [r2], #1
   d562c:	290d      	cmp	r1, #13
   d562e:	d111      	bne.n	d5654 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d5630:	7811      	ldrb	r1, [r2, #0]
   d5632:	290a      	cmp	r1, #10
   d5634:	d10e      	bne.n	d5654 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d5636:	7851      	ldrb	r1, [r2, #1]
   d5638:	290d      	cmp	r1, #13
   d563a:	d10b      	bne.n	d5654 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d563c:	7891      	ldrb	r1, [r2, #2]
   d563e:	290a      	cmp	r1, #10
   d5640:	d108      	bne.n	d5654 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d5642:	1d19      	adds	r1, r3, #4
   d5644:	2214      	movs	r2, #20
   d5646:	4421      	add	r1, r4
   d5648:	4630      	mov	r0, r6
   d564a:	f004 f9a1 	bl	d9990 <strncpy>
        parsed[20] = '\0';
   d564e:	2300      	movs	r3, #0
   d5650:	7533      	strb	r3, [r6, #20]
   d5652:	e001      	b.n	d5658 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
   d5654:	3301      	adds	r3, #1
   d5656:	e7e5      	b.n	d5624 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
   d5658:	210a      	movs	r1, #10
   d565a:	4630      	mov	r0, r6
   d565c:	f004 f940 	bl	d98e0 <strchr>
    if (pch == NULL) {
   d5660:	4604      	mov	r4, r0
   d5662:	b300      	cbz	r0, d56a6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
   d5664:	210a      	movs	r1, #10
   d5666:	3001      	adds	r0, #1
   d5668:	f004 f93a 	bl	d98e0 <strchr>

    if (pch2 == NULL) {
   d566c:	b1d8      	cbz	r0, d56a6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
   d566e:	4621      	mov	r1, r4
   d5670:	4628      	mov	r0, r5
   d5672:	f004 f94d 	bl	d9910 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d5676:	4628      	mov	r0, r5
   d5678:	f004 f96d 	bl	d9956 <strlen>
   d567c:	4428      	add	r0, r5
   d567e:	2300      	movs	r3, #0
   d5680:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
   d5684:	4628      	mov	r0, r5
   d5686:	f003 ffe1 	bl	d964c <atof>
   d568a:	ec51 0b10 	vmov	r0, r1, d0
   d568e:	f003 ff8d 	bl	d95ac <__aeabi_d2f>
   d5692:	4604      	mov	r4, r0

    free(dst);
   d5694:	4628      	mov	r0, r5
   d5696:	f001 f93f 	bl	d6918 <free>
    free(parsed);
   d569a:	4630      	mov	r0, r6
   d569c:	f001 f93c 	bl	d6918 <free>
    return result;
   d56a0:	ee00 4a10 	vmov	s0, r4
   d56a4:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
   d56a6:	ed9f 0a01 	vldr	s0, [pc, #4]	; d56ac <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa8>
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
   d56aa:	bd70      	pop	{r4, r5, r6, pc}
   d56ac:	cda2425f 	.word	0xcda2425f

000d56b0 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
   d56b0:	b530      	push	{r4, r5, lr}
                 const char* token) {
   d56b2:	4d07      	ldr	r5, [pc, #28]	; (d56d0 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d56b4:	6005      	str	r5, [r0, #0]
   d56b6:	2500      	movs	r5, #0
   d56b8:	7505      	strb	r5, [r0, #20]
   d56ba:	f241 3588 	movw	r5, #5000	; 0x1388
   d56be:	6185      	str	r5, [r0, #24]
  _host = host;
  _user_agent = user_agent;
   d56c0:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d56c2:	2505      	movs	r5, #5
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d56c4:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d56c6:	7705      	strb	r5, [r0, #28]
  _host = host;
   d56c8:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d56ca:	60c3      	str	r3, [r0, #12]
  _port = port;
   d56cc:	6102      	str	r2, [r0, #16]
}
   d56ce:	bd30      	pop	{r4, r5, pc}
   d56d0:	000dc0a8 	.word	0x000dc0a8

000d56d4 <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
   d56d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56d8:	4605      	mov	r5, r0
   d56da:	460f      	mov	r7, r1
   d56dc:	4690      	mov	r8, r2
   d56de:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d56e0:	481d      	ldr	r0, [pc, #116]	; (d5758 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d56e2:	b2e6      	uxtb	r6, r4
   d56e4:	f002 fc6b 	bl	d7fbe <_ZN9TCPClient9connectedEv>
   d56e8:	bb98      	cbnz	r0, d5752 <_ZN7UbiHTTP9reconnectEPKci+0x7e>
   d56ea:	7f2b      	ldrb	r3, [r5, #28]
   d56ec:	42b3      	cmp	r3, r6
   d56ee:	d801      	bhi.n	d56f4 <_ZN7UbiHTTP9reconnectEPKci+0x20>
   d56f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
   d56f4:	7d2b      	ldrb	r3, [r5, #20]
   d56f6:	b1c3      	cbz	r3, d572a <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
   d56f8:	f002 fa88 	bl	d7c0c <_Z16_fetch_usbserialv>
   d56fc:	4917      	ldr	r1, [pc, #92]	; (d575c <_ZN7UbiHTTP9reconnectEPKci+0x88>)
   d56fe:	f001 fced 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(host);
   d5702:	f002 fa83 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5706:	4639      	mov	r1, r7
   d5708:	f001 fce8 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d570c:	f002 fa7e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5710:	4913      	ldr	r1, [pc, #76]	; (d5760 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
   d5712:	f001 fce3 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5716:	f002 fa79 	bl	d7c0c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d571a:	220a      	movs	r2, #10
   d571c:	4681      	mov	r9, r0
   d571e:	4631      	mov	r1, r6
   d5720:	f001 fcf9 	bl	d7116 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5724:	4648      	mov	r0, r9
   d5726:	f001 fce0 	bl	d70ea <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
   d572a:	2300      	movs	r3, #0
   d572c:	fa1f f288 	uxth.w	r2, r8
   d5730:	4639      	mov	r1, r7
   d5732:	4809      	ldr	r0, [pc, #36]	; (d5758 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d5734:	f002 fd1a 	bl	d816c <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5738:	7d2b      	ldrb	r3, [r5, #20]
   d573a:	b123      	cbz	r3, d5746 <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
   d573c:	f002 fa66 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5740:	4908      	ldr	r1, [pc, #32]	; (d5764 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5742:	f001 fcde 	bl	d7102 <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
   d5746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d574a:	f001 fdf3 	bl	d7334 <delay>
   d574e:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5750:	e7c6      	b.n	d56e0 <_ZN7UbiHTTP9reconnectEPKci+0xc>
   d5752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5756:	bf00      	nop
   d5758:	2003e274 	.word	0x2003e274
   d575c:	000dbd4d 	.word	0x000dbd4d
   d5760:	000dbd63 	.word	0x000dbd63
   d5764:	000dc0b4 	.word	0x000dc0b4

000d5768 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
   d5768:	b570      	push	{r4, r5, r6, lr}
   d576a:	1e4d      	subs	r5, r1, #1
   d576c:	460c      	mov	r4, r1
   d576e:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d5772:	4606      	mov	r6, r0
   d5774:	462b      	mov	r3, r5
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
   d5776:	2100      	movs	r1, #0
   d5778:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d577c:	4293      	cmp	r3, r2
   d577e:	d1fb      	bne.n	d5778 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
   d5780:	7d33      	ldrb	r3, [r6, #20]
   d5782:	b14b      	cbz	r3, d5798 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d5784:	f002 fa42 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5788:	4913      	ldr	r1, [pc, #76]	; (d57d8 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   d578a:	f001 fcba 	bl	d7102 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d578e:	f002 fa3d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5792:	4912      	ldr	r1, [pc, #72]	; (d57dc <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d5794:	f001 fcb5 	bl	d7102 <_ZN5Print7printlnEPKc>
   d5798:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
   d579c:	4810      	ldr	r0, [pc, #64]	; (d57e0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d579e:	f002 fdf9 	bl	d8394 <_ZN9TCPClient9availableEv>
   d57a2:	b940      	cbnz	r0, d57b6 <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
   d57a4:	7d33      	ldrb	r3, [r6, #20]
   d57a6:	b1b3      	cbz	r3, d57d6 <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
   d57a8:	f002 fa30 	bl	d7c0c <_Z16_fetch_usbserialv>
   d57ac:	490d      	ldr	r1, [pc, #52]	; (d57e4 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
  }
}
   d57ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
   d57b2:	f001 bca6 	b.w	d7102 <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
   d57b6:	480a      	ldr	r0, [pc, #40]	; (d57e0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d57b8:	f002 fc95 	bl	d80e6 <_ZN9TCPClient4readEv>
   d57bc:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
   d57c0:	7d33      	ldrb	r3, [r6, #20]
   d57c2:	b12b      	cbz	r3, d57d0 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
   d57c4:	f002 fa22 	bl	d7c0c <_Z16_fetch_usbserialv>
   d57c8:	6803      	ldr	r3, [r0, #0]
   d57ca:	7829      	ldrb	r1, [r5, #0]
   d57cc:	689b      	ldr	r3, [r3, #8]
   d57ce:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d57d0:	42a5      	cmp	r5, r4
   d57d2:	d1e3      	bne.n	d579c <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
   d57d4:	e7e6      	b.n	d57a4 <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
   d57d6:	bd70      	pop	{r4, r5, r6, pc}
   d57d8:	000dbdbe 	.word	0x000dbdbe
   d57dc:	000dbdaa 	.word	0x000dbdaa
   d57e0:	2003e274 	.word	0x2003e274
   d57e4:	000dbdbd 	.word	0x000dbdbd

000d57e8 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
   d57e8:	b570      	push	{r4, r5, r6, lr}
   d57ea:	4605      	mov	r5, r0
  int timeout = 0;
   d57ec:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d57ee:	480d      	ldr	r0, [pc, #52]	; (d5824 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
   d57f0:	f002 fdd0 	bl	d8394 <_ZN9TCPClient9availableEv>
   d57f4:	4606      	mov	r6, r0
   d57f6:	b910      	cbnz	r0, d57fe <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
   d57f8:	69ab      	ldr	r3, [r5, #24]
   d57fa:	429c      	cmp	r4, r3
   d57fc:	db01      	blt.n	d5802 <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d57fe:	2001      	movs	r0, #1
   d5800:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d5802:	2001      	movs	r0, #1
   d5804:	f001 fd96 	bl	d7334 <delay>
    if (timeout > _timeout - 1) {
   d5808:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
   d580a:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d580c:	429c      	cmp	r4, r3
   d580e:	dbee      	blt.n	d57ee <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
   d5810:	7d28      	ldrb	r0, [r5, #20]
   d5812:	b130      	cbz	r0, d5822 <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d5814:	f002 f9fa 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5818:	4903      	ldr	r1, [pc, #12]	; (d5828 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d581a:	f001 fc72 	bl	d7102 <_ZN5Print7printlnEPKc>
   d581e:	4630      	mov	r0, r6
   d5820:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d5822:	bd70      	pop	{r4, r5, r6, pc}
   d5824:	2003e274 	.word	0x2003e274
   d5828:	000dbd77 	.word	0x000dbd77

000d582c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d582e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d5830:	6902      	ldr	r2, [r0, #16]
   d5832:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d5834:	4604      	mov	r4, r0
   d5836:	461e      	mov	r6, r3
  reconnect(_host, _port);
   d5838:	f7ff ff4c 	bl	d56d4 <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
   d583c:	4880      	ldr	r0, [pc, #512]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d583e:	f002 fbbe 	bl	d7fbe <_ZN9TCPClient9connectedEv>
   d5842:	4605      	mov	r5, r0
   d5844:	2800      	cmp	r0, #0
   d5846:	f000 80ec 	beq.w	d5a22 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d584a:	497e      	ldr	r1, [pc, #504]	; (d5a44 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d584c:	487c      	ldr	r0, [pc, #496]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d584e:	f001 fc45 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5852:	4639      	mov	r1, r7
   d5854:	487a      	ldr	r0, [pc, #488]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5856:	f001 fc41 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d585a:	497b      	ldr	r1, [pc, #492]	; (d5a48 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d585c:	4878      	ldr	r0, [pc, #480]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d585e:	f001 fc3d 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d5862:	497a      	ldr	r1, [pc, #488]	; (d5a4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d5864:	4876      	ldr	r0, [pc, #472]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5866:	f001 fc39 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d586a:	6861      	ldr	r1, [r4, #4]
   d586c:	4874      	ldr	r0, [pc, #464]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d586e:	f001 fc35 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5872:	4977      	ldr	r1, [pc, #476]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5874:	4872      	ldr	r0, [pc, #456]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5876:	f001 fc31 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d587a:	4976      	ldr	r1, [pc, #472]	; (d5a54 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d587c:	4870      	ldr	r0, [pc, #448]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d587e:	f001 fc2d 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5882:	68a1      	ldr	r1, [r4, #8]
   d5884:	486e      	ldr	r0, [pc, #440]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5886:	f001 fc29 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d588a:	4971      	ldr	r1, [pc, #452]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d588c:	486c      	ldr	r0, [pc, #432]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d588e:	f001 fc25 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d5892:	4971      	ldr	r1, [pc, #452]	; (d5a58 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5894:	486a      	ldr	r0, [pc, #424]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5896:	f001 fc21 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d589a:	68e1      	ldr	r1, [r4, #12]
   d589c:	4868      	ldr	r0, [pc, #416]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d589e:	f001 fc1d 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d58a2:	496b      	ldr	r1, [pc, #428]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d58a4:	4866      	ldr	r0, [pc, #408]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58a6:	f001 fc19 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d58aa:	496c      	ldr	r1, [pc, #432]	; (d5a5c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d58ac:	4864      	ldr	r0, [pc, #400]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58ae:	f001 fc15 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d58b2:	496b      	ldr	r1, [pc, #428]	; (d5a60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d58b4:	4862      	ldr	r0, [pc, #392]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58b6:	f001 fc11 	bl	d70dc <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d58ba:	4630      	mov	r0, r6
   d58bc:	f004 f84b 	bl	d9956 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d58c0:	4968      	ldr	r1, [pc, #416]	; (d5a64 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
    _client_http_ubi.print(F("X-Auth-Token: "));
    _client_http_ubi.print(_token);
    _client_http_ubi.print(F("\r\n"));
    _client_http_ubi.print(F("Connection: close\r\n"));
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
    int content_length = strlen(payload);
   d58c2:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
   d58c4:	485e      	ldr	r0, [pc, #376]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58c6:	f001 fc09 	bl	d70dc <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d58ca:	2d00      	cmp	r5, #0
   d58cc:	da05      	bge.n	d58da <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
   d58ce:	212d      	movs	r1, #45	; 0x2d
   d58d0:	485b      	ldr	r0, [pc, #364]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58d2:	f001 fc07 	bl	d70e4 <_ZN5Print5printEc>
            val = -n;
   d58d6:	4269      	negs	r1, r5
   d58d8:	e000      	b.n	d58dc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d58da:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d58dc:	220a      	movs	r2, #10
   d58de:	4858      	ldr	r0, [pc, #352]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58e0:	f001 fc19 	bl	d7116 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
   d58e4:	4960      	ldr	r1, [pc, #384]	; (d5a68 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d58e6:	4856      	ldr	r0, [pc, #344]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58e8:	f001 fbf8 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d58ec:	4631      	mov	r1, r6
   d58ee:	4854      	ldr	r0, [pc, #336]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58f0:	f001 fbf4 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d58f4:	4956      	ldr	r1, [pc, #344]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d58f6:	4852      	ldr	r0, [pc, #328]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58f8:	f001 fbf0 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d58fc:	4850      	ldr	r0, [pc, #320]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58fe:	f002 fb5d 	bl	d7fbc <_ZN9TCPClient5flushEv>

    if (_debug) {
   d5902:	7d23      	ldrb	r3, [r4, #20]
   d5904:	2b00      	cmp	r3, #0
   d5906:	d071      	beq.n	d59ec <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
   d5908:	f002 f980 	bl	d7c0c <_Z16_fetch_usbserialv>
   d590c:	4957      	ldr	r1, [pc, #348]	; (d5a6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
   d590e:	f001 fbf8 	bl	d7102 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d5912:	f002 f97b 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5916:	494b      	ldr	r1, [pc, #300]	; (d5a44 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d5918:	f001 fbe0 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d591c:	f002 f976 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5920:	4639      	mov	r1, r7
   d5922:	f001 fbdb 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5926:	f002 f971 	bl	d7c0c <_Z16_fetch_usbserialv>
   d592a:	4947      	ldr	r1, [pc, #284]	; (d5a48 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d592c:	f001 fbd6 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5930:	f002 f96c 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5934:	4945      	ldr	r1, [pc, #276]	; (d5a4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d5936:	f001 fbd1 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_host);
   d593a:	f002 f967 	bl	d7c0c <_Z16_fetch_usbserialv>
   d593e:	6861      	ldr	r1, [r4, #4]
   d5940:	f001 fbcc 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5944:	f002 f962 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5948:	4941      	ldr	r1, [pc, #260]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d594a:	f001 fbc7 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d594e:	f002 f95d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5952:	4940      	ldr	r1, [pc, #256]	; (d5a54 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d5954:	f001 fbc2 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5958:	f002 f958 	bl	d7c0c <_Z16_fetch_usbserialv>
   d595c:	68a1      	ldr	r1, [r4, #8]
   d595e:	f001 fbbd 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5962:	f002 f953 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5966:	493a      	ldr	r1, [pc, #232]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5968:	f001 fbb8 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d596c:	f002 f94e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5970:	4939      	ldr	r1, [pc, #228]	; (d5a58 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5972:	f001 fbb3 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5976:	f002 f949 	bl	d7c0c <_Z16_fetch_usbserialv>
   d597a:	68e1      	ldr	r1, [r4, #12]
   d597c:	f001 fbae 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5980:	f002 f944 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5984:	4932      	ldr	r1, [pc, #200]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5986:	f001 fba9 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d598a:	f002 f93f 	bl	d7c0c <_Z16_fetch_usbserialv>
   d598e:	4933      	ldr	r1, [pc, #204]	; (d5a5c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d5990:	f001 fba4 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d5994:	f002 f93a 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5998:	4931      	ldr	r1, [pc, #196]	; (d5a60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d599a:	f001 fb9f 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d599e:	f002 f935 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59a2:	4930      	ldr	r1, [pc, #192]	; (d5a64 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
   d59a4:	f001 fb9a 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d59a8:	f002 f930 	bl	d7c0c <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d59ac:	2d00      	cmp	r5, #0
   d59ae:	4607      	mov	r7, r0
   d59b0:	da03      	bge.n	d59ba <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
   d59b2:	212d      	movs	r1, #45	; 0x2d
   d59b4:	f001 fb96 	bl	d70e4 <_ZN5Print5printEc>
            val = -n;
   d59b8:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d59ba:	220a      	movs	r2, #10
   d59bc:	4629      	mov	r1, r5
   d59be:	4638      	mov	r0, r7
   d59c0:	f001 fba9 	bl	d7116 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d59c4:	f002 f922 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59c8:	4927      	ldr	r1, [pc, #156]	; (d5a68 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d59ca:	f001 fb87 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(payload);
   d59ce:	f002 f91d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59d2:	4631      	mov	r1, r6
   d59d4:	f001 fb82 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d59d8:	f002 f918 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59dc:	491c      	ldr	r1, [pc, #112]	; (d5a50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d59de:	f001 fb7d 	bl	d70dc <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
   d59e2:	f002 f913 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59e6:	4922      	ldr	r1, [pc, #136]	; (d5a70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
   d59e8:	f001 fb8b 	bl	d7102 <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
   d59ec:	4620      	mov	r0, r4
   d59ee:	f7ff fefb 	bl	d57e8 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
   d59f2:	7d23      	ldrb	r3, [r4, #20]
   d59f4:	b90b      	cbnz	r3, d59fa <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
   d59f6:	2401      	movs	r4, #1
   d59f8:	e01d      	b.n	d5a36 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
   d59fa:	f002 f907 	bl	d7c0c <_Z16_fetch_usbserialv>
   d59fe:	491d      	ldr	r1, [pc, #116]	; (d5a74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
   d5a00:	f001 fb7f 	bl	d7102 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d5a04:	480e      	ldr	r0, [pc, #56]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5a06:	f002 fcc5 	bl	d8394 <_ZN9TCPClient9availableEv>
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	d0f3      	beq.n	d59f6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
   d5a0e:	480c      	ldr	r0, [pc, #48]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5a10:	f002 fb69 	bl	d80e6 <_ZN9TCPClient4readEv>
   d5a14:	4604      	mov	r4, r0
        Serial.print(c);
   d5a16:	f002 f8f9 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5a1a:	b2e1      	uxtb	r1, r4
   d5a1c:	f001 fb62 	bl	d70e4 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
   d5a20:	e7f0      	b.n	d5a04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
   d5a22:	7d23      	ldrb	r3, [r4, #20]
   d5a24:	b133      	cbz	r3, d5a34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
   d5a26:	f002 f8f1 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5a2a:	4913      	ldr	r1, [pc, #76]	; (d5a78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
   d5a2c:	f001 fb69 	bl	d7102 <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
   d5a30:	462c      	mov	r4, r5
   d5a32:	e000      	b.n	d5a36 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
   d5a34:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
   d5a36:	4802      	ldr	r0, [pc, #8]	; (d5a40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5a38:	f002 fc94 	bl	d8364 <_ZN9TCPClient4stopEv>
  return result;
}
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a40:	2003e274 	.word	0x2003e274
   d5a44:	000dc0c5 	.word	0x000dc0c5
   d5a48:	000dc0dd 	.word	0x000dc0dd
   d5a4c:	000dc0e9 	.word	0x000dc0e9
   d5a50:	000dc20d 	.word	0x000dc20d
   d5a54:	000dc0f0 	.word	0x000dc0f0
   d5a58:	000dc0fd 	.word	0x000dc0fd
   d5a5c:	000dc10c 	.word	0x000dc10c
   d5a60:	000dc120 	.word	0x000dc120
   d5a64:	000dc141 	.word	0x000dc141
   d5a68:	000dc20b 	.word	0x000dc20b
   d5a6c:	000dc152 	.word	0x000dc152
   d5a70:	000dc16e 	.word	0x000dc16e
   d5a74:	000dc18c 	.word	0x000dc18c
   d5a78:	000dc1a8 	.word	0x000dc1a8

000d5a7c <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5a7c:	b570      	push	{r4, r5, r6, lr}
   d5a7e:	ed2d 8b02 	vpush	{d8}
   d5a82:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5a84:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5a86:	460e      	mov	r6, r1
   d5a88:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5a8a:	6841      	ldr	r1, [r0, #4]
   d5a8c:	4868      	ldr	r0, [pc, #416]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5a8e:	2250      	movs	r2, #80	; 0x50
   d5a90:	f002 fb6c 	bl	d816c <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d5a94:	4620      	mov	r0, r4
   d5a96:	2250      	movs	r2, #80	; 0x50
   d5a98:	6861      	ldr	r1, [r4, #4]
   d5a9a:	f7ff fe1b 	bl	d56d4 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d5a9e:	4864      	ldr	r0, [pc, #400]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5aa0:	f002 fa8d 	bl	d7fbe <_ZN9TCPClient9connectedEv>
   d5aa4:	2800      	cmp	r0, #0
   d5aa6:	f000 80b4 	beq.w	d5c12 <_ZN7UbiHTTP3getEPKcS1_+0x196>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d5aaa:	4962      	ldr	r1, [pc, #392]	; (d5c34 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5aac:	4860      	ldr	r0, [pc, #384]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5aae:	f001 fb15 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5ab2:	4631      	mov	r1, r6
   d5ab4:	485e      	ldr	r0, [pc, #376]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ab6:	f001 fb11 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d5aba:	495f      	ldr	r1, [pc, #380]	; (d5c38 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5abc:	485c      	ldr	r0, [pc, #368]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5abe:	f001 fb0d 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d5ac2:	4629      	mov	r1, r5
   d5ac4:	485a      	ldr	r0, [pc, #360]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ac6:	f001 fb09 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d5aca:	495c      	ldr	r1, [pc, #368]	; (d5c3c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5acc:	4858      	ldr	r0, [pc, #352]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ace:	f001 fb05 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d5ad2:	495b      	ldr	r1, [pc, #364]	; (d5c40 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5ad4:	4856      	ldr	r0, [pc, #344]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ad6:	f001 fb01 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d5ada:	495a      	ldr	r1, [pc, #360]	; (d5c44 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5adc:	4854      	ldr	r0, [pc, #336]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ade:	f001 fafd 	bl	d70dc <_ZN5Print5printEPKc>
   d5ae2:	220a      	movs	r2, #10
   d5ae4:	2150      	movs	r1, #80	; 0x50
   d5ae6:	4852      	ldr	r0, [pc, #328]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ae8:	f001 fb15 	bl	d7116 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
   d5aec:	4956      	ldr	r1, [pc, #344]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5aee:	4850      	ldr	r0, [pc, #320]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5af0:	f001 faf4 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5af4:	4955      	ldr	r1, [pc, #340]	; (d5c4c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5af6:	484e      	ldr	r0, [pc, #312]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5af8:	f001 faf0 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5afc:	68a1      	ldr	r1, [r4, #8]
   d5afe:	484c      	ldr	r0, [pc, #304]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b00:	f001 faec 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5b04:	4950      	ldr	r1, [pc, #320]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5b06:	484a      	ldr	r0, [pc, #296]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b08:	f001 fae8 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d5b0c:	4950      	ldr	r1, [pc, #320]	; (d5c50 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d5b0e:	4848      	ldr	r0, [pc, #288]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b10:	f001 fae4 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5b14:	68e1      	ldr	r1, [r4, #12]
   d5b16:	4846      	ldr	r0, [pc, #280]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b18:	f001 fae0 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5b1c:	494a      	ldr	r1, [pc, #296]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5b1e:	4844      	ldr	r0, [pc, #272]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b20:	f001 fadc 	bl	d70dc <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5b24:	494b      	ldr	r1, [pc, #300]	; (d5c54 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5b26:	4842      	ldr	r0, [pc, #264]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b28:	f001 fad8 	bl	d70dc <_ZN5Print5printEPKc>

    if (_debug) {
   d5b2c:	7d23      	ldrb	r3, [r4, #20]
   d5b2e:	2b00      	cmp	r3, #0
   d5b30:	d050      	beq.n	d5bd4 <_ZN7UbiHTTP3getEPKcS1_+0x158>
      Serial.print("GET /api/v1.6/devices/");
   d5b32:	f002 f86b 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b36:	493f      	ldr	r1, [pc, #252]	; (d5c34 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5b38:	f001 fad0 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5b3c:	f002 f866 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b40:	4631      	mov	r1, r6
   d5b42:	f001 facb 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("/");
   d5b46:	f002 f861 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b4a:	493b      	ldr	r1, [pc, #236]	; (d5c38 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5b4c:	f001 fac6 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d5b50:	f002 f85c 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b54:	4629      	mov	r1, r5
   d5b56:	f001 fac1 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d5b5a:	f002 f857 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b5e:	4937      	ldr	r1, [pc, #220]	; (d5c3c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5b60:	f001 fabc 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5b64:	f002 f852 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b68:	4935      	ldr	r1, [pc, #212]	; (d5c40 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5b6a:	f001 fab7 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5b6e:	f002 f84d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b72:	4934      	ldr	r1, [pc, #208]	; (d5c44 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5b74:	f001 fab2 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
   d5b78:	f002 f848 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b7c:	220a      	movs	r2, #10
   d5b7e:	2150      	movs	r1, #80	; 0x50
   d5b80:	f001 fac9 	bl	d7116 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
   d5b84:	f002 f842 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b88:	492f      	ldr	r1, [pc, #188]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5b8a:	f001 faa7 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5b8e:	f002 f83d 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b92:	492e      	ldr	r1, [pc, #184]	; (d5c4c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5b94:	f001 faa2 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5b98:	f002 f838 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5b9c:	68a1      	ldr	r1, [r4, #8]
   d5b9e:	f001 fa9d 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5ba2:	f002 f833 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5ba6:	4928      	ldr	r1, [pc, #160]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5ba8:	f001 fa98 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5bac:	f002 f82e 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5bb0:	4927      	ldr	r1, [pc, #156]	; (d5c50 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d5bb2:	f001 fa93 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5bb6:	f002 f829 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5bba:	68e1      	ldr	r1, [r4, #12]
   d5bbc:	f001 fa8e 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5bc0:	f002 f824 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5bc4:	4920      	ldr	r1, [pc, #128]	; (d5c48 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5bc6:	f001 fa89 	bl	d70dc <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d5bca:	f002 f81f 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5bce:	4921      	ldr	r1, [pc, #132]	; (d5c54 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5bd0:	f001 fa84 	bl	d70dc <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	f7ff fe07 	bl	d57e8 <_ZN7UbiHTTP16waitServerAnswerEv>
   d5bda:	b928      	cbnz	r0, d5be8 <_ZN7UbiHTTP3getEPKcS1_+0x16c>
      _client_http_ubi.stop();
   d5bdc:	4814      	ldr	r0, [pc, #80]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
      return ERROR_VALUE;
   d5bde:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d5c58 <_ZN7UbiHTTP3getEPKcS1_+0x1dc>
      Serial.print("Content-Type: application/json\r\n\r\n");
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
      _client_http_ubi.stop();
   d5be2:	f002 fbbf 	bl	d8364 <_ZN9TCPClient4stopEv>
   d5be6:	e01d      	b.n	d5c24 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5be8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5bec:	f000 fe8c 	bl	d6908 <malloc>
    readServerAnswer(response);
   d5bf0:	4601      	mov	r1, r0
      _client_http_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5bf2:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	f7ff fdb7 	bl	d5768 <_ZN7UbiHTTP16readServerAnswerEPc>
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	f7ff fd02 	bl	d5604 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
   d5c00:	480b      	ldr	r0, [pc, #44]	; (d5c30 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5c02:	eeb0 8a40 	vmov.f32	s16, s0
   d5c06:	f002 fbad 	bl	d8364 <_ZN9TCPClient4stopEv>
    free(response);
   d5c0a:	4628      	mov	r0, r5
   d5c0c:	f000 fe84 	bl	d6918 <free>
   d5c10:	e008      	b.n	d5c24 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
    return value;
  }

  if (_debug) {
   d5c12:	7d23      	ldrb	r3, [r4, #20]
   d5c14:	2b00      	cmp	r3, #0
   d5c16:	d0e1      	beq.n	d5bdc <_ZN7UbiHTTP3getEPKcS1_+0x160>
    Serial.println("Connection Failed ubidots - Try Again");
   d5c18:	f001 fff8 	bl	d7c0c <_Z16_fetch_usbserialv>
   d5c1c:	490f      	ldr	r1, [pc, #60]	; (d5c5c <_ZN7UbiHTTP3getEPKcS1_+0x1e0>)
   d5c1e:	f001 fa70 	bl	d7102 <_ZN5Print7printlnEPKc>
   d5c22:	e7db      	b.n	d5bdc <_ZN7UbiHTTP3getEPKcS1_+0x160>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
   d5c24:	eeb0 0a48 	vmov.f32	s0, s16
   d5c28:	ecbd 8b02 	vpop	{d8}
   d5c2c:	bd70      	pop	{r4, r5, r6, pc}
   d5c2e:	bf00      	nop
   d5c30:	2003e274 	.word	0x2003e274
   d5c34:	000dc1d2 	.word	0x000dc1d2
   d5c38:	000dc1e7 	.word	0x000dc1e7
   d5c3c:	000dc1e9 	.word	0x000dc1e9
   d5c40:	000dc0dd 	.word	0x000dc0dd
   d5c44:	000dc0e9 	.word	0x000dc0e9
   d5c48:	000dc20d 	.word	0x000dc20d
   d5c4c:	000dc0f0 	.word	0x000dc0f0
   d5c50:	000dc0fd 	.word	0x000dc0fd
   d5c54:	000dc1ed 	.word	0x000dc1ed
   d5c58:	cda2425f 	.word	0xcda2425f
   d5c5c:	000dc210 	.word	0x000dc210

000d5c60 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d5c60:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d5c62:	4c06      	ldr	r4, [pc, #24]	; (d5c7c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d5c64:	f000 fbe4 	bl	d6430 <HAL_Pin_Map>
   d5c68:	4620      	mov	r0, r4
   d5c6a:	f002 fc33 	bl	d84d4 <_ZN9TCPClientC1Ev>
   d5c6e:	4620      	mov	r0, r4
   d5c70:	4a03      	ldr	r2, [pc, #12]	; (d5c80 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d5c72:	4904      	ldr	r1, [pc, #16]	; (d5c84 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d5c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5c78:	f002 bdd8 	b.w	d882c <__aeabi_atexit>
   d5c7c:	2003e274 	.word	0x2003e274
   d5c80:	2003e11c 	.word	0x2003e11c
   d5c84:	000d4135 	.word	0x000d4135

000d5c88 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
   d5c88:	6803      	ldr	r3, [r0, #0]
   d5c8a:	4718      	bx	r3

000d5c8c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c8c:	2a01      	cmp	r2, #1
   d5c8e:	d002      	beq.n	d5c96 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
   d5c90:	2a02      	cmp	r2, #2
   d5c92:	d002      	beq.n	d5c9a <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d5c94:	e004      	b.n	d5ca0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c96:	6001      	str	r1, [r0, #0]
	      break;
   d5c98:	e002      	b.n	d5ca0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5c9a:	680b      	ldr	r3, [r1, #0]
   d5c9c:	b100      	cbz	r0, d5ca0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
   d5c9e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5ca0:	2000      	movs	r0, #0
   d5ca2:	4770      	bx	lr

000d5ca4 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5ca4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5ca6:	201c      	movs	r0, #28
   d5ca8:	f7fe f9f7 	bl	d409a <_Znwj>
   d5cac:	4604      	mov	r4, r0
   d5cae:	b148      	cbz	r0, d5cc4 <_Z10builderTcpv+0x20>
   d5cb0:	4b06      	ldr	r3, [pc, #24]	; (d5ccc <_Z10builderTcpv+0x28>)
   d5cb2:	4907      	ldr	r1, [pc, #28]	; (d5cd0 <_Z10builderTcpv+0x2c>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	9300      	str	r3, [sp, #0]
   d5cb8:	f242 3234 	movw	r2, #9012	; 0x2334
   d5cbc:	4b05      	ldr	r3, [pc, #20]	; (d5cd4 <_Z10builderTcpv+0x30>)
   d5cbe:	6809      	ldr	r1, [r1, #0]
   d5cc0:	f7fe ff20 	bl	d4b04 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	b002      	add	sp, #8
   d5cc8:	bd10      	pop	{r4, pc}
   d5cca:	bf00      	nop
   d5ccc:	2003e2c8 	.word	0x2003e2c8
   d5cd0:	2003e2cc 	.word	0x2003e2cc
   d5cd4:	000dbf2e 	.word	0x000dbf2e

000d5cd8 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5cd8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5cda:	2020      	movs	r0, #32
   d5cdc:	f7fe f9dd 	bl	d409a <_Znwj>
   d5ce0:	4604      	mov	r4, r0
   d5ce2:	b140      	cbz	r0, d5cf6 <_Z11builderHttpv+0x1e>
   d5ce4:	4b05      	ldr	r3, [pc, #20]	; (d5cfc <_Z11builderHttpv+0x24>)
   d5ce6:	4906      	ldr	r1, [pc, #24]	; (d5d00 <_Z11builderHttpv+0x28>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	9300      	str	r3, [sp, #0]
   d5cec:	2250      	movs	r2, #80	; 0x50
   d5cee:	4b05      	ldr	r3, [pc, #20]	; (d5d04 <_Z11builderHttpv+0x2c>)
   d5cf0:	6809      	ldr	r1, [r1, #0]
   d5cf2:	f7ff fcdd 	bl	d56b0 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	b002      	add	sp, #8
   d5cfa:	bd10      	pop	{r4, pc}
   d5cfc:	2003e2c8 	.word	0x2003e2c8
   d5d00:	2003e2cc 	.word	0x2003e2cc
   d5d04:	000dbf2e 	.word	0x000dbf2e

000d5d08 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5d08:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5d0a:	201c      	movs	r0, #28
   d5d0c:	f7fe f9c5 	bl	d409a <_Znwj>
   d5d10:	4604      	mov	r4, r0
   d5d12:	b148      	cbz	r0, d5d28 <_Z10builderUdpv+0x20>
   d5d14:	4b06      	ldr	r3, [pc, #24]	; (d5d30 <_Z10builderUdpv+0x28>)
   d5d16:	4907      	ldr	r1, [pc, #28]	; (d5d34 <_Z10builderUdpv+0x2c>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	9300      	str	r3, [sp, #0]
   d5d1c:	f242 3234 	movw	r2, #9012	; 0x2334
   d5d20:	4b05      	ldr	r3, [pc, #20]	; (d5d38 <_Z10builderUdpv+0x30>)
   d5d22:	6809      	ldr	r1, [r1, #0]
   d5d24:	f000 fa72 	bl	d620c <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5d28:	4620      	mov	r0, r4
   d5d2a:	b002      	add	sp, #8
   d5d2c:	bd10      	pop	{r4, pc}
   d5d2e:	bf00      	nop
   d5d30:	2003e2c8 	.word	0x2003e2c8
   d5d34:	2003e2cc 	.word	0x2003e2cc
   d5d38:	000dbf2e 	.word	0x000dbf2e

000d5d3c <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5d3c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d5d3e:	2014      	movs	r0, #20
   d5d40:	f7fe f9ab 	bl	d409a <_Znwj>
   d5d44:	4604      	mov	r4, r0
   d5d46:	b140      	cbz	r0, d5d5a <_Z15builderParticlev+0x1e>
   d5d48:	4b05      	ldr	r3, [pc, #20]	; (d5d60 <_Z15builderParticlev+0x24>)
   d5d4a:	4906      	ldr	r1, [pc, #24]	; (d5d64 <_Z15builderParticlev+0x28>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	9300      	str	r3, [sp, #0]
   d5d50:	2300      	movs	r3, #0
   d5d52:	461a      	mov	r2, r3
   d5d54:	6809      	ldr	r1, [r1, #0]
   d5d56:	f000 faf3 	bl	d6340 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	b002      	add	sp, #8
   d5d5e:	bd10      	pop	{r4, pc}
   d5d60:	2003e2c8 	.word	0x2003e2c8
   d5d64:	2003e2cc 	.word	0x2003e2cc

000d5d68 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	4b06      	ldr	r3, [pc, #24]	; (d5d84 <_ZN3UDPD1Ev+0x1c>)
   d5d6c:	6003      	str	r3, [r0, #0]
   d5d6e:	3364      	adds	r3, #100	; 0x64
   d5d70:	4604      	mov	r4, r0
   d5d72:	6103      	str	r3, [r0, #16]
   d5d74:	f000 ff1f 	bl	d6bb6 <_ZN3UDP4stopEv>
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f001 f8e1 	bl	d6f40 <_ZN3UDP13releaseBufferEv>
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd10      	pop	{r4, pc}
   d5d82:	bf00      	nop
   d5d84:	000dc4c0 	.word	0x000dc4c0

000d5d88 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d88:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d8a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d8c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d8e:	b113      	cbz	r3, d5d96 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d90:	2203      	movs	r2, #3
   d5d92:	4601      	mov	r1, r0
   d5d94:	4798      	blx	r3
    }
   d5d96:	4620      	mov	r0, r4
   d5d98:	bd10      	pop	{r4, pc}
	...

000d5d9c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5d9c:	b510      	push	{r4, lr}
   d5d9e:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5da0:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5da2:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5da4:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d5da6:	b121      	cbz	r1, d5db2 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5da8:	4b0f      	ldr	r3, [pc, #60]	; (d5de8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
   d5daa:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5dac:	4b0f      	ldr	r3, [pc, #60]	; (d5dec <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5dae:	9102      	str	r1, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5db0:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5db2:	ab02      	add	r3, sp, #8
   d5db4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5db8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5dc0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5dc4:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dc8:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5dca:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5dce:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dd0:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dd2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5dd4:	9104      	str	r1, [sp, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5dd6:	4618      	mov	r0, r3
   d5dd8:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dda:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ddc:	9105      	str	r1, [sp, #20]
   d5dde:	f7ff ffd3 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5de2:	4620      	mov	r0, r4
   d5de4:	b006      	add	sp, #24
   d5de6:	bd10      	pop	{r4, pc}
   d5de8:	000d5c89 	.word	0x000d5c89
   d5dec:	000d5c8d 	.word	0x000d5c8d

000d5df0 <_ZN3UDPD0Ev>:
   d5df0:	b510      	push	{r4, lr}
   d5df2:	4604      	mov	r4, r0
   d5df4:	f7ff ffb8 	bl	d5d68 <_ZN3UDPD1Ev>
   d5df8:	4620      	mov	r0, r4
   d5dfa:	214c      	movs	r1, #76	; 0x4c
   d5dfc:	f002 fd24 	bl	d8848 <_ZdlPvj>
   d5e00:	4620      	mov	r0, r4
   d5e02:	bd10      	pop	{r4, pc}

000d5e04 <_ZN10UbiBuilder7builderEv>:
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
   d5e04:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5e06:	f100 0108 	add.w	r1, r0, #8
   d5e0a:	68c2      	ldr	r2, [r0, #12]
   d5e0c:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d5e0e:	b14a      	cbz	r2, d5e24 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5e10:	7804      	ldrb	r4, [r0, #0]
   d5e12:	7c15      	ldrb	r5, [r2, #16]
   d5e14:	42a5      	cmp	r5, r4
   d5e16:	bf36      	itet	cc
   d5e18:	68d4      	ldrcc	r4, [r2, #12]
   d5e1a:	6894      	ldrcs	r4, [r2, #8]
   d5e1c:	461a      	movcc	r2, r3
   d5e1e:	4613      	mov	r3, r2
   d5e20:	4622      	mov	r2, r4
   d5e22:	e7f4      	b.n	d5e0e <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5e24:	4299      	cmp	r1, r3
   d5e26:	d004      	beq.n	d5e32 <_ZN10UbiBuilder7builderEv+0x2e>
   d5e28:	7800      	ldrb	r0, [r0, #0]
   d5e2a:	7c1a      	ldrb	r2, [r3, #16]
   d5e2c:	4290      	cmp	r0, r2
   d5e2e:	bf38      	it	cc
   d5e30:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e32:	69da      	ldr	r2, [r3, #28]
   d5e34:	b90a      	cbnz	r2, d5e3a <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
   d5e36:	f002 fdd3 	bl	d89e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e3a:	6a1a      	ldr	r2, [r3, #32]
   d5e3c:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
   d5e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5e44:	4710      	bx	r2

000d5e46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5e46:	688b      	ldr	r3, [r1, #8]
   d5e48:	b570      	push	{r4, r5, r6, lr}
   d5e4a:	4616      	mov	r6, r2
   d5e4c:	4604      	mov	r4, r0
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5e4e:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d5e50:	2201      	movs	r2, #1
      while (__x != 0)
   d5e52:	b15b      	cbz	r3, d5e6c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
   d5e54:	7830      	ldrb	r0, [r6, #0]
   d5e56:	7c1a      	ldrb	r2, [r3, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d5e58:	4290      	cmp	r0, r2
   d5e5a:	bf34      	ite	cc
   d5e5c:	6898      	ldrcc	r0, [r3, #8]
   d5e5e:	68d8      	ldrcs	r0, [r3, #12]
   d5e60:	461d      	mov	r5, r3
   d5e62:	bf34      	ite	cc
   d5e64:	2201      	movcc	r2, #1
   d5e66:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5e68:	4603      	mov	r3, r0
   d5e6a:	e7f2      	b.n	d5e52 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d5e6c:	b132      	cbz	r2, d5e7c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	{
	  if (__j == begin())
   d5e6e:	68ca      	ldr	r2, [r1, #12]
   d5e70:	4295      	cmp	r5, r2
   d5e72:	d00a      	beq.n	d5e8a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x44>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d5e74:	4628      	mov	r0, r5
   d5e76:	f002 fd4e 	bl	d8916 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d5e7a:	e000      	b.n	d5e7e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
   d5e7c:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d5e7e:	7833      	ldrb	r3, [r6, #0]
   d5e80:	7c02      	ldrb	r2, [r0, #16]
   d5e82:	429a      	cmp	r2, r3
   d5e84:	f04f 0300 	mov.w	r3, #0
   d5e88:	d202      	bcs.n	d5e90 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4a>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5e8a:	e884 0028 	stmia.w	r4, {r3, r5}
   d5e8e:	e001      	b.n	d5e94 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d5e90:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d5e94:	4620      	mov	r0, r4
   d5e96:	bd70      	pop	{r4, r5, r6, pc}

000d5e98 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5e9c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5e9e:	2024      	movs	r0, #36	; 0x24
   d5ea0:	461f      	mov	r7, r3
   d5ea2:	460c      	mov	r4, r1
   d5ea4:	f7fe f8f9 	bl	d409a <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   d5ea8:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5eaa:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d5eae:	bf1c      	itt	ne
   d5eb0:	781b      	ldrbne	r3, [r3, #0]
   d5eb2:	7403      	strbne	r3, [r0, #16]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5eb4:	f106 0704 	add.w	r7, r6, #4
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5eb8:	bf1c      	itt	ne
   d5eba:	2300      	movne	r3, #0
   d5ebc:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d5ebe:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ec0:	4605      	mov	r5, r0
   d5ec2:	d108      	bne.n	d5ed6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
   d5ec4:	6973      	ldr	r3, [r6, #20]
   d5ec6:	2b00      	cmp	r3, #0
   d5ec8:	d05c      	beq.n	d5f84 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5eca:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d5ecc:	7c03      	ldrb	r3, [r0, #16]
   d5ece:	7c0a      	ldrb	r2, [r1, #16]
   d5ed0:	429a      	cmp	r2, r3
   d5ed2:	d33a      	bcc.n	d5f4a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
   d5ed4:	e056      	b.n	d5f84 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
   d5ed6:	f890 9010 	ldrb.w	r9, [r0, #16]
   d5eda:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5edc:	4599      	cmp	r9, r3
   d5ede:	d217      	bcs.n	d5f10 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5ee0:	68f3      	ldr	r3, [r6, #12]
   d5ee2:	42a3      	cmp	r3, r4
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	d011      	beq.n	d5f0c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d5ee8:	f002 fd15 	bl	d8916 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5eec:	7c03      	ldrb	r3, [r0, #16]
   d5eee:	454b      	cmp	r3, r9
   d5ef0:	d205      	bcs.n	d5efe <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
   d5ef2:	68c3      	ldr	r3, [r0, #12]
   d5ef4:	2b00      	cmp	r3, #0
   d5ef6:	bf14      	ite	ne
   d5ef8:	4620      	movne	r0, r4
   d5efa:	2400      	moveq	r4, #0
   d5efc:	e006      	b.n	d5f0c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d5efe:	4668      	mov	r0, sp
   d5f00:	4642      	mov	r2, r8
   d5f02:	4631      	mov	r1, r6
   d5f04:	f7ff ff9f 	bl	d5e46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5f08:	9c00      	ldr	r4, [sp, #0]
   d5f0a:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d5f0c:	4601      	mov	r1, r0
   d5f0e:	e01a      	b.n	d5f46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d5f10:	d92f      	bls.n	d5f72 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d5f12:	6933      	ldr	r3, [r6, #16]
   d5f14:	42a3      	cmp	r3, r4
   d5f16:	d013      	beq.n	d5f40 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d5f18:	4620      	mov	r0, r4
   d5f1a:	f002 fce9 	bl	d88f0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5f1e:	7c03      	ldrb	r3, [r0, #16]
   d5f20:	454b      	cmp	r3, r9
   d5f22:	d905      	bls.n	d5f30 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d5f24:	68e3      	ldr	r3, [r4, #12]
   d5f26:	2b00      	cmp	r3, #0
   d5f28:	bf14      	ite	ne
   d5f2a:	4604      	movne	r4, r0
   d5f2c:	2000      	moveq	r0, #0
   d5f2e:	e008      	b.n	d5f42 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d5f30:	4668      	mov	r0, sp
   d5f32:	4642      	mov	r2, r8
   d5f34:	4631      	mov	r1, r6
   d5f36:	f7ff ff86 	bl	d5e46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5f3a:	e89d 0011 	ldmia.w	sp, {r0, r4}
   d5f3e:	e000      	b.n	d5f42 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d5f40:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d5f42:	4621      	mov	r1, r4
   d5f44:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d5f46:	b1a1      	cbz	r1, d5f72 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d5f48:	b944      	cbnz	r4, d5f5c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d5f4a:	428f      	cmp	r7, r1
   d5f4c:	d006      	beq.n	d5f5c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d5f4e:	7c08      	ldrb	r0, [r1, #16]
   d5f50:	7c2b      	ldrb	r3, [r5, #16]
   d5f52:	4283      	cmp	r3, r0
   d5f54:	bf2c      	ite	cs
   d5f56:	2000      	movcs	r0, #0
   d5f58:	2001      	movcc	r0, #1
   d5f5a:	e000      	b.n	d5f5e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
   d5f5c:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5f5e:	463b      	mov	r3, r7
   d5f60:	460a      	mov	r2, r1
   d5f62:	4629      	mov	r1, r5
   d5f64:	f002 fcd9 	bl	d891a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d5f68:	6973      	ldr	r3, [r6, #20]
   d5f6a:	3301      	adds	r3, #1
   d5f6c:	6173      	str	r3, [r6, #20]
   d5f6e:	4628      	mov	r0, r5
   d5f70:	e010      	b.n	d5f94 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f72:	f105 0014 	add.w	r0, r5, #20
   d5f76:	f7ff ff07 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5f7a:	4628      	mov	r0, r5
   d5f7c:	f7fe f891 	bl	d40a2 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
   d5f80:	4620      	mov	r0, r4
   d5f82:	e007      	b.n	d5f94 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d5f84:	4631      	mov	r1, r6
   d5f86:	4642      	mov	r2, r8
   d5f88:	4668      	mov	r0, sp
   d5f8a:	f7ff ff5c 	bl	d5e46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5f8e:	9c00      	ldr	r4, [sp, #0]
   d5f90:	9901      	ldr	r1, [sp, #4]
   d5f92:	e7d8      	b.n	d5f46 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d5f94:	b003      	add	sp, #12
   d5f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5f9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d5f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5f9e:	1d04      	adds	r4, r0, #4
   d5fa0:	6883      	ldr	r3, [r0, #8]
   d5fa2:	460a      	mov	r2, r1
   d5fa4:	4621      	mov	r1, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d5fa6:	b14b      	cbz	r3, d5fbc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5fa8:	7815      	ldrb	r5, [r2, #0]
   d5faa:	7c1e      	ldrb	r6, [r3, #16]
   d5fac:	42ae      	cmp	r6, r5
   d5fae:	bf36      	itet	cc
   d5fb0:	68dd      	ldrcc	r5, [r3, #12]
   d5fb2:	689d      	ldrcs	r5, [r3, #8]
   d5fb4:	460b      	movcc	r3, r1
   d5fb6:	4619      	mov	r1, r3
   d5fb8:	462b      	mov	r3, r5
   d5fba:	e7f4      	b.n	d5fa6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5fbc:	428c      	cmp	r4, r1
   d5fbe:	d003      	beq.n	d5fc8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
   d5fc0:	7814      	ldrb	r4, [r2, #0]
   d5fc2:	7c0b      	ldrb	r3, [r1, #16]
   d5fc4:	429c      	cmp	r4, r3
   d5fc6:	d208      	bcs.n	d5fda <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5fc8:	ab04      	add	r3, sp, #16
   d5fca:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5fce:	aa02      	add	r2, sp, #8
   d5fd0:	9200      	str	r2, [sp, #0]
   d5fd2:	4a04      	ldr	r2, [pc, #16]	; (d5fe4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
   d5fd4:	f7ff ff60 	bl	d5e98 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   d5fd8:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
   d5fda:	f101 0014 	add.w	r0, r1, #20
      }
   d5fde:	b004      	add	sp, #16
   d5fe0:	bd70      	pop	{r4, r5, r6, pc}
   d5fe2:	bf00      	nop
   d5fe4:	000dc236 	.word	0x000dc236

000d5fe8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
   d5fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5fec:	4604      	mov	r4, r0
   d5fee:	461d      	mov	r5, r3
   d5ff0:	4689      	mov	r9, r1
   d5ff2:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d5ff4:	2100      	movs	r1, #0
   d5ff6:	2210      	movs	r2, #16
   d5ff8:	3008      	adds	r0, #8
   d5ffa:	f003 fc40 	bl	d987e <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
   d5ffe:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
   d6000:	ad02      	add	r5, sp, #8
   d6002:	2301      	movs	r3, #1
   d6004:	f805 3d01 	strb.w	r3, [r5, #-1]!
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d6008:	f104 0208 	add.w	r2, r4, #8
   d600c:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d600e:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d6010:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
   d6012:	6162      	str	r2, [r4, #20]
   d6014:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d6016:	61a7      	str	r7, [r4, #24]
   d6018:	4630      	mov	r0, r6
   d601a:	f7ff ffbf 	bl	d5f9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d601e:	4915      	ldr	r1, [pc, #84]	; (d6074 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d6020:	f7ff febc 	bl	d5d9c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
   d6024:	4629      	mov	r1, r5
   d6026:	4630      	mov	r0, r6
   d6028:	f88d 7007 	strb.w	r7, [sp, #7]
   d602c:	f7ff ffb6 	bl	d5f9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d6030:	4911      	ldr	r1, [pc, #68]	; (d6078 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d6032:	f7ff feb3 	bl	d5d9c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
   d6036:	2302      	movs	r3, #2
   d6038:	4629      	mov	r1, r5
   d603a:	4630      	mov	r0, r6
   d603c:	f88d 3007 	strb.w	r3, [sp, #7]
   d6040:	f7ff ffac 	bl	d5f9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d6044:	490d      	ldr	r1, [pc, #52]	; (d607c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d6046:	f7ff fea9 	bl	d5d9c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
   d604a:	2303      	movs	r3, #3
   d604c:	4629      	mov	r1, r5
   d604e:	4630      	mov	r0, r6
   d6050:	f88d 3007 	strb.w	r3, [sp, #7]
   d6054:	f7ff ffa2 	bl	d5f9c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d6058:	4909      	ldr	r1, [pc, #36]	; (d6080 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d605a:	f7ff fe9f 	bl	d5d9c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
   d605e:	4b09      	ldr	r3, [pc, #36]	; (d6084 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
   d6060:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
   d6064:	4b08      	ldr	r3, [pc, #32]	; (d6088 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
}
   d6066:	4620      	mov	r0, r4
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
   d6068:	f8c3 8000 	str.w	r8, [r3]
}
   d606c:	b003      	add	sp, #12
   d606e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6072:	bf00      	nop
   d6074:	000d5ca5 	.word	0x000d5ca5
   d6078:	000d5cd9 	.word	0x000d5cd9
   d607c:	000d5d09 	.word	0x000d5d09
   d6080:	000d5d3d 	.word	0x000d5d3d
   d6084:	2003e2cc 	.word	0x2003e2cc
   d6088:	2003e2c8 	.word	0x2003e2c8

000d608c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d608c:	b570      	push	{r4, r5, r6, lr}
   d608e:	4d10      	ldr	r5, [pc, #64]	; (d60d0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d6090:	4c10      	ldr	r4, [pc, #64]	; (d60d4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d6092:	4e11      	ldr	r6, [pc, #68]	; (d60d8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d6094:	f000 f9cc 	bl	d6430 <HAL_Pin_Map>
   d6098:	4628      	mov	r0, r5
   d609a:	f002 fa1b 	bl	d84d4 <_ZN9TCPClientC1Ev>
   d609e:	4628      	mov	r0, r5
   d60a0:	4d0e      	ldr	r5, [pc, #56]	; (d60dc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d60a2:	4622      	mov	r2, r4
   d60a4:	4631      	mov	r1, r6
   d60a6:	f002 fbc1 	bl	d882c <__aeabi_atexit>
   d60aa:	4628      	mov	r0, r5
   d60ac:	f002 fa12 	bl	d84d4 <_ZN9TCPClientC1Ev>
   d60b0:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d60b2:	4d0b      	ldr	r5, [pc, #44]	; (d60e0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d60b4:	4622      	mov	r2, r4
   d60b6:	4631      	mov	r1, r6
   d60b8:	f002 fbb8 	bl	d882c <__aeabi_atexit>
   d60bc:	4628      	mov	r0, r5
   d60be:	f000 ff21 	bl	d6f04 <_ZN3UDPC1Ev>
   d60c2:	4622      	mov	r2, r4
   d60c4:	4628      	mov	r0, r5
   d60c6:	4907      	ldr	r1, [pc, #28]	; (d60e4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d60c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d60cc:	f002 bbae 	b.w	d882c <__aeabi_atexit>
   d60d0:	2003e2ac 	.word	0x2003e2ac
   d60d4:	2003e11c 	.word	0x2003e11c
   d60d8:	000d4135 	.word	0x000d4135
   d60dc:	2003e290 	.word	0x2003e290
   d60e0:	2003e2d0 	.word	0x2003e2d0
   d60e4:	000d5d69 	.word	0x000d5d69

000d60e8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d60e8:	2200      	movs	r2, #0
   d60ea:	4611      	mov	r1, r2
   d60ec:	6840      	ldr	r0, [r0, #4]
   d60ee:	f000 bb9b 	b.w	d6828 <network_ready>
	...

000d60f4 <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d60f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _tokenMesh = token;
   d60f6:	4b0a      	ldr	r3, [pc, #40]	; (d6120 <_ZN7UbiMeshC1EPc+0x2c>)

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d60f8:	4604      	mov	r4, r0
   d60fa:	4668      	mov	r0, sp
  _tokenMesh = token;
   d60fc:	6019      	str	r1, [r3, #0]
   d60fe:	f000 fbdb 	bl	d68b8 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d6102:	9802      	ldr	r0, [sp, #8]
   d6104:	3001      	adds	r0, #1
   d6106:	f7fd ffca 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d610a:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d610c:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d610e:	f003 fbff 	bl	d9910 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d6112:	4668      	mov	r0, sp
   d6114:	f000 ff75 	bl	d7002 <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d6118:	4620      	mov	r0, r4
   d611a:	b004      	add	sp, #16
   d611c:	bd10      	pop	{r4, pc}
   d611e:	bf00      	nop
   d6120:	2003e324 	.word	0x2003e324

000d6124 <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d6124:	b510      	push	{r4, lr}
   d6126:	4604      	mov	r4, r0
   d6128:	6800      	ldr	r0, [r0, #0]
   d612a:	b108      	cbz	r0, d6130 <_ZN7UbiMeshD1Ev+0xc>
   d612c:	f7fd ffbb 	bl	d40a6 <_ZdaPv>
   d6130:	4620      	mov	r0, r4
   d6132:	bd10      	pop	{r4, pc}

000d6134 <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d6134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6138:	b0a4      	sub	sp, #144	; 0x90
   d613a:	4606      	mov	r6, r0
   d613c:	4689      	mov	r9, r1
   d613e:	ee10 aa10 	vmov	sl, s0
   d6142:	461f      	mov	r7, r3
   d6144:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d6148:	4615      	mov	r5, r2
   d614a:	ac0b      	add	r4, sp, #44	; 0x2c
   d614c:	b152      	cbz	r2, d6164 <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d614e:	4610      	mov	r0, r2
   d6150:	f003 fc01 	bl	d9956 <strlen>
   d6154:	2864      	cmp	r0, #100	; 0x64
   d6156:	d907      	bls.n	d6168 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d6158:	f001 fd58 	bl	d7c0c <_Z16_fetch_usbserialv>
   d615c:	491a      	ldr	r1, [pc, #104]	; (d61c8 <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d615e:	f000 ffd0 	bl	d7102 <_ZN5Print7printlnEPKc>
   d6162:	e001      	b.n	d6168 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d6164:	4919      	ldr	r1, [pc, #100]	; (d61cc <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d6166:	e000      	b.n	d616a <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d6168:	4629      	mov	r1, r5
   d616a:	4620      	mov	r0, r4
   d616c:	f003 fbd0 	bl	d9910 <strcpy>
   d6170:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d6172:	b12f      	cbz	r7, d6180 <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d6174:	463a      	mov	r2, r7
   d6176:	4916      	ldr	r1, [pc, #88]	; (d61d0 <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d6178:	4628      	mov	r0, r5
   d617a:	f000 fbd5 	bl	d6928 <sprintf>
   d617e:	e003      	b.n	d6188 <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d6180:	4912      	ldr	r1, [pc, #72]	; (d61cc <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d6182:	4628      	mov	r0, r5
   d6184:	f003 fbc4 	bl	d9910 <strcpy>
   d6188:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d618a:	f1b8 0f00 	cmp.w	r8, #0
   d618e:	d005      	beq.n	d619c <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d6190:	4642      	mov	r2, r8
   d6192:	4910      	ldr	r1, [pc, #64]	; (d61d4 <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d6194:	4638      	mov	r0, r7
   d6196:	f000 fbc7 	bl	d6928 <sprintf>
   d619a:	e003      	b.n	d61a4 <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d619c:	490b      	ldr	r1, [pc, #44]	; (d61cc <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d619e:	4638      	mov	r0, r7
   d61a0:	f003 fbb6 	bl	d9910 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d61a4:	4650      	mov	r0, sl
   d61a6:	9704      	str	r7, [sp, #16]
   d61a8:	9503      	str	r5, [sp, #12]
   d61aa:	9402      	str	r4, [sp, #8]
   d61ac:	f002 fec8 	bl	d8f40 <__aeabi_f2d>
   d61b0:	3604      	adds	r6, #4
   d61b2:	e9cd 0100 	strd	r0, r1, [sp]
   d61b6:	464a      	mov	r2, r9
   d61b8:	4907      	ldr	r1, [pc, #28]	; (d61d8 <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d61ba:	4630      	mov	r0, r6
   d61bc:	f000 fbb4 	bl	d6928 <sprintf>
}
   d61c0:	b024      	add	sp, #144	; 0x90
   d61c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d61c6:	bf00      	nop
   d61c8:	000dc237 	.word	0x000dc237
   d61cc:	000dc5aa 	.word	0x000dc5aa
   d61d0:	000dbef8 	.word	0x000dbef8
   d61d4:	000dc790 	.word	0x000dc790
   d61d8:	000dc271 	.word	0x000dc271

000d61dc <_ZN7UbiMesh8setDebugEb>:

/*
  Makes debug messages available
*/

void UbiMesh::setDebug(bool debug) { _debugMesh = debug; }
   d61dc:	4b01      	ldr	r3, [pc, #4]	; (d61e4 <_ZN7UbiMesh8setDebugEb+0x8>)
   d61de:	7019      	strb	r1, [r3, #0]
   d61e0:	4770      	bx	lr
   d61e2:	bf00      	nop
   d61e4:	2003e31c 	.word	0x2003e31c

000d61e8 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d61e8:	b508      	push	{r3, lr}
   d61ea:	f000 f921 	bl	d6430 <HAL_Pin_Map>
   d61ee:	f000 f95f 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d61f2:	4b01      	ldr	r3, [pc, #4]	; (d61f8 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d61f4:	6018      	str	r0, [r3, #0]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	2003e320 	.word	0x2003e320

000d61fc <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
   d61fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6204 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d6200:	4770      	bx	lr
   d6202:	bf00      	nop
   d6204:	cda2425f 	.word	0xcda2425f

000d6208 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d6208:	7501      	strb	r1, [r0, #20]
   d620a:	4770      	bx	lr

000d620c <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
   d620c:	b530      	push	{r4, r5, lr}
               const char *token) {
   d620e:	4d06      	ldr	r5, [pc, #24]	; (d6228 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d6210:	6005      	str	r5, [r0, #0]
   d6212:	2500      	movs	r5, #0
   d6214:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d6216:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d6218:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d621c:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d621e:	6185      	str	r5, [r0, #24]
  _host = host;
   d6220:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d6222:	60c3      	str	r3, [r0, #12]
  _port = port;
   d6224:	6102      	str	r2, [r0, #16]
}
   d6226:	bd30      	pop	{r4, r5, pc}
   d6228:	000dc454 	.word	0x000dc454

000d622c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d622c:	b510      	push	{r4, lr}
   d622e:	4c06      	ldr	r4, [pc, #24]	; (d6248 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d6230:	f000 f8fe 	bl	d6430 <HAL_Pin_Map>
   d6234:	4620      	mov	r0, r4
   d6236:	f000 fe65 	bl	d6f04 <_ZN3UDPC1Ev>
   d623a:	4620      	mov	r0, r4
   d623c:	4a03      	ldr	r2, [pc, #12]	; (d624c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d623e:	4904      	ldr	r1, [pc, #16]	; (d6250 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d6240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6244:	f002 baf2 	b.w	d882c <__aeabi_atexit>
   d6248:	2003e328 	.word	0x2003e328
   d624c:	2003e11c 	.word	0x2003e11c
   d6250:	000d5d69 	.word	0x000d5d69

000d6254 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
   d6254:	b510      	push	{r4, lr}
   d6256:	4604      	mov	r4, r0
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
   d6258:	684a      	ldr	r2, [r1, #4]
   d625a:	4902      	ldr	r1, [pc, #8]	; (d6264 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d625c:	f002 f9ca 	bl	d85f4 <_ZN5spark12NetworkClass7resolveEPKc>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d6260:	4620      	mov	r0, r4
   d6262:	bd10      	pop	{r4, pc}
   d6264:	2003e6e8 	.word	0x2003e6e8

000d6268 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d6268:	b5f0      	push	{r4, r5, r6, r7, lr}
   d626a:	b08f      	sub	sp, #60	; 0x3c
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d626c:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d626e:	4606      	mov	r6, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d6270:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d6272:	461f      	mov	r7, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d6274:	f7ff ffee 	bl	d6254 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6278:	a802      	add	r0, sp, #8
   d627a:	f001 fc29 	bl	d7ad0 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
   d627e:	b9a0      	cbnz	r0, d62aa <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d6280:	7d33      	ldrb	r3, [r6, #20]
   d6282:	b123      	cbz	r3, d628e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d6284:	f001 fcc2 	bl	d7c0c <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
   d6288:	4925      	ldr	r1, [pc, #148]	; (d6320 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb8>)
   d628a:	f000 ff3a 	bl	d7102 <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
   d628e:	23f3      	movs	r3, #243	; 0xf3
   d6290:	9300      	str	r3, [sp, #0]
   d6292:	2237      	movs	r2, #55	; 0x37
   d6294:	233d      	movs	r3, #61	; 0x3d
   d6296:	21a9      	movs	r1, #169	; 0xa9
   d6298:	a808      	add	r0, sp, #32

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d629a:	ad09      	add	r5, sp, #36	; 0x24
   d629c:	f001 fc3c 	bl	d7b18 <_ZN9IPAddressC1Ehhhh>
   d62a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62a2:	ac03      	add	r4, sp, #12
   d62a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62a6:	682b      	ldr	r3, [r5, #0]
   d62a8:	7023      	strb	r3, [r4, #0]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d62aa:	2200      	movs	r2, #0
   d62ac:	f240 21bd 	movw	r1, #701	; 0x2bd
   d62b0:	481c      	ldr	r0, [pc, #112]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d62b2:	f000 fe57 	bl	d6f64 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d62b6:	2200      	movs	r2, #0
   d62b8:	f242 3134 	movw	r1, #9012	; 0x2334
   d62bc:	4819      	ldr	r0, [pc, #100]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d62be:	f000 fc2c 	bl	d6b1a <_ZN3UDP5beginEtm>
   d62c2:	ad03      	add	r5, sp, #12
   d62c4:	4b18      	ldr	r3, [pc, #96]	; (d6328 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d62c6:	9308      	str	r3, [sp, #32]
   d62c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62ca:	ac09      	add	r4, sp, #36	; 0x24
   d62cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62ce:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d62d0:	4814      	ldr	r0, [pc, #80]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d62d2:	7023      	strb	r3, [r4, #0]
   d62d4:	f242 3234 	movw	r2, #9012	; 0x2334
   d62d8:	a908      	add	r1, sp, #32
   d62da:	f000 fe5d 	bl	d6f98 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d62de:	b168      	cbz	r0, d62fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d62e0:	b167      	cbz	r7, d62fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
      return write((const uint8_t *)str, strlen(str));
   d62e2:	4638      	mov	r0, r7
   d62e4:	f003 fb37 	bl	d9956 <strlen>
   d62e8:	4639      	mov	r1, r7
   d62ea:	4602      	mov	r2, r0
   d62ec:	480d      	ldr	r0, [pc, #52]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d62ee:	f000 fc70 	bl	d6bd2 <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d62f2:	b118      	cbz	r0, d62fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d62f4:	480b      	ldr	r0, [pc, #44]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d62f6:	f000 fccb 	bl	d6c90 <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d62fa:	b958      	cbnz	r0, d6314 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
   d62fc:	7d33      	ldrb	r3, [r6, #20]
   d62fe:	b123      	cbz	r3, d630a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa2>
      Serial.println("ERROR sending values with UDP");
   d6300:	f001 fc84 	bl	d7c0c <_Z16_fetch_usbserialv>
   d6304:	4909      	ldr	r1, [pc, #36]	; (d632c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6306:	f000 fefc 	bl	d7102 <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
   d630a:	4806      	ldr	r0, [pc, #24]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d630c:	f000 fc53 	bl	d6bb6 <_ZN3UDP4stopEv>
    return false;
   d6310:	2000      	movs	r0, #0
   d6312:	e003      	b.n	d631c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>
  }

  _client_udp_ubi.stop();
   d6314:	4803      	ldr	r0, [pc, #12]	; (d6324 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d6316:	f000 fc4e 	bl	d6bb6 <_ZN3UDP4stopEv>
  return true;
   d631a:	2001      	movs	r0, #1
}
   d631c:	b00f      	add	sp, #60	; 0x3c
   d631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6320:	000dc39f 	.word	0x000dc39f
   d6324:	2003e328 	.word	0x2003e328
   d6328:	000dc64c 	.word	0x000dc64c
   d632c:	000dc42b 	.word	0x000dc42b

000d6330 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d6330:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6338 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d6334:	4770      	bx	lr
   d6336:	bf00      	nop
   d6338:	cda2425f 	.word	0xcda2425f

000d633c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d633c:	7401      	strb	r1, [r0, #16]
   d633e:	4770      	bx	lr

000d6340 <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
   d6340:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
   d6342:	4c04      	ldr	r4, [pc, #16]	; (d6354 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d6344:	6004      	str	r4, [r0, #0]
  _host = host;
  _user_agent = user_agent;
   d6346:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d6348:	2400      	movs	r4, #0
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d634a:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d634c:	7404      	strb	r4, [r0, #16]
  _host = host;
   d634e:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d6350:	60c3      	str	r3, [r0, #12]
}
   d6352:	bd10      	pop	{r4, pc}
   d6354:	000dc468 	.word	0x000dc468

000d6358 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d6358:	b570      	push	{r4, r5, r6, lr}
   d635a:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d635c:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d635e:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6360:	f000 fa1e 	bl	d67a0 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d6364:	b908      	cbnz	r0, d636a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   d6366:	2000      	movs	r0, #0
   d6368:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   d636a:	2c00      	cmp	r4, #0
   d636c:	dd03      	ble.n	d6376 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
   d636e:	f000 f89f 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
   d6372:	4605      	mov	r5, r0
   d6374:	e000      	b.n	d6378 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   d6376:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6378:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d637a:	b93b      	cbnz	r3, d638c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   d637c:	2c00      	cmp	r4, #0
   d637e:	dd07      	ble.n	d6390 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d6380:	f000 f896 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
   d6384:	1b40      	subs	r0, r0, r5
   d6386:	42a0      	cmp	r0, r4
   d6388:	d302      	bcc.n	d6390 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d638a:	e7ec      	b.n	d6366 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   d638c:	2001      	movs	r0, #1
   d638e:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d6390:	f000 fa82 	bl	d6898 <spark_process>
   d6394:	e7f0      	b.n	d6378 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

000d6396 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
   d6396:	b530      	push	{r4, r5, lr}
   d6398:	b085      	sub	sp, #20
   d639a:	461a      	mov	r2, r3
   d639c:	9b08      	ldr	r3, [sp, #32]
   d639e:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d63a0:	f88d 3000 	strb.w	r3, [sp]
   d63a4:	a802      	add	r0, sp, #8
   d63a6:	233c      	movs	r3, #60	; 0x3c
   d63a8:	f001 f9b6 	bl	d7718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d63ac:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   d63ae:	2100      	movs	r1, #0
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff ffd1 	bl	d6358 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   d63b6:	7863      	ldrb	r3, [r4, #1]
   d63b8:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   d63bc:	b133      	cbz	r3, d63cc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   d63be:	2100      	movs	r1, #0
   d63c0:	4620      	mov	r0, r4
   d63c2:	f7ff ffc9 	bl	d6358 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d63c6:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   d63c8:	2b01      	cmp	r3, #1
   d63ca:	d013      	beq.n	d63f4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
   d63cc:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d63ce:	9c03      	ldr	r4, [sp, #12]
   d63d0:	b194      	cbz	r4, d63f8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d63d2:	6863      	ldr	r3, [r4, #4]
   d63d4:	3b01      	subs	r3, #1
   d63d6:	6063      	str	r3, [r4, #4]
   d63d8:	b973      	cbnz	r3, d63f8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
   d63da:	6823      	ldr	r3, [r4, #0]
   d63dc:	4620      	mov	r0, r4
   d63de:	689b      	ldr	r3, [r3, #8]
   d63e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d63e2:	68a3      	ldr	r3, [r4, #8]
   d63e4:	3b01      	subs	r3, #1
   d63e6:	60a3      	str	r3, [r4, #8]
   d63e8:	b933      	cbnz	r3, d63f8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
   d63ea:	6823      	ldr	r3, [r4, #0]
   d63ec:	4620      	mov	r0, r4
   d63ee:	68db      	ldr	r3, [r3, #12]
   d63f0:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
   d63f2:	e001      	b.n	d63f8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   d63f4:	7b25      	ldrb	r5, [r4, #12]
   d63f6:	e7ea      	b.n	d63ce <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
   d63f8:	4628      	mov	r0, r5
   d63fa:	b005      	add	sp, #20
   d63fc:	bd30      	pop	{r4, r5, pc}

000d63fe <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d63fe:	f000 b817 	b.w	d6430 <HAL_Pin_Map>

000d6402 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d6402:	f000 b815 	b.w	d6430 <HAL_Pin_Map>

000d6406 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d6406:	f000 b813 	b.w	d6430 <HAL_Pin_Map>

000d640a <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d640a:	f000 b811 	b.w	d6430 <HAL_Pin_Map>
	...

000d6410 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <netdb_freeaddrinfo+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	689b      	ldr	r3, [r3, #8]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	00030268 	.word	0x00030268

000d6420 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <netdb_getaddrinfo+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	68db      	ldr	r3, [r3, #12]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	00030268 	.word	0x00030268

000d6430 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <HAL_Pin_Map+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	681b      	ldr	r3, [r3, #0]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	0003022c 	.word	0x0003022c

000d6440 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <HAL_Pin_Mode+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	689b      	ldr	r3, [r3, #8]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	0003022c 	.word	0x0003022c

000d6450 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <HAL_Get_Pin_Mode+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	68db      	ldr	r3, [r3, #12]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	0003022c 	.word	0x0003022c

000d6460 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <HAL_GPIO_Write+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	691b      	ldr	r3, [r3, #16]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	0003022c 	.word	0x0003022c

000d6470 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <HAL_SPI_Init+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	69db      	ldr	r3, [r3, #28]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030230 	.word	0x00030230

000d6480 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <HAL_SPI_Is_Enabled+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	6a1b      	ldr	r3, [r3, #32]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030230 	.word	0x00030230

000d6490 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <if_index_to_name+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	695b      	ldr	r3, [r3, #20]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	0003026c 	.word	0x0003026c

000d64a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <HAL_RNG_GetRandomNumber+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	685b      	ldr	r3, [r3, #4]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030218 	.word	0x00030218

000d64b0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	695b      	ldr	r3, [r3, #20]
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030218 	.word	0x00030218

000d64c0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <HAL_RTC_Get_UnixTime+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	69db      	ldr	r3, [r3, #28]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030218 	.word	0x00030218

000d64d0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <HAL_RTC_Time_Is_Valid+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030218 	.word	0x00030218

000d64e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <os_thread_is_current+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	689b      	ldr	r3, [r3, #8]
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030248 	.word	0x00030248

000d64f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <os_thread_join+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	691b      	ldr	r3, [r3, #16]
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030248 	.word	0x00030248

000d6500 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <os_thread_cleanup+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	695b      	ldr	r3, [r3, #20]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030248 	.word	0x00030248

000d6510 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <os_mutex_recursive_create+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030248 	.word	0x00030248

000d6520 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <os_mutex_recursive_destroy+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030248 	.word	0x00030248

000d6530 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <inet_inet_ntop+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	695b      	ldr	r3, [r3, #20]
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030264 	.word	0x00030264

000d6540 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <inet_htonl+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6a1b      	ldr	r3, [r3, #32]
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030264 	.word	0x00030264

000d6550 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <inet_ntohs+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030264 	.word	0x00030264

000d6560 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <inet_htons+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030264 	.word	0x00030264

000d6570 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <HAL_USART_Init+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	681b      	ldr	r3, [r3, #0]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	0003023c 	.word	0x0003023c

000d6580 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <HAL_USART_Write_Data+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	68db      	ldr	r3, [r3, #12]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	0003023c 	.word	0x0003023c

000d6590 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <HAL_USART_Available_Data+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	691b      	ldr	r3, [r3, #16]
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	0003023c 	.word	0x0003023c

000d65a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <HAL_USART_Read_Data+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	695b      	ldr	r3, [r3, #20]
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	0003023c 	.word	0x0003023c

000d65b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <HAL_USART_Peek_Data+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	699b      	ldr	r3, [r3, #24]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	0003023c 	.word	0x0003023c

000d65c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <HAL_USART_Flush_Data+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	69db      	ldr	r3, [r3, #28]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	0003023c 	.word	0x0003023c

000d65d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <HAL_USART_Is_Enabled+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	6a1b      	ldr	r3, [r3, #32]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003023c 	.word	0x0003023c

000d65e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <HAL_USART_Available_Data_For_Write+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003023c 	.word	0x0003023c

000d65f0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <HAL_I2C_Write_Data+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	6a1b      	ldr	r3, [r3, #32]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	00030228 	.word	0x00030228

000d6600 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <HAL_I2C_Available_Data+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	00030228 	.word	0x00030228

000d6610 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <HAL_I2C_Read_Data+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	00030228 	.word	0x00030228

000d6620 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <HAL_I2C_Peek_Data+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	00030228 	.word	0x00030228

000d6630 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <HAL_I2C_Flush_Data+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	00030228 	.word	0x00030228

000d6640 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <HAL_I2C_Is_Enabled+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030228 	.word	0x00030228

000d6650 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <HAL_I2C_Init+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030228 	.word	0x00030228

000d6660 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <sock_bind+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	685b      	ldr	r3, [r3, #4]
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	00030238 	.word	0x00030238

000d6670 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <sock_setsockopt+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	699b      	ldr	r3, [r3, #24]
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	00030238 	.word	0x00030238

000d6680 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <sock_close+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	69db      	ldr	r3, [r3, #28]
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	00030238 	.word	0x00030238

000d6690 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <sock_connect+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	6a1b      	ldr	r3, [r3, #32]
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	00030238 	.word	0x00030238

000d66a0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <sock_recv+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	00030238 	.word	0x00030238

000d66b0 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <sock_recvfrom+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	00030238 	.word	0x00030238

000d66c0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <sock_send+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	00030238 	.word	0x00030238

000d66d0 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <sock_sendto+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	00030238 	.word	0x00030238

000d66e0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <sock_socket+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	00030238 	.word	0x00030238

000d66f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <HAL_USB_USART_Init+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	681b      	ldr	r3, [r3, #0]
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	0003024c 	.word	0x0003024c

000d6700 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <HAL_USB_USART_Begin+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	685b      	ldr	r3, [r3, #4]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	0003024c 	.word	0x0003024c

000d6710 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <HAL_USB_USART_Available_Data+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	691b      	ldr	r3, [r3, #16]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	0003024c 	.word	0x0003024c

000d6720 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	695b      	ldr	r3, [r3, #20]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	0003024c 	.word	0x0003024c

000d6730 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <HAL_USB_USART_Receive_Data+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	699b      	ldr	r3, [r3, #24]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	0003024c 	.word	0x0003024c

000d6740 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <HAL_USB_USART_Send_Data+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	69db      	ldr	r3, [r3, #28]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	0003024c 	.word	0x0003024c

000d6750 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <HAL_USB_USART_Flush_Data+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	6a1b      	ldr	r3, [r3, #32]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	0003024c 	.word	0x0003024c

000d6760 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <log_message+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030260 	.word	0x00030260

000d6770 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <system_mode+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	681b      	ldr	r3, [r3, #0]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030220 	.word	0x00030220

000d6780 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <set_system_mode+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	685b      	ldr	r3, [r3, #4]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030220 	.word	0x00030220

000d6790 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <system_delay_ms+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	695b      	ldr	r3, [r3, #20]
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030220 	.word	0x00030220

000d67a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <application_thread_current+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030220 	.word	0x00030220

000d67b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <application_thread_invoke+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030220 	.word	0x00030220

000d67c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <system_thread_get_state+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	00030220 	.word	0x00030220

000d67d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b03      	ldr	r3, [pc, #12]	; (d67e0 <system_ctrl_set_app_request_handler+0x10>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d67da:	9301      	str	r3, [sp, #4]
   d67dc:	bd08      	pop	{r3, pc}
   d67de:	0000      	.short	0x0000
   d67e0:	00030220 	.word	0x00030220

000d67e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b03      	ldr	r3, [pc, #12]	; (d67f4 <system_ctrl_set_result+0x10>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d67ee:	9301      	str	r3, [sp, #4]
   d67f0:	bd08      	pop	{r3, pc}
   d67f2:	0000      	.short	0x0000
   d67f4:	00030220 	.word	0x00030220

000d67f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <network_connect+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	685b      	ldr	r3, [r3, #4]
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	00030240 	.word	0x00030240

000d6808 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <network_connecting+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	689b      	ldr	r3, [r3, #8]
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	00030240 	.word	0x00030240

000d6818 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <network_disconnect+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	68db      	ldr	r3, [r3, #12]
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	00030240 	.word	0x00030240

000d6828 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <network_ready+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	691b      	ldr	r3, [r3, #16]
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	00030240 	.word	0x00030240

000d6838 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <network_on+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	695b      	ldr	r3, [r3, #20]
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	00030240 	.word	0x00030240

000d6848 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <network_off+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	699b      	ldr	r3, [r3, #24]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	00030240 	.word	0x00030240

000d6858 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <network_listen+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	69db      	ldr	r3, [r3, #28]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	00030240 	.word	0x00030240

000d6868 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <network_listening+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	6a1b      	ldr	r3, [r3, #32]
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	00030240 	.word	0x00030240

000d6878 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <network_set_listen_timeout+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030240 	.word	0x00030240

000d6888 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <network_get_listen_timeout+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030240 	.word	0x00030240

000d6898 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <spark_process+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	689b      	ldr	r3, [r3, #8]
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030244 	.word	0x00030244

000d68a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <spark_cloud_flag_connected+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	695b      	ldr	r3, [r3, #20]
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030244 	.word	0x00030244

000d68b8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <spark_deviceID+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	69db      	ldr	r3, [r3, #28]
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030244 	.word	0x00030244

000d68c8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b02      	ldr	r3, [pc, #8]	; (d68d4 <spark_send_event+0xc>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	6a1b      	ldr	r3, [r3, #32]
   d68d0:	9301      	str	r3, [sp, #4]
   d68d2:	bd08      	pop	{r3, pc}
   d68d4:	00030244 	.word	0x00030244

000d68d8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d68d8:	b508      	push	{r3, lr}
   d68da:	4b02      	ldr	r3, [pc, #8]	; (d68e4 <spark_subscribe+0xc>)
   d68dc:	681b      	ldr	r3, [r3, #0]
   d68de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d68e0:	9301      	str	r3, [sp, #4]
   d68e2:	bd08      	pop	{r3, pc}
   d68e4:	00030244 	.word	0x00030244

000d68e8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d68e8:	b508      	push	{r3, lr}
   d68ea:	4b02      	ldr	r3, [pc, #8]	; (d68f4 <spark_sync_time_pending+0xc>)
   d68ec:	681b      	ldr	r3, [r3, #0]
   d68ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68f0:	9301      	str	r3, [sp, #4]
   d68f2:	bd08      	pop	{r3, pc}
   d68f4:	00030244 	.word	0x00030244

000d68f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d68f8:	b508      	push	{r3, lr}
   d68fa:	4b02      	ldr	r3, [pc, #8]	; (d6904 <spark_set_random_seed_from_cloud_handler+0xc>)
   d68fc:	681b      	ldr	r3, [r3, #0]
   d68fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	bd08      	pop	{r3, pc}
   d6904:	00030244 	.word	0x00030244

000d6908 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b02      	ldr	r3, [pc, #8]	; (d6914 <malloc+0xc>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	681b      	ldr	r3, [r3, #0]
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	bd08      	pop	{r3, pc}
   d6914:	0003021c 	.word	0x0003021c

000d6918 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6918:	b508      	push	{r3, lr}
   d691a:	4b02      	ldr	r3, [pc, #8]	; (d6924 <free+0xc>)
   d691c:	681b      	ldr	r3, [r3, #0]
   d691e:	685b      	ldr	r3, [r3, #4]
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	bd08      	pop	{r3, pc}
   d6924:	0003021c 	.word	0x0003021c

000d6928 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6928:	b508      	push	{r3, lr}
   d692a:	4b02      	ldr	r3, [pc, #8]	; (d6934 <sprintf+0xc>)
   d692c:	681b      	ldr	r3, [r3, #0]
   d692e:	68db      	ldr	r3, [r3, #12]
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	bd08      	pop	{r3, pc}
   d6934:	0003021c 	.word	0x0003021c

000d6938 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6938:	b508      	push	{r3, lr}
   d693a:	4b02      	ldr	r3, [pc, #8]	; (d6944 <siscanf+0xc>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	699b      	ldr	r3, [r3, #24]
   d6940:	9301      	str	r3, [sp, #4]
   d6942:	bd08      	pop	{r3, pc}
   d6944:	0003021c 	.word	0x0003021c

000d6948 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6948:	b508      	push	{r3, lr}
   d694a:	4b02      	ldr	r3, [pc, #8]	; (d6954 <vsnprintf+0xc>)
   d694c:	681b      	ldr	r3, [r3, #0]
   d694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6950:	9301      	str	r3, [sp, #4]
   d6952:	bd08      	pop	{r3, pc}
   d6954:	0003021c 	.word	0x0003021c

000d6958 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <abort+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	0003021c 	.word	0x0003021c

000d6968 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <_malloc_r+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	0003021c 	.word	0x0003021c

000d6978 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <__errno+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	0003021c 	.word	0x0003021c

000d6988 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6988:	2200      	movs	r2, #0
   d698a:	4611      	mov	r1, r2
   d698c:	6840      	ldr	r0, [r0, #4]
   d698e:	f7ff bf6b 	b.w	d6868 <network_listening>

000d6992 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6992:	2200      	movs	r2, #0
   d6994:	4611      	mov	r1, r2
   d6996:	6840      	ldr	r0, [r0, #4]
   d6998:	f7ff bf76 	b.w	d6888 <network_get_listen_timeout>

000d699c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d699c:	2200      	movs	r2, #0
   d699e:	6840      	ldr	r0, [r0, #4]
   d69a0:	f7ff bf6a 	b.w	d6878 <network_set_listen_timeout>

000d69a4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69a4:	2200      	movs	r2, #0
   d69a6:	f081 0101 	eor.w	r1, r1, #1
   d69aa:	6840      	ldr	r0, [r0, #4]
   d69ac:	f7ff bf54 	b.w	d6858 <network_listen>

000d69b0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d69b0:	2300      	movs	r3, #0
   d69b2:	461a      	mov	r2, r3
   d69b4:	4619      	mov	r1, r3
   d69b6:	6840      	ldr	r0, [r0, #4]
   d69b8:	f7ff bf46 	b.w	d6848 <network_off>

000d69bc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d69bc:	2300      	movs	r3, #0
   d69be:	461a      	mov	r2, r3
   d69c0:	4619      	mov	r1, r3
   d69c2:	6840      	ldr	r0, [r0, #4]
   d69c4:	f7ff bf38 	b.w	d6838 <network_on>

000d69c8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d69c8:	2200      	movs	r2, #0
   d69ca:	4611      	mov	r1, r2
   d69cc:	6840      	ldr	r0, [r0, #4]
   d69ce:	f7ff bf2b 	b.w	d6828 <network_ready>

000d69d2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d69d2:	2200      	movs	r2, #0
   d69d4:	4611      	mov	r1, r2
   d69d6:	6840      	ldr	r0, [r0, #4]
   d69d8:	f7ff bf16 	b.w	d6808 <network_connecting>

000d69dc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69dc:	2200      	movs	r2, #0
   d69de:	2102      	movs	r1, #2
   d69e0:	6840      	ldr	r0, [r0, #4]
   d69e2:	f7ff bf19 	b.w	d6818 <network_disconnect>

000d69e6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d69e6:	2300      	movs	r3, #0
   d69e8:	461a      	mov	r2, r3
   d69ea:	6840      	ldr	r0, [r0, #4]
   d69ec:	f7ff bf04 	b.w	d67f8 <network_connect>

000d69f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d69f0:	4b02      	ldr	r3, [pc, #8]	; (d69fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d69f2:	2203      	movs	r2, #3
   d69f4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d69f6:	4a02      	ldr	r2, [pc, #8]	; (d6a00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d69f8:	601a      	str	r2, [r3, #0]
   d69fa:	4770      	bx	lr
   d69fc:	2003e374 	.word	0x2003e374
   d6a00:	000dc47c 	.word	0x000dc47c

000d6a04 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6a04:	4770      	bx	lr

000d6a06 <_ZN8SPIClassD0Ev>:
   d6a06:	b510      	push	{r4, lr}
   d6a08:	210c      	movs	r1, #12
   d6a0a:	4604      	mov	r4, r0
   d6a0c:	f001 ff1c 	bl	d8848 <_ZdlPvj>
   d6a10:	4620      	mov	r0, r4
   d6a12:	bd10      	pop	{r4, pc}

000d6a14 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6a14:	b510      	push	{r4, lr}
   d6a16:	4b05      	ldr	r3, [pc, #20]	; (d6a2c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d6a18:	6003      	str	r3, [r0, #0]
   d6a1a:	4604      	mov	r4, r0
{
    _spi = spi;
   d6a1c:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d6a1e:	4608      	mov	r0, r1
   d6a20:	f7ff fd26 	bl	d6470 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6a24:	2300      	movs	r3, #0
   d6a26:	60a3      	str	r3, [r4, #8]
}
   d6a28:	4620      	mov	r0, r4
   d6a2a:	bd10      	pop	{r4, pc}
   d6a2c:	000dc4b0 	.word	0x000dc4b0

000d6a30 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6a30:	7900      	ldrb	r0, [r0, #4]
   d6a32:	f7ff bd25 	b.w	d6480 <HAL_SPI_Is_Enabled>

000d6a36 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6a36:	b510      	push	{r4, lr}
   d6a38:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6a3a:	6800      	ldr	r0, [r0, #0]
   d6a3c:	b118      	cbz	r0, d6a46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6a3e:	f7ff ff6b 	bl	d6918 <free>
            wakeupSource_ = nullptr;
   d6a42:	2300      	movs	r3, #0
   d6a44:	6023      	str	r3, [r4, #0]
   d6a46:	bd10      	pop	{r4, pc}

000d6a48 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a48:	b510      	push	{r4, lr}
   d6a4a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6a4c:	f7ff fff3 	bl	d6a36 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a50:	4620      	mov	r0, r4
   d6a52:	bd10      	pop	{r4, pc}

000d6a54 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a54:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6a56:	4c09      	ldr	r4, [pc, #36]	; (d6a7c <_GLOBAL__sub_I_System+0x28>)
   d6a58:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6a5e:	6020      	str	r0, [r4, #0]
   d6a60:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6a62:	71a0      	strb	r0, [r4, #6]
   d6a64:	8120      	strh	r0, [r4, #8]
   d6a66:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6a68:	f7ff fe8a 	bl	d6780 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	4a04      	ldr	r2, [pc, #16]	; (d6a80 <_GLOBAL__sub_I_System+0x2c>)
   d6a70:	4904      	ldr	r1, [pc, #16]	; (d6a84 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6a76:	f001 bed9 	b.w	d882c <__aeabi_atexit>
   d6a7a:	bf00      	nop
   d6a7c:	2003e37c 	.word	0x2003e37c
   d6a80:	2003e11c 	.word	0x2003e11c
   d6a84:	000d6a49 	.word	0x000d6a49

000d6a88 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6a88:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6a8a:	6804      	ldr	r4, [r0, #0]
   d6a8c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6a8e:	46a4      	mov	ip, r4
    }
   d6a90:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6a94:	4760      	bx	ip

000d6a96 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6a96:	6803      	ldr	r3, [r0, #0]
   d6a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a9a:	4718      	bx	r3

000d6a9c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6a9c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6a9e:	4770      	bx	lr

000d6aa0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6aa0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6aa2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6aa4:	1a10      	subs	r0, r2, r0
   d6aa6:	4770      	bx	lr

000d6aa8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6aa8:	b513      	push	{r0, r1, r4, lr}
   d6aaa:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6aac:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6aae:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6ab2:	68d4      	ldr	r4, [r2, #12]
   d6ab4:	4619      	mov	r1, r3
   d6ab6:	2201      	movs	r2, #1
   d6ab8:	47a0      	blx	r4
}
   d6aba:	b002      	add	sp, #8
   d6abc:	bd10      	pop	{r4, pc}

000d6abe <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6abe:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6ac0:	6803      	ldr	r3, [r0, #0]
   d6ac2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6ac4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6ac6:	4798      	blx	r3
   d6ac8:	b128      	cbz	r0, d6ad6 <_ZN3UDP4readEv+0x18>
   d6aca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6acc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6ace:	1c59      	adds	r1, r3, #1
   d6ad0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6ad2:	5cd0      	ldrb	r0, [r2, r3]
   d6ad4:	bd10      	pop	{r4, pc}
   d6ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6ada:	bd10      	pop	{r4, pc}

000d6adc <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6adc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6ade:	6803      	ldr	r3, [r0, #0]
   d6ae0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6ae2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6ae4:	4798      	blx	r3
   d6ae6:	b118      	cbz	r0, d6af0 <_ZN3UDP4peekEv+0x14>
   d6ae8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6aea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6aec:	5cd0      	ldrb	r0, [r2, r3]
   d6aee:	bd10      	pop	{r4, pc}
   d6af0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6af4:	bd10      	pop	{r4, pc}

000d6af6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d6af6:	4770      	bx	lr

000d6af8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d6af8:	b410      	push	{r4}
   d6afa:	4603      	mov	r3, r0
   d6afc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6afe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d6b00:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d6b02:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d6b04:	6803      	ldr	r3, [r0, #0]
   d6b06:	1a52      	subs	r2, r2, r1
   d6b08:	68db      	ldr	r3, [r3, #12]
   d6b0a:	4421      	add	r1, r4
}
   d6b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6b10:	4718      	bx	r3

000d6b12 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d6b12:	f1a0 0010 	sub.w	r0, r0, #16
   d6b16:	f7ff bfef 	b.w	d6af8 <_ZNK3UDP7printToER5Print>

000d6b1a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d6b1c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6b1e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6b20:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d6b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6b24:	4604      	mov	r4, r0
   d6b26:	460f      	mov	r7, r1
   d6b28:	4615      	mov	r5, r2
    stop();
   d6b2a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d6b2c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6b2e:	4632      	mov	r2, r6
   d6b30:	2100      	movs	r1, #0
   d6b32:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d6b34:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6b36:	f002 fea2 	bl	d987e <memset>
    saddr.sin6_len = sizeof(saddr);
   d6b3a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6b3e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d6b40:	260a      	movs	r6, #10
   d6b42:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d6b46:	f7ff fd0b 	bl	d6560 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6b4a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6b4c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6b50:	2102      	movs	r1, #2
   d6b52:	4630      	mov	r0, r6
   d6b54:	f7ff fdc4 	bl	d66e0 <sock_socket>

    if (_sock < 0) {
   d6b58:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6b5a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6b5c:	db24      	blt.n	d6ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6b5e:	2204      	movs	r2, #4
   d6b60:	9200      	str	r2, [sp, #0]
   d6b62:	ab02      	add	r3, sp, #8
   d6b64:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b68:	f7ff fd82 	bl	d6670 <sock_setsockopt>
   d6b6c:	b9e0      	cbnz	r0, d6ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6b6e:	b195      	cbz	r5, d6b96 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6b70:	9003      	str	r0, [sp, #12]
   d6b72:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6b76:	a903      	add	r1, sp, #12
   d6b78:	b2e8      	uxtb	r0, r5
   d6b7a:	f7ff fc89 	bl	d6490 <if_index_to_name>
   d6b7e:	b998      	cbnz	r0, d6ba8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6b80:	2306      	movs	r3, #6
   d6b82:	9300      	str	r3, [sp, #0]
   d6b84:	f241 020b 	movw	r2, #4107	; 0x100b
   d6b88:	ab03      	add	r3, sp, #12
   d6b8a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b8e:	6960      	ldr	r0, [r4, #20]
   d6b90:	f7ff fd6e 	bl	d6670 <sock_setsockopt>
   d6b94:	b940      	cbnz	r0, d6ba8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6b96:	221c      	movs	r2, #28
   d6b98:	a905      	add	r1, sp, #20
   d6b9a:	6960      	ldr	r0, [r4, #20]
   d6b9c:	f7ff fd60 	bl	d6660 <sock_bind>
   d6ba0:	b910      	cbnz	r0, d6ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d6ba2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6ba4:	2001      	movs	r0, #1
   d6ba6:	e004      	b.n	d6bb2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6ba8:	6823      	ldr	r3, [r4, #0]
   d6baa:	4620      	mov	r0, r4
   d6bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bae:	4798      	blx	r3
   d6bb0:	2000      	movs	r0, #0
    }
    return bound;
}
   d6bb2:	b00d      	add	sp, #52	; 0x34
   d6bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bb6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6bb6:	b510      	push	{r4, lr}
   d6bb8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6bba:	6940      	ldr	r0, [r0, #20]
   d6bbc:	2800      	cmp	r0, #0
   d6bbe:	db01      	blt.n	d6bc4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6bc0:	f7ff fd5e 	bl	d6680 <sock_close>
    }

    _sock = -1;
   d6bc4:	f04f 33ff 	mov.w	r3, #4294967295
   d6bc8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6bca:	2300      	movs	r3, #0
   d6bcc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6bce:	8723      	strh	r3, [r4, #56]	; 0x38
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6bd2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6bd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6bd6:	4605      	mov	r5, r0
   d6bd8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6bda:	b113      	cbz	r3, d6be2 <_ZN3UDP5writeEPKhj+0x10>
   d6bdc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6bde:	1a24      	subs	r4, r4, r0
   d6be0:	e000      	b.n	d6be4 <_ZN3UDP5writeEPKhj+0x12>
   d6be2:	461c      	mov	r4, r3
   d6be4:	4294      	cmp	r4, r2
   d6be6:	bf28      	it	cs
   d6be8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6bea:	4622      	mov	r2, r4
   d6bec:	4418      	add	r0, r3
   d6bee:	f002 fe3b 	bl	d9868 <memcpy>
    _offset += size;
   d6bf2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6bf4:	4423      	add	r3, r4
   d6bf6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6bf8:	4620      	mov	r0, r4
   d6bfa:	bd38      	pop	{r3, r4, r5, pc}

000d6bfc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6bfc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d6bfe:	6803      	ldr	r3, [r0, #0]
   d6c00:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6c02:	4604      	mov	r4, r0
   d6c04:	460e      	mov	r6, r1
   d6c06:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6c08:	4798      	blx	r3
   d6c0a:	b188      	cbz	r0, d6c30 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6c0c:	6823      	ldr	r3, [r4, #0]
   d6c0e:	4620      	mov	r0, r4
   d6c10:	691b      	ldr	r3, [r3, #16]
   d6c12:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6c14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6c16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6c18:	4285      	cmp	r5, r0
   d6c1a:	bfa8      	it	ge
   d6c1c:	4605      	movge	r5, r0
   d6c1e:	4419      	add	r1, r3
   d6c20:	462a      	mov	r2, r5
   d6c22:	4630      	mov	r0, r6
   d6c24:	f002 fe20 	bl	d9868 <memcpy>
        _offset += read;
   d6c28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6c2a:	442b      	add	r3, r5
   d6c2c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d6c2e:	e001      	b.n	d6c34 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d6c30:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d6c34:	4628      	mov	r0, r5
   d6c36:	bd70      	pop	{r4, r5, r6, pc}

000d6c38 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6c38:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	4b05      	ldr	r3, [pc, #20]	; (d6c54 <_ZN3UDP8remoteIPEv+0x1c>)
   d6c3e:	f844 3b04 	str.w	r3, [r4], #4
   d6c42:	f101 0520 	add.w	r5, r1, #32
   d6c46:	4606      	mov	r6, r0
   d6c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c4c:	682b      	ldr	r3, [r5, #0]
   d6c4e:	7023      	strb	r3, [r4, #0]
   d6c50:	4630      	mov	r0, r6
   d6c52:	bd70      	pop	{r4, r5, r6, pc}
   d6c54:	000dc64c 	.word	0x000dc64c

000d6c58 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c5a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6c5c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6c5e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6c60:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6c62:	4a0a      	ldr	r2, [pc, #40]	; (d6c8c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6c64:	9202      	str	r2, [sp, #8]
   d6c66:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6c68:	468e      	mov	lr, r1
   d6c6a:	4606      	mov	r6, r0
   d6c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c6e:	ac03      	add	r4, sp, #12
   d6c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c72:	682b      	ldr	r3, [r5, #0]
   d6c74:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6c76:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6c7a:	9300      	str	r3, [sp, #0]
   d6c7c:	4662      	mov	r2, ip
   d6c7e:	ab02      	add	r3, sp, #8
   d6c80:	4671      	mov	r1, lr
   d6c82:	4630      	mov	r0, r6
   d6c84:	47b8      	blx	r7
    }
   d6c86:	b009      	add	sp, #36	; 0x24
   d6c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c8a:	bf00      	nop
   d6c8c:	000dc64c 	.word	0x000dc64c

000d6c90 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6c92:	6803      	ldr	r3, [r0, #0]
   d6c94:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6c98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6c9a:	4b0d      	ldr	r3, [pc, #52]	; (d6cd0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6c9c:	b089      	sub	sp, #36	; 0x24
   d6c9e:	f100 0620 	add.w	r6, r0, #32
   d6ca2:	4604      	mov	r4, r0
   d6ca4:	9302      	str	r3, [sp, #8]
   d6ca6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ca8:	ad03      	add	r5, sp, #12
   d6caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6cac:	6833      	ldr	r3, [r6, #0]
   d6cae:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6cb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6cb2:	9300      	str	r3, [sp, #0]
   d6cb4:	4672      	mov	r2, lr
   d6cb6:	ab02      	add	r3, sp, #8
   d6cb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6cba:	4620      	mov	r0, r4
   d6cbc:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6cbe:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6cc0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6cc2:	69db      	ldr	r3, [r3, #28]
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	4798      	blx	r3
    return result;
}
   d6cc8:	4628      	mov	r0, r5
   d6cca:	b009      	add	sp, #36	; 0x24
   d6ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6cce:	bf00      	nop
   d6cd0:	000dc64c 	.word	0x000dc64c

000d6cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6cd6:	7843      	ldrb	r3, [r0, #1]
   d6cd8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6cda:	b08d      	sub	sp, #52	; 0x34
   d6cdc:	4605      	mov	r5, r0
   d6cde:	460c      	mov	r4, r1
   d6ce0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6ce2:	d101      	bne.n	d6ce8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6ce4:	1d01      	adds	r1, r0, #4
   d6ce6:	e033      	b.n	d6d50 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6ce8:	2b0a      	cmp	r3, #10
   d6cea:	d135      	bne.n	d6d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6cec:	2211      	movs	r2, #17
   d6cee:	2100      	movs	r1, #0
   d6cf0:	a801      	add	r0, sp, #4
   d6cf2:	f002 fdc4 	bl	d987e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6cf6:	68ab      	ldr	r3, [r5, #8]
   d6cf8:	b943      	cbnz	r3, d6d0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6cfa:	68eb      	ldr	r3, [r5, #12]
   d6cfc:	b933      	cbnz	r3, d6d0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6cfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6d02:	692e      	ldr	r6, [r5, #16]
   d6d04:	f7ff fc1c 	bl	d6540 <inet_htonl>
   d6d08:	4286      	cmp	r6, r0
   d6d0a:	d01f      	beq.n	d6d4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d0c:	f105 0308 	add.w	r3, r5, #8
   d6d10:	ae01      	add	r6, sp, #4
   d6d12:	f105 0e18 	add.w	lr, r5, #24
   d6d16:	6818      	ldr	r0, [r3, #0]
   d6d18:	6859      	ldr	r1, [r3, #4]
   d6d1a:	4632      	mov	r2, r6
   d6d1c:	c203      	stmia	r2!, {r0, r1}
   d6d1e:	3308      	adds	r3, #8
   d6d20:	4573      	cmp	r3, lr
   d6d22:	4616      	mov	r6, r2
   d6d24:	d1f7      	bne.n	d6d16 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6d26:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6d28:	a901      	add	r1, sp, #4
   d6d2a:	a806      	add	r0, sp, #24
   d6d2c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6d2e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6d32:	f000 febb 	bl	d7aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6d38:	3404      	adds	r4, #4
   d6d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d3c:	6833      	ldr	r3, [r6, #0]
   d6d3e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6d40:	b157      	cbz	r7, d6d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d6d42:	8868      	ldrh	r0, [r5, #2]
   d6d44:	f7ff fc04 	bl	d6550 <inet_ntohs>
   d6d48:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6d4a:	e005      	b.n	d6d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6d4c:	f105 0114 	add.w	r1, r5, #20
   d6d50:	4620      	mov	r0, r4
   d6d52:	f000 feed 	bl	d7b30 <_ZN9IPAddressaSEPKh>
   d6d56:	e7f3      	b.n	d6d40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6d58:	b00d      	add	sp, #52	; 0x34
   d6d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6d5c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d60:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6d62:	ab0e      	add	r3, sp, #56	; 0x38
   d6d64:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6d66:	4606      	mov	r6, r0
   d6d68:	4617      	mov	r7, r2
   d6d6a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6d6c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6d70:	462a      	mov	r2, r5
   d6d72:	4629      	mov	r1, r5
   d6d74:	f7ff fb54 	bl	d6420 <netdb_getaddrinfo>
   d6d78:	2800      	cmp	r0, #0
   d6d7a:	db1f      	blt.n	d6dbc <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6d7c:	9b01      	ldr	r3, [sp, #4]
   d6d7e:	b1fb      	cbz	r3, d6dc0 <_ZN3UDP11beginPacketEPKct+0x64>
   d6d80:	695b      	ldr	r3, [r3, #20]
   d6d82:	b1eb      	cbz	r3, d6dc0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6d84:	a802      	add	r0, sp, #8
   d6d86:	f000 fe83 	bl	d7a90 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6d8a:	9b01      	ldr	r3, [sp, #4]
   d6d8c:	462a      	mov	r2, r5
   d6d8e:	6958      	ldr	r0, [r3, #20]
   d6d90:	a902      	add	r1, sp, #8
   d6d92:	f7ff ff9f 	bl	d6cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6d96:	a802      	add	r0, sp, #8
   d6d98:	f000 fe9a 	bl	d7ad0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6d9c:	b180      	cbz	r0, d6dc0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6d9e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6da0:	ad03      	add	r5, sp, #12
   d6da2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6da6:	4b0b      	ldr	r3, [pc, #44]	; (d6dd4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6da8:	9308      	str	r3, [sp, #32]
   d6daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6dac:	ac09      	add	r4, sp, #36	; 0x24
   d6dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6db0:	682b      	ldr	r3, [r5, #0]
   d6db2:	7023      	strb	r3, [r4, #0]
   d6db4:	463a      	mov	r2, r7
   d6db6:	a908      	add	r1, sp, #32
   d6db8:	4630      	mov	r0, r6
   d6dba:	47c0      	blx	r8
   d6dbc:	4604      	mov	r4, r0
   d6dbe:	e001      	b.n	d6dc4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6dc0:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6dc4:	9801      	ldr	r0, [sp, #4]
   d6dc6:	f7ff fb23 	bl	d6410 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6dca:	4620      	mov	r0, r4
   d6dcc:	b00e      	add	sp, #56	; 0x38
   d6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6dd2:	bf00      	nop
   d6dd4:	000dc64c 	.word	0x000dc64c

000d6dd8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6ddc:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6de0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6de4:	b08c      	sub	sp, #48	; 0x30
   d6de6:	4605      	mov	r5, r0
   d6de8:	460c      	mov	r4, r1
   d6dea:	4617      	mov	r7, r2
   d6dec:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6dee:	db00      	blt.n	d6df2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6df0:	b911      	cbnz	r1, d6df8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6df2:	f04f 30ff 	mov.w	r0, #4294967295
   d6df6:	e035      	b.n	d6e64 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6df8:	f04f 0a1c 	mov.w	sl, #28
   d6dfc:	ae05      	add	r6, sp, #20
   d6dfe:	4652      	mov	r2, sl
   d6e00:	2100      	movs	r1, #0
   d6e02:	4630      	mov	r0, r6
   d6e04:	f002 fd3b 	bl	d987e <memset>
        socklen_t slen = sizeof(saddr);
   d6e08:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d6e0c:	f1b9 0f00 	cmp.w	r9, #0
   d6e10:	d014      	beq.n	d6e3c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d6e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6e16:	fbb9 f1f2 	udiv	r1, r9, r2
   d6e1a:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6e1c:	fb02 9111 	mls	r1, r2, r1, r9
   d6e20:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6e22:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d6e24:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6e26:	9300      	str	r3, [sp, #0]
   d6e28:	f241 0206 	movw	r2, #4102	; 0x1006
   d6e2c:	ab03      	add	r3, sp, #12
   d6e2e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6e32:	4640      	mov	r0, r8
   d6e34:	f7ff fc1c 	bl	d6670 <sock_setsockopt>
            if (ret) {
   d6e38:	b108      	cbz	r0, d6e3e <_ZN3UDP13receivePacketEPhjm+0x66>
   d6e3a:	e013      	b.n	d6e64 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d6e3c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6e3e:	ab02      	add	r3, sp, #8
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	4621      	mov	r1, r4
   d6e44:	4603      	mov	r3, r0
   d6e46:	9600      	str	r6, [sp, #0]
   d6e48:	463a      	mov	r2, r7
   d6e4a:	6968      	ldr	r0, [r5, #20]
   d6e4c:	f7ff fc30 	bl	d66b0 <sock_recvfrom>
        if (ret >= 0) {
   d6e50:	1e04      	subs	r4, r0, #0
   d6e52:	db06      	blt.n	d6e62 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6e54:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6e58:	f105 011c 	add.w	r1, r5, #28
   d6e5c:	4630      	mov	r0, r6
   d6e5e:	f7ff ff39 	bl	d6cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6e62:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6e64:	b00c      	add	sp, #48	; 0x30
   d6e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6e6a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6e6a:	b538      	push	{r3, r4, r5, lr}
   d6e6c:	4605      	mov	r5, r0
   d6e6e:	4614      	mov	r4, r2
   d6e70:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6e72:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6e74:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6e76:	d111      	bne.n	d6e9c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6e78:	231c      	movs	r3, #28
   d6e7a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6e7c:	230a      	movs	r3, #10
   d6e7e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6e80:	f7ff fb6e 	bl	d6560 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6e84:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6e86:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6e8a:	1d2b      	adds	r3, r5, #4
   d6e8c:	3514      	adds	r5, #20
   d6e8e:	f853 2b04 	ldr.w	r2, [r3], #4
   d6e92:	f844 2b04 	str.w	r2, [r4], #4
   d6e96:	42ab      	cmp	r3, r5
   d6e98:	d1f9      	bne.n	d6e8e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6e9a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6e9c:	2b04      	cmp	r3, #4
   d6e9e:	d10a      	bne.n	d6eb6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6ea0:	2310      	movs	r3, #16
   d6ea2:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6ea4:	2302      	movs	r3, #2
   d6ea6:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6ea8:	f7ff fb5a 	bl	d6560 <inet_htons>
   d6eac:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6eae:	6868      	ldr	r0, [r5, #4]
   d6eb0:	f7ff fb46 	bl	d6540 <inet_htonl>
   d6eb4:	6060      	str	r0, [r4, #4]
   d6eb6:	bd38      	pop	{r3, r4, r5, pc}

000d6eb8 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6ebc:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6ebe:	ac03      	add	r4, sp, #12
   d6ec0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6ec2:	4699      	mov	r9, r3
   d6ec4:	4606      	mov	r6, r0
   d6ec6:	460f      	mov	r7, r1
   d6ec8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6eca:	2100      	movs	r1, #0
   d6ecc:	462a      	mov	r2, r5
   d6ece:	4620      	mov	r0, r4
   d6ed0:	f002 fcd5 	bl	d987e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6ed4:	4622      	mov	r2, r4
   d6ed6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6eda:	4648      	mov	r0, r9
   d6edc:	f7ff ffc5 	bl	d6e6a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6ee0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6ee4:	b143      	cbz	r3, d6ef8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6ee6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d6eea:	2300      	movs	r3, #0
   d6eec:	4642      	mov	r2, r8
   d6eee:	4639      	mov	r1, r7
   d6ef0:	6970      	ldr	r0, [r6, #20]
   d6ef2:	f7ff fbed 	bl	d66d0 <sock_sendto>
   d6ef6:	e001      	b.n	d6efc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d6ef8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d6efc:	b00b      	add	sp, #44	; 0x2c
   d6efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6f04 <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   d6f04:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f0a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6f0c:	4b0b      	ldr	r3, [pc, #44]	; (d6f3c <_ZN3UDPC1Ev+0x38>)
   d6f0e:	f103 0208 	add.w	r2, r3, #8
   d6f12:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f14:	2500      	movs	r5, #0
   d6f16:	6103      	str	r3, [r0, #16]
   d6f18:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d6f1c:	4604      	mov	r4, r0
   d6f1e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6f20:	6002      	str	r2, [r0, #0]
   d6f22:	6143      	str	r3, [r0, #20]
   d6f24:	301c      	adds	r0, #28
   d6f26:	f000 fdb3 	bl	d7a90 <_ZN9IPAddressC1Ev>
   d6f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d6f2e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6f30:	8725      	strh	r5, [r4, #56]	; 0x38
   d6f32:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6f34:	6423      	str	r3, [r4, #64]	; 0x40
   d6f36:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6f38:	4620      	mov	r0, r4
   d6f3a:	bd38      	pop	{r3, r4, r5, pc}
   d6f3c:	000dc4b8 	.word	0x000dc4b8

000d6f40 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6f40:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6f42:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6f46:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6f48:	b123      	cbz	r3, d6f54 <_ZN3UDP13releaseBufferEv+0x14>
   d6f4a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6f4c:	b110      	cbz	r0, d6f54 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d6f4e:	2101      	movs	r1, #1
   d6f50:	f001 fc7a 	bl	d8848 <_ZdlPvj>
    }
    _buffer = NULL;
   d6f54:	2300      	movs	r3, #0
   d6f56:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d6f58:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6f5c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6f5e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6f60:	8723      	strh	r3, [r4, #56]	; 0x38
   d6f62:	bd10      	pop	{r4, pc}

000d6f64 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6f64:	b570      	push	{r4, r5, r6, lr}
   d6f66:	4604      	mov	r4, r0
   d6f68:	4616      	mov	r6, r2
   d6f6a:	460d      	mov	r5, r1
    releaseBuffer();
   d6f6c:	f7ff ffe8 	bl	d6f40 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6f70:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6f72:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6f74:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6f76:	b93e      	cbnz	r6, d6f88 <_ZN3UDP9setBufferEjPh+0x24>
   d6f78:	b135      	cbz	r5, d6f88 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6f7a:	4628      	mov	r0, r5
   d6f7c:	f7fd f88f 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d6f80:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6f82:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6f84:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d6f88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f8a:	b103      	cbz	r3, d6f8e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6f8c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6f8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6f90:	3000      	adds	r0, #0
   d6f92:	bf18      	it	ne
   d6f94:	2001      	movne	r0, #1
   d6f96:	bd70      	pop	{r4, r5, r6, pc}

000d6f98 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f9a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6f9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6f9e:	4605      	mov	r5, r0
   d6fa0:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6fa2:	b91a      	cbnz	r2, d6fac <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6fa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6fa6:	b109      	cbz	r1, d6fac <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d6fa8:	f7ff ffdc 	bl	d6f64 <_ZN3UDP9setBufferEjPh>
   d6fac:	3404      	adds	r4, #4
   d6fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6fb0:	f105 0620 	add.w	r6, r5, #32
   d6fb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6fb6:	6823      	ldr	r3, [r4, #0]
   d6fb8:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6fba:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6fbc:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6fbe:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6fc0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6fc2:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fc6 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6fc6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6fc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6fca:	4604      	mov	r4, r0
   d6fcc:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6fce:	b91a      	cbnz	r2, d6fd8 <_ZN3UDP11parsePacketEm+0x12>
   d6fd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6fd2:	b109      	cbz	r1, d6fd8 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6fd4:	f7ff ffc6 	bl	d6f64 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6fd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6fda:	2200      	movs	r2, #0
   d6fdc:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6fde:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6fe0:	b149      	cbz	r1, d6ff6 <_ZN3UDP11parsePacketEm+0x30>
   d6fe2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6fe4:	b13a      	cbz	r2, d6ff6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d6fe6:	6823      	ldr	r3, [r4, #0]
   d6fe8:	4620      	mov	r0, r4
   d6fea:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6fec:	4633      	mov	r3, r6
   d6fee:	47a8      	blx	r5
        if (result > 0) {
   d6ff0:	2800      	cmp	r0, #0
            _total = result;
   d6ff2:	bfc8      	it	gt
   d6ff4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6ff6:	6823      	ldr	r3, [r4, #0]
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	691b      	ldr	r3, [r3, #16]
}
   d6ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d7000:	4718      	bx	r3

000d7002 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7002:	b510      	push	{r4, lr}
   d7004:	4604      	mov	r4, r0
{
	free(buffer);
   d7006:	6800      	ldr	r0, [r0, #0]
   d7008:	f7ff fc86 	bl	d6918 <free>
}
   d700c:	4620      	mov	r0, r4
   d700e:	bd10      	pop	{r4, pc}

000d7010 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7010:	b510      	push	{r4, lr}
   d7012:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7014:	6800      	ldr	r0, [r0, #0]
   d7016:	b108      	cbz	r0, d701c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7018:	f7ff fa82 	bl	d6520 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d701c:	4620      	mov	r0, r4
   d701e:	bd10      	pop	{r4, pc}

000d7020 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7020:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7022:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7024:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7026:	689b      	ldr	r3, [r3, #8]
   d7028:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d702a:	68a3      	ldr	r3, [r4, #8]
   d702c:	3b01      	subs	r3, #1
   d702e:	60a3      	str	r3, [r4, #8]
   d7030:	b92b      	cbnz	r3, d703e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d7032:	6823      	ldr	r3, [r4, #0]
   d7034:	4620      	mov	r0, r4
   d7036:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d703c:	4718      	bx	r3
   d703e:	bd10      	pop	{r4, pc}

000d7040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7040:	680b      	ldr	r3, [r1, #0]
   d7042:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7044:	b113      	cbz	r3, d704c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7046:	685a      	ldr	r2, [r3, #4]
   d7048:	3201      	adds	r2, #1
   d704a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d704c:	4770      	bx	lr

000d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d704e:	b510      	push	{r4, lr}
   d7050:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d7052:	6800      	ldr	r0, [r0, #0]
   d7054:	b128      	cbz	r0, d7062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7056:	6843      	ldr	r3, [r0, #4]
   d7058:	3b01      	subs	r3, #1
   d705a:	6043      	str	r3, [r0, #4]
   d705c:	b90b      	cbnz	r3, d7062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d705e:	f7ff ffdf 	bl	d7020 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d7062:	4620      	mov	r0, r4
   d7064:	bd10      	pop	{r4, pc}
	...

000d7068 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7068:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d706a:	4c06      	ldr	r4, [pc, #24]	; (d7084 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d706c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d706e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7070:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7072:	f7ff fa4d 	bl	d6510 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7076:	4620      	mov	r0, r4
   d7078:	4a03      	ldr	r2, [pc, #12]	; (d7088 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d707a:	4904      	ldr	r1, [pc, #16]	; (d708c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d707c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7080:	f001 bbd4 	b.w	d882c <__aeabi_atexit>
   d7084:	2003e388 	.word	0x2003e388
   d7088:	2003e11c 	.word	0x2003e11c
   d708c:	000d7011 	.word	0x000d7011

000d7090 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7092:	4606      	mov	r6, r0
   d7094:	460d      	mov	r5, r1
   d7096:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7098:	2400      	movs	r4, #0
  while (size--) {
   d709a:	42bd      	cmp	r5, r7
   d709c:	d00c      	beq.n	d70b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d709e:	6833      	ldr	r3, [r6, #0]
   d70a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d70a4:	689b      	ldr	r3, [r3, #8]
   d70a6:	4630      	mov	r0, r6
   d70a8:	4798      	blx	r3
     if (chunk>=0)
   d70aa:	2800      	cmp	r0, #0
   d70ac:	db01      	blt.n	d70b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d70ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d70b0:	e7f3      	b.n	d709a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d70b2:	2c00      	cmp	r4, #0
   d70b4:	bf08      	it	eq
   d70b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d70b8:	4620      	mov	r0, r4
   d70ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d70bc:	b570      	push	{r4, r5, r6, lr}
   d70be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d70c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d70c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d70c4:	b149      	cbz	r1, d70da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d70c6:	f002 fc46 	bl	d9956 <strlen>
   d70ca:	682b      	ldr	r3, [r5, #0]
   d70cc:	4602      	mov	r2, r0
   d70ce:	4621      	mov	r1, r4
   d70d0:	4628      	mov	r0, r5
   d70d2:	68db      	ldr	r3, [r3, #12]
    }
   d70d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d70d8:	4718      	bx	r3
    }
   d70da:	bd70      	pop	{r4, r5, r6, pc}

000d70dc <_ZN5Print5printEPKc>:
   d70dc:	b508      	push	{r3, lr}
   d70de:	f7ff ffed 	bl	d70bc <_ZN5Print5writeEPKc>
   d70e2:	bd08      	pop	{r3, pc}

000d70e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d70e4:	6803      	ldr	r3, [r0, #0]
   d70e6:	689b      	ldr	r3, [r3, #8]
   d70e8:	4718      	bx	r3

000d70ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d70ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d70ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d70ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d70f0:	f7ff fff8 	bl	d70e4 <_ZN5Print5printEc>
  n += print('\n');
   d70f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d70f6:	4604      	mov	r4, r0
  n += print('\n');
   d70f8:	4628      	mov	r0, r5
   d70fa:	f7ff fff3 	bl	d70e4 <_ZN5Print5printEc>
  return n;
}
   d70fe:	4420      	add	r0, r4
   d7100:	bd38      	pop	{r3, r4, r5, pc}

000d7102 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7102:	b538      	push	{r3, r4, r5, lr}
   d7104:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7106:	f7ff ffd9 	bl	d70bc <_ZN5Print5writeEPKc>
   d710a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d710c:	4628      	mov	r0, r5
   d710e:	f7ff ffec 	bl	d70ea <_ZN5Print7printlnEv>
  return n;
}
   d7112:	4420      	add	r0, r4
   d7114:	bd38      	pop	{r3, r4, r5, pc}

000d7116 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7116:	b530      	push	{r4, r5, lr}
   d7118:	b08b      	sub	sp, #44	; 0x2c
   d711a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d711c:	2100      	movs	r1, #0
   d711e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7122:	2a01      	cmp	r2, #1
   d7124:	bf98      	it	ls
   d7126:	220a      	movls	r2, #10
   d7128:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d712c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7130:	fb05 3312 	mls	r3, r5, r2, r3
   d7134:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7138:	2b09      	cmp	r3, #9
   d713a:	bf94      	ite	ls
   d713c:	3330      	addls	r3, #48	; 0x30
   d713e:	3337      	addhi	r3, #55	; 0x37
   d7140:	b2db      	uxtb	r3, r3
   d7142:	4621      	mov	r1, r4
   d7144:	f804 3901 	strb.w	r3, [r4], #-1
   d7148:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d714a:	2d00      	cmp	r5, #0
   d714c:	d1ee      	bne.n	d712c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d714e:	f7ff ffb5 	bl	d70bc <_ZN5Print5writeEPKc>
}
   d7152:	b00b      	add	sp, #44	; 0x2c
   d7154:	bd30      	pop	{r4, r5, pc}

000d7156 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7156:	b40c      	push	{r2, r3}
   d7158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d715c:	b087      	sub	sp, #28
   d715e:	af00      	add	r7, sp, #0
   d7160:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7164:	4605      	mov	r5, r0
   d7166:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d716a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d716c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d716e:	4623      	mov	r3, r4
   d7170:	464a      	mov	r2, r9
   d7172:	2114      	movs	r1, #20
   d7174:	1d38      	adds	r0, r7, #4
   d7176:	f7ff fbe7 	bl	d6948 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d717a:	2813      	cmp	r0, #19
   d717c:	d805      	bhi.n	d718a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d717e:	1d39      	adds	r1, r7, #4
   d7180:	4628      	mov	r0, r5
   d7182:	f7ff ff9b 	bl	d70bc <_ZN5Print5writeEPKc>
   d7186:	4604      	mov	r4, r0
   d7188:	e013      	b.n	d71b2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d718a:	f100 0308 	add.w	r3, r0, #8
   d718e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7192:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7194:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7198:	1c41      	adds	r1, r0, #1
   d719a:	4623      	mov	r3, r4
   d719c:	464a      	mov	r2, r9
   d719e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d71a0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d71a2:	f7ff fbd1 	bl	d6948 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71a6:	4669      	mov	r1, sp
   d71a8:	4628      	mov	r0, r5
   d71aa:	f7ff ff87 	bl	d70bc <_ZN5Print5writeEPKc>
   d71ae:	4604      	mov	r4, r0
   d71b0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d71b2:	b11e      	cbz	r6, d71bc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d71b4:	4628      	mov	r0, r5
   d71b6:	f7ff ff98 	bl	d70ea <_ZN5Print7printlnEv>
   d71ba:	4404      	add	r4, r0
    return n;
}
   d71bc:	4620      	mov	r0, r4
   d71be:	371c      	adds	r7, #28
   d71c0:	46bd      	mov	sp, r7
   d71c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71c6:	b002      	add	sp, #8
   d71c8:	4770      	bx	lr
	...

000d71cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d71cc:	4b01      	ldr	r3, [pc, #4]	; (d71d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d71ce:	4a02      	ldr	r2, [pc, #8]	; (d71d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d71d0:	601a      	str	r2, [r3, #0]
   d71d2:	4770      	bx	lr
   d71d4:	2003e38c 	.word	0x2003e38c
   d71d8:	000dc59b 	.word	0x000dc59b

000d71dc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d71de:	4b14      	ldr	r3, [pc, #80]	; (d7230 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d71e0:	4f14      	ldr	r7, [pc, #80]	; (d7234 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d71e2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d71e4:	4b14      	ldr	r3, [pc, #80]	; (d7238 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d71e6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d71e8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d71ea:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d71ec:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d71ee:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d71f0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d71f2:	d01b      	beq.n	d722c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d71f4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d71f6:	ad01      	add	r5, sp, #4
   d71f8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d71fc:	f002 fa38 	bl	d9670 <localtime>
	calendar_time->tm_year += 1900;
   d7200:	6943      	ldr	r3, [r0, #20]
   d7202:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7206:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7208:	4604      	mov	r4, r0
   d720a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d720c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d720e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7212:	f8d4 e000 	ldr.w	lr, [r4]
   d7216:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d721a:	ad01      	add	r5, sp, #4
   d721c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d721e:	4c07      	ldr	r4, [pc, #28]	; (d723c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7226:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7228:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d722c:	b00b      	add	sp, #44	; 0x2c
   d722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7230:	2003e3c0 	.word	0x2003e3c0
   d7234:	2003e3bc 	.word	0x2003e3bc
   d7238:	2003e3b8 	.word	0x2003e3b8
   d723c:	2003e390 	.word	0x2003e390

000d7240 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7240:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7242:	2000      	movs	r0, #0
   d7244:	f7ff fb50 	bl	d68e8 <spark_sync_time_pending>
   d7248:	b128      	cbz	r0, d7256 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d724a:	f7ff fb2d 	bl	d68a8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d724e:	f080 0001 	eor.w	r0, r0, #1
   d7252:	b2c0      	uxtb	r0, r0
   d7254:	bd08      	pop	{r3, pc}
   d7256:	2001      	movs	r0, #1
    }
   d7258:	bd08      	pop	{r3, pc}
	...

000d725c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d725c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7260:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7268:	d40f      	bmi.n	d728a <_ZN9TimeClass4zoneEf+0x2e>
   d726a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d726e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7276:	dc08      	bgt.n	d728a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7278:	eddf 7a04 	vldr	s15, [pc, #16]	; d728c <_ZN9TimeClass4zoneEf+0x30>
   d727c:	4b04      	ldr	r3, [pc, #16]	; (d7290 <_ZN9TimeClass4zoneEf+0x34>)
   d727e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7282:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7286:	ed83 0a00 	vstr	s0, [r3]
   d728a:	4770      	bx	lr
   d728c:	45610000 	.word	0x45610000
   d7290:	2003e3c0 	.word	0x2003e3c0

000d7294 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7294:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7296:	2000      	movs	r0, #0
   d7298:	f7ff f91a 	bl	d64d0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d729c:	4604      	mov	r4, r0
   d729e:	b968      	cbnz	r0, d72bc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d72a0:	f7ff fa66 	bl	d6770 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d72a4:	2801      	cmp	r0, #1
   d72a6:	d10b      	bne.n	d72c0 <_ZN9TimeClass7isValidEv+0x2c>
   d72a8:	4620      	mov	r0, r4
   d72aa:	f7ff fa89 	bl	d67c0 <system_thread_get_state>
   d72ae:	b938      	cbnz	r0, d72c0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d72b0:	f7ff ffc6 	bl	d7240 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d72b4:	b930      	cbnz	r0, d72c4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d72b6:	f7ff faef 	bl	d6898 <spark_process>
   d72ba:	e7f9      	b.n	d72b0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d72bc:	2001      	movs	r0, #1
   d72be:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d72c0:	2000      	movs	r0, #0
   d72c2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d72c4:	f7ff ffbc 	bl	d7240 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d72c8:	2000      	movs	r0, #0
   d72ca:	f7ff f901 	bl	d64d0 <HAL_RTC_Time_Is_Valid>
   d72ce:	3000      	adds	r0, #0
   d72d0:	bf18      	it	ne
   d72d2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d72d4:	bd10      	pop	{r4, pc}

000d72d6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d72d6:	b508      	push	{r3, lr}
    (void)isValid();
   d72d8:	f7ff ffdc 	bl	d7294 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d72dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d72e0:	f7ff b8ee 	b.w	d64c0 <HAL_RTC_Get_UnixTime>

000d72e4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d72e4:	b508      	push	{r3, lr}
	return hour(now());
   d72e6:	f7ff fff6 	bl	d72d6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d72ea:	f7ff ff77 	bl	d71dc <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d72ee:	4b01      	ldr	r3, [pc, #4]	; (d72f4 <_ZN9TimeClass4hourEv+0x10>)
   d72f0:	6898      	ldr	r0, [r3, #8]
   d72f2:	bd08      	pop	{r3, pc}
   d72f4:	2003e390 	.word	0x2003e390

000d72f8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d72f8:	b508      	push	{r3, lr}
	return minute(now());
   d72fa:	f7ff ffec 	bl	d72d6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d72fe:	f7ff ff6d 	bl	d71dc <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7302:	4b01      	ldr	r3, [pc, #4]	; (d7308 <_ZN9TimeClass6minuteEv+0x10>)
   d7304:	6858      	ldr	r0, [r3, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	2003e390 	.word	0x2003e390

000d730c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d730c:	b508      	push	{r3, lr}
	return second(now());
   d730e:	f7ff ffe2 	bl	d72d6 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7312:	f7ff ff63 	bl	d71dc <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d7316:	4b01      	ldr	r3, [pc, #4]	; (d731c <_ZN9TimeClass6secondEv+0x10>)
   d7318:	6818      	ldr	r0, [r3, #0]
   d731a:	bd08      	pop	{r3, pc}
   d731c:	2003e390 	.word	0x2003e390

000d7320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7320:	4b02      	ldr	r3, [pc, #8]	; (d732c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	4b02      	ldr	r3, [pc, #8]	; (d7330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7326:	601a      	str	r2, [r3, #0]
   d7328:	4770      	bx	lr
   d732a:	bf00      	nop
   d732c:	2003e02c 	.word	0x2003e02c
   d7330:	2003e3b4 	.word	0x2003e3b4

000d7334 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7334:	2100      	movs	r1, #0
   d7336:	f7ff ba2b 	b.w	d6790 <system_delay_ms>

000d733a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d733a:	b510      	push	{r4, lr}
   d733c:	4604      	mov	r4, r0
   d733e:	f7fe fd23 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
   d7342:	4620      	mov	r0, r4
   d7344:	bd10      	pop	{r4, pc}

000d7346 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7346:	b513      	push	{r0, r1, r4, lr}
   d7348:	460b      	mov	r3, r1
   d734a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d734c:	c803      	ldmia	r0, {r0, r1}
   d734e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7352:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7356:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d735a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d735e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7362:	b002      	add	sp, #8
   d7364:	bd10      	pop	{r4, pc}
	...

000d7368 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7368:	4803      	ldr	r0, [pc, #12]	; (d7378 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d736a:	4a04      	ldr	r2, [pc, #16]	; (d737c <_GLOBAL__sub_I_RGB+0x14>)
   d736c:	4904      	ldr	r1, [pc, #16]	; (d7380 <_GLOBAL__sub_I_RGB+0x18>)
   d736e:	2300      	movs	r3, #0
   d7370:	6083      	str	r3, [r0, #8]
   d7372:	f001 ba5b 	b.w	d882c <__aeabi_atexit>
   d7376:	bf00      	nop
   d7378:	2003e3c4 	.word	0x2003e3c4
   d737c:	2003e11c 	.word	0x2003e11c
   d7380:	000d733b 	.word	0x000d733b

000d7384 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7384:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7386:	4b0c      	ldr	r3, [pc, #48]	; (d73b8 <serialEventRun+0x34>)
   d7388:	b133      	cbz	r3, d7398 <serialEventRun+0x14>
   d738a:	f000 fc3f 	bl	d7c0c <_Z16_fetch_usbserialv>
   d738e:	6803      	ldr	r3, [r0, #0]
   d7390:	691b      	ldr	r3, [r3, #16]
   d7392:	4798      	blx	r3
   d7394:	2800      	cmp	r0, #0
   d7396:	dc09      	bgt.n	d73ac <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7398:	4b08      	ldr	r3, [pc, #32]	; (d73bc <serialEventRun+0x38>)
   d739a:	b163      	cbz	r3, d73b6 <serialEventRun+0x32>
   d739c:	f000 fcb8 	bl	d7d10 <_Z22__fetch_global_Serial1v>
   d73a0:	6803      	ldr	r3, [r0, #0]
   d73a2:	691b      	ldr	r3, [r3, #16]
   d73a4:	4798      	blx	r3
   d73a6:	2800      	cmp	r0, #0
   d73a8:	dc03      	bgt.n	d73b2 <serialEventRun+0x2e>
   d73aa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d73ac:	f3af 8000 	nop.w
   d73b0:	e7f2      	b.n	d7398 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d73b2:	f3af 8000 	nop.w
   d73b6:	bd08      	pop	{r3, pc}
	...

000d73c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d73c0:	b508      	push	{r3, lr}
	serialEventRun();
   d73c2:	f7ff ffdf 	bl	d7384 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d73c6:	f7ff f873 	bl	d64b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d73ca:	4b01      	ldr	r3, [pc, #4]	; (d73d0 <_post_loop+0x10>)
   d73cc:	6018      	str	r0, [r3, #0]
   d73ce:	bd08      	pop	{r3, pc}
   d73d0:	2003e708 	.word	0x2003e708

000d73d4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d73d4:	4802      	ldr	r0, [pc, #8]	; (d73e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d73d6:	4a03      	ldr	r2, [pc, #12]	; (d73e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d73d8:	4903      	ldr	r1, [pc, #12]	; (d73e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d73da:	1a12      	subs	r2, r2, r0
   d73dc:	f002 ba44 	b.w	d9868 <memcpy>
   d73e0:	2003f400 	.word	0x2003f400
   d73e4:	2003f404 	.word	0x2003f404
   d73e8:	000dcbd0 	.word	0x000dcbd0

000d73ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d73ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73ee:	2300      	movs	r3, #0
   d73f0:	9300      	str	r3, [sp, #0]
   d73f2:	461a      	mov	r2, r3
   d73f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73f8:	f7ff f9f4 	bl	d67e4 <system_ctrl_set_result>
}
   d73fc:	b003      	add	sp, #12
   d73fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7404 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7404:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7406:	8843      	ldrh	r3, [r0, #2]
   d7408:	2b0a      	cmp	r3, #10
   d740a:	d008      	beq.n	d741e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d740c:	2b50      	cmp	r3, #80	; 0x50
   d740e:	d109      	bne.n	d7424 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7410:	4b09      	ldr	r3, [pc, #36]	; (d7438 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7412:	681b      	ldr	r3, [r3, #0]
   d7414:	b13b      	cbz	r3, d7426 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7416:	b003      	add	sp, #12
   d7418:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d741c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d741e:	f7ff ffe5 	bl	d73ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7422:	e006      	b.n	d7432 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7424:	2300      	movs	r3, #0
   d7426:	9300      	str	r3, [sp, #0]
   d7428:	461a      	mov	r2, r3
   d742a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d742e:	f7ff f9d9 	bl	d67e4 <system_ctrl_set_result>
        break;
    }
}
   d7432:	b003      	add	sp, #12
   d7434:	f85d fb04 	ldr.w	pc, [sp], #4
   d7438:	2003e3d4 	.word	0x2003e3d4

000d743c <module_user_init_hook>:

void module_user_init_hook()
{
   d743c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d743e:	4c10      	ldr	r4, [pc, #64]	; (d7480 <module_user_init_hook+0x44>)
   d7440:	4d10      	ldr	r5, [pc, #64]	; (d7484 <module_user_init_hook+0x48>)
   d7442:	6823      	ldr	r3, [r4, #0]
   d7444:	42ab      	cmp	r3, r5
   d7446:	4b10      	ldr	r3, [pc, #64]	; (d7488 <module_user_init_hook+0x4c>)
   d7448:	bf0c      	ite	eq
   d744a:	2201      	moveq	r2, #1
   d744c:	2200      	movne	r2, #0
   d744e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7450:	d002      	beq.n	d7458 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7452:	f7ff ffbf 	bl	d73d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7456:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7458:	f7ff f822 	bl	d64a0 <HAL_RNG_GetRandomNumber>
   d745c:	4604      	mov	r4, r0
    srand(seed);
   d745e:	f002 fa17 	bl	d9890 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7462:	4b0a      	ldr	r3, [pc, #40]	; (d748c <module_user_init_hook+0x50>)
   d7464:	b113      	cbz	r3, d746c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7466:	4620      	mov	r0, r4
   d7468:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d746c:	2100      	movs	r1, #0
   d746e:	4807      	ldr	r0, [pc, #28]	; (d748c <module_user_init_hook+0x50>)
   d7470:	f7ff fa42 	bl	d68f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7474:	2100      	movs	r1, #0
   d7476:	4806      	ldr	r0, [pc, #24]	; (d7490 <module_user_init_hook+0x54>)
}
   d7478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d747c:	f7ff b9a8 	b.w	d67d0 <system_ctrl_set_app_request_handler>
   d7480:	2003f400 	.word	0x2003f400
   d7484:	9a271c1e 	.word	0x9a271c1e
   d7488:	2003e3d8 	.word	0x2003e3d8
   d748c:	00000000 	.word	0x00000000
   d7490:	000d7405 	.word	0x000d7405

000d7494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7494:	4770      	bx	lr

000d7496 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7496:	2000      	movs	r0, #0
   d7498:	4770      	bx	lr

000d749a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d749a:	b510      	push	{r4, lr}
   d749c:	2110      	movs	r1, #16
   d749e:	4604      	mov	r4, r0
   d74a0:	f001 f9d2 	bl	d8848 <_ZdlPvj>
   d74a4:	4620      	mov	r0, r4
   d74a6:	bd10      	pop	{r4, pc}

000d74a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d74a8:	b508      	push	{r3, lr}
      { delete this; }
   d74aa:	b108      	cbz	r0, d74b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d74ac:	f7ff fff5 	bl	d749a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d74b0:	bd08      	pop	{r3, pc}

000d74b2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d74b2:	2200      	movs	r2, #0
   d74b4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d74b6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d74b8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d74bc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d74be:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d74c2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d74c4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74c6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d74c8:	680c      	ldr	r4, [r1, #0]
   d74ca:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d74cc:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d74ce:	bd10      	pop	{r4, pc}

000d74d0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d74d0:	b510      	push	{r4, lr}
   d74d2:	4604      	mov	r4, r0
    free((void*)msg_);
   d74d4:	6800      	ldr	r0, [r0, #0]
   d74d6:	f7ff fa1f 	bl	d6918 <free>
}
   d74da:	4620      	mov	r0, r4
   d74dc:	bd10      	pop	{r4, pc}

000d74de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d74de:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d74e0:	68c4      	ldr	r4, [r0, #12]
   d74e2:	b1f4      	cbz	r4, d7522 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d74e4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d74e6:	2b02      	cmp	r3, #2
   d74e8:	d103      	bne.n	d74f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d74ea:	f104 000c 	add.w	r0, r4, #12
   d74ee:	f7ff ffef 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d74f2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d74f4:	b135      	cbz	r5, d7504 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d74f6:	4628      	mov	r0, r5
   d74f8:	f7fe fc46 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
   d74fc:	2110      	movs	r1, #16
   d74fe:	4628      	mov	r0, r5
   d7500:	f001 f9a2 	bl	d8848 <_ZdlPvj>
   d7504:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7506:	b135      	cbz	r5, d7516 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7508:	4628      	mov	r0, r5
   d750a:	f7fe fc3d 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
   d750e:	2110      	movs	r1, #16
   d7510:	4628      	mov	r0, r5
   d7512:	f001 f999 	bl	d8848 <_ZdlPvj>
   d7516:	4620      	mov	r0, r4
   d7518:	2114      	movs	r1, #20
   d751a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d751e:	f001 b993 	b.w	d8848 <_ZdlPvj>
   d7522:	bd38      	pop	{r3, r4, r5, pc}

000d7524 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7524:	b513      	push	{r0, r1, r4, lr}
   d7526:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7528:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d752c:	2300      	movs	r3, #0
   d752e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7530:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7532:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7534:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7536:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7538:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d753a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d753c:	f7ff fd87 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7540:	4620      	mov	r0, r4
   d7542:	b002      	add	sp, #8
   d7544:	bd10      	pop	{r4, pc}

000d7546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7548:	460c      	mov	r4, r1
   d754a:	ad02      	add	r5, sp, #8
   d754c:	f854 3b04 	ldr.w	r3, [r4], #4
   d7550:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7554:	4606      	mov	r6, r0
   d7556:	460f      	mov	r7, r1
   d7558:	a801      	add	r0, sp, #4
   d755a:	4621      	mov	r1, r4
   d755c:	f7ff fd70 	bl	d7040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7560:	4629      	mov	r1, r5
   d7562:	4630      	mov	r0, r6
   d7564:	f7ff ffde 	bl	d7524 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7568:	a801      	add	r0, sp, #4
   d756a:	f7ff fd70 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d756e:	4620      	mov	r0, r4
   d7570:	f7ff fd6d 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7574:	4638      	mov	r0, r7
   d7576:	2108      	movs	r1, #8
   d7578:	f001 f966 	bl	d8848 <_ZdlPvj>
        return p;
    }
   d757c:	4630      	mov	r0, r6
   d757e:	b003      	add	sp, #12
   d7580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7584:	b538      	push	{r3, r4, r5, lr}
   d7586:	2300      	movs	r3, #0
   d7588:	4604      	mov	r4, r0
   d758a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d758c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d758e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7590:	f7fc fd83 	bl	d409a <_Znwj>
   d7594:	b128      	cbz	r0, d75a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7596:	2301      	movs	r3, #1
   d7598:	6043      	str	r3, [r0, #4]
   d759a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d759c:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d759e:	6003      	str	r3, [r0, #0]
   d75a0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d75a2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d75a4:	4620      	mov	r0, r4
   d75a6:	bd38      	pop	{r3, r4, r5, pc}
   d75a8:	000dc630 	.word	0x000dc630

000d75ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75ac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d75ae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75b0:	b90a      	cbnz	r2, d75b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d75b2:	f001 fa15 	bl	d89e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75b6:	68c3      	ldr	r3, [r0, #12]
    }
   d75b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75bc:	4718      	bx	r3

000d75be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d75be:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d75c0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d75c2:	f100 0110 	add.w	r1, r0, #16
   d75c6:	f7ff fff1 	bl	d75ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d75ca:	bd08      	pop	{r3, pc}

000d75cc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75cc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d75ce:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75d0:	b90a      	cbnz	r2, d75d6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d75d2:	f001 fa05 	bl	d89e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75d6:	68c3      	ldr	r3, [r0, #12]
    }
   d75d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75dc:	4718      	bx	r3

000d75de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d75de:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d75e0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d75e2:	f100 0110 	add.w	r1, r0, #16
   d75e6:	f7ff fff1 	bl	d75cc <_ZNKSt8functionIFvRKbEEclES1_>
   d75ea:	bd08      	pop	{r3, pc}

000d75ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75ec:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75ee:	2300      	movs	r3, #0
   d75f0:	6083      	str	r3, [r0, #8]
   d75f2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75f4:	4604      	mov	r4, r0
   d75f6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d75f8:	b12b      	cbz	r3, d7606 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d75fa:	2202      	movs	r2, #2
   d75fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d75fe:	68eb      	ldr	r3, [r5, #12]
   d7600:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7602:	68ab      	ldr	r3, [r5, #8]
   d7604:	60a3      	str	r3, [r4, #8]
	}
    }
   d7606:	4620      	mov	r0, r4
   d7608:	bd38      	pop	{r3, r4, r5, pc}
	...

000d760c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d760c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d760e:	b089      	sub	sp, #36	; 0x24
   d7610:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7612:	4668      	mov	r0, sp
   d7614:	f7ff ff4d 	bl	d74b2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7618:	2300      	movs	r3, #0
   d761a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d761e:	f04f 0202 	mov.w	r2, #2
   d7622:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7626:	2b00      	cmp	r3, #0
   d7628:	d103      	bne.n	d7632 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d762a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d762e:	2900      	cmp	r1, #0
   d7630:	d1f7      	bne.n	d7622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7632:	d002      	beq.n	d763a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7634:	f88d 3008 	strb.w	r3, [sp, #8]
   d7638:	e063      	b.n	d7702 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d763a:	f114 050c 	adds.w	r5, r4, #12
   d763e:	d003      	beq.n	d7648 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7640:	4669      	mov	r1, sp
   d7642:	4628      	mov	r0, r5
   d7644:	f7ff ff35 	bl	d74b2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7648:	f3bf 8f5f 	dmb	sy
   d764c:	2301      	movs	r3, #1
   d764e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7650:	2000      	movs	r0, #0
   d7652:	f104 0308 	add.w	r3, r4, #8
   d7656:	f3bf 8f5f 	dmb	sy
   d765a:	e853 6f00 	ldrex	r6, [r3]
   d765e:	e843 0200 	strex	r2, r0, [r3]
   d7662:	2a00      	cmp	r2, #0
   d7664:	d1f9      	bne.n	d765a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7666:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d766a:	2e00      	cmp	r6, #0
   d766c:	d049      	beq.n	d7702 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d766e:	f7ff f897 	bl	d67a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7672:	b120      	cbz	r0, d767e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7674:	4629      	mov	r1, r5
   d7676:	4630      	mov	r0, r6
   d7678:	f7ff ff98 	bl	d75ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d767c:	e03a      	b.n	d76f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d767e:	4631      	mov	r1, r6
   d7680:	a802      	add	r0, sp, #8
   d7682:	f7ff ffb3 	bl	d75ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7686:	68e0      	ldr	r0, [r4, #12]
   d7688:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d768c:	b108      	cbz	r0, d7692 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d768e:	f002 f947 	bl	d9920 <strdup>
   d7692:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7694:	2010      	movs	r0, #16
   d7696:	f8ad 501c 	strh.w	r5, [sp, #28]
   d769a:	f7fc fcfe 	bl	d409a <_Znwj>
   d769e:	4605      	mov	r5, r0
   d76a0:	b1e8      	cbz	r0, d76de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d76a2:	2700      	movs	r7, #0
   d76a4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d76a6:	2018      	movs	r0, #24
   d76a8:	f7fc fcf7 	bl	d409a <_Znwj>
   d76ac:	4604      	mov	r4, r0
   d76ae:	b188      	cbz	r0, d76d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d76b0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d76b2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d76b4:	a802      	add	r0, sp, #8
   d76b6:	f7ff fe46 	bl	d7346 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76ba:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d76bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d76be:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76c0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d76c2:	9204      	str	r2, [sp, #16]
   d76c4:	a906      	add	r1, sp, #24
   d76c6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d76c8:	60e3      	str	r3, [r4, #12]
   d76ca:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d76ce:	9205      	str	r2, [sp, #20]
   d76d0:	f7ff feef 	bl	d74b2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d76d4:	4b0d      	ldr	r3, [pc, #52]	; (d770c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d76d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d76d8:	4b0d      	ldr	r3, [pc, #52]	; (d7710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d76da:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d76dc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d76de:	a806      	add	r0, sp, #24
   d76e0:	f7ff fef6 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d76e4:	a802      	add	r0, sp, #8
   d76e6:	f7fe fb4f 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d76ea:	2200      	movs	r2, #0
   d76ec:	4629      	mov	r1, r5
   d76ee:	4809      	ldr	r0, [pc, #36]	; (d7714 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d76f0:	f7ff f85e 	bl	d67b0 <application_thread_invoke>
   d76f4:	4630      	mov	r0, r6
   d76f6:	f7fe fb47 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d76fa:	2110      	movs	r1, #16
   d76fc:	4630      	mov	r0, r6
   d76fe:	f001 f8a3 	bl	d8848 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7702:	4668      	mov	r0, sp
   d7704:	f7ff fee4 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
    }
   d7708:	b009      	add	sp, #36	; 0x24
   d770a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d770c:	000d75bf 	.word	0x000d75bf
   d7710:	000d7835 	.word	0x000d7835
   d7714:	000d7d5d 	.word	0x000d7d5d

000d7718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d771c:	b08b      	sub	sp, #44	; 0x2c
   d771e:	4606      	mov	r6, r0
   d7720:	460f      	mov	r7, r1
   d7722:	4690      	mov	r8, r2
   d7724:	4699      	mov	r9, r3
   d7726:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d772a:	f7ff f8bd 	bl	d68a8 <spark_cloud_flag_connected>
   d772e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7730:	4683      	mov	fp, r0
   d7732:	bb30      	cbnz	r0, d7782 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7734:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7738:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d773a:	a905      	add	r1, sp, #20
   d773c:	4628      	mov	r0, r5
   d773e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7742:	f7ff feb6 	bl	d74b2 <_ZN8particle5ErrorC1EOS0_>
   d7746:	2014      	movs	r0, #20
   d7748:	f7fc fca7 	bl	d409a <_Znwj>
   d774c:	4604      	mov	r4, r0
   d774e:	b158      	cbz	r0, d7768 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7750:	2302      	movs	r3, #2
   d7752:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7754:	2301      	movs	r3, #1
   d7756:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7758:	f8c0 b004 	str.w	fp, [r0, #4]
   d775c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7760:	4629      	mov	r1, r5
   d7762:	300c      	adds	r0, #12
   d7764:	f7ff fea5 	bl	d74b2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7768:	4630      	mov	r0, r6
   d776a:	4621      	mov	r1, r4
   d776c:	f840 4b04 	str.w	r4, [r0], #4
   d7770:	f7ff ff08 	bl	d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7774:	4628      	mov	r0, r5
   d7776:	f7ff feab 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d777a:	a805      	add	r0, sp, #20
   d777c:	f7ff fea8 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
   d7780:	e052      	b.n	d7828 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7782:	2400      	movs	r4, #0
   d7784:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7786:	2014      	movs	r0, #20
   d7788:	606c      	str	r4, [r5, #4]
   d778a:	60ac      	str	r4, [r5, #8]
   d778c:	9307      	str	r3, [sp, #28]
   d778e:	f7fc fc84 	bl	d409a <_Znwj>
   d7792:	4601      	mov	r1, r0
   d7794:	b118      	cbz	r0, d779e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7796:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7798:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d779a:	6044      	str	r4, [r0, #4]
   d779c:	6084      	str	r4, [r0, #8]
   d779e:	a804      	add	r0, sp, #16
   d77a0:	9103      	str	r1, [sp, #12]
   d77a2:	f7ff feef 	bl	d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d77a6:	4b22      	ldr	r3, [pc, #136]	; (d7830 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d77a8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d77aa:	2008      	movs	r0, #8
   d77ac:	f7fc fc75 	bl	d409a <_Znwj>
   d77b0:	4604      	mov	r4, r0
   d77b2:	b128      	cbz	r0, d77c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77b4:	9b03      	ldr	r3, [sp, #12]
   d77b6:	f840 3b04 	str.w	r3, [r0], #4
   d77ba:	a904      	add	r1, sp, #16
   d77bc:	f7ff fc40 	bl	d7040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d77c0:	9500      	str	r5, [sp, #0]
   d77c2:	fa5f f38a 	uxtb.w	r3, sl
   d77c6:	464a      	mov	r2, r9
   d77c8:	4641      	mov	r1, r8
   d77ca:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d77cc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d77ce:	f7ff f87b 	bl	d68c8 <spark_send_event>
   d77d2:	b920      	cbnz	r0, d77de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d77d4:	9b03      	ldr	r3, [sp, #12]
   d77d6:	785b      	ldrb	r3, [r3, #1]
   d77d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d77dc:	b183      	cbz	r3, d7800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d77de:	9b03      	ldr	r3, [sp, #12]
   d77e0:	9305      	str	r3, [sp, #20]
   d77e2:	a904      	add	r1, sp, #16
   d77e4:	a806      	add	r0, sp, #24
   d77e6:	f7ff fc2b 	bl	d7040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d77ea:	a905      	add	r1, sp, #20
   d77ec:	4630      	mov	r0, r6
   d77ee:	f7ff fe99 	bl	d7524 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77f2:	a806      	add	r0, sp, #24
   d77f4:	f7ff fc2b 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77f8:	a804      	add	r0, sp, #16
   d77fa:	f7ff fc28 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77fe:	e013      	b.n	d7828 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7800:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7804:	a905      	add	r1, sp, #20
   d7806:	a803      	add	r0, sp, #12
   d7808:	9205      	str	r2, [sp, #20]
   d780a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d780e:	f7ff fefd 	bl	d760c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7812:	a805      	add	r0, sp, #20
   d7814:	f7ff fe5c 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7818:	a805      	add	r0, sp, #20
   d781a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d781c:	f7ff fe93 	bl	d7546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7820:	a806      	add	r0, sp, #24
   d7822:	f7ff fc14 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7826:	e7da      	b.n	d77de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7828:	4630      	mov	r0, r6
   d782a:	b00b      	add	sp, #44	; 0x2c
   d782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7830:	000d79a5 	.word	0x000d79a5

000d7834 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7834:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7838:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d783a:	d006      	beq.n	d784a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d783c:	2a03      	cmp	r2, #3
   d783e:	d017      	beq.n	d7870 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7840:	2a01      	cmp	r2, #1
   d7842:	d122      	bne.n	d788a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7844:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7846:	6003      	str	r3, [r0, #0]
	      break;
   d7848:	e01f      	b.n	d788a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d784a:	2018      	movs	r0, #24
   d784c:	680e      	ldr	r6, [r1, #0]
   d784e:	f7fc fc24 	bl	d409a <_Znwj>
   d7852:	4605      	mov	r5, r0
   d7854:	b150      	cbz	r0, d786c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7856:	4631      	mov	r1, r6
   d7858:	f7ff fec8 	bl	d75ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d785c:	6930      	ldr	r0, [r6, #16]
   d785e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7862:	b108      	cbz	r0, d7868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7864:	f002 f85c 	bl	d9920 <strdup>
   d7868:	6128      	str	r0, [r5, #16]
   d786a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d786c:	6025      	str	r5, [r4, #0]
   d786e:	e00c      	b.n	d788a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7870:	6804      	ldr	r4, [r0, #0]
   d7872:	b154      	cbz	r4, d788a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7874:	f104 0010 	add.w	r0, r4, #16
   d7878:	f7ff fe2a 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d787c:	4620      	mov	r0, r4
   d787e:	f7fe fa83 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7882:	2118      	movs	r1, #24
   d7884:	4620      	mov	r0, r4
   d7886:	f000 ffdf 	bl	d8848 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d788a:	2000      	movs	r0, #0
   d788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d788e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d788e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7890:	2300      	movs	r3, #0
   d7892:	6083      	str	r3, [r0, #8]
   d7894:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7896:	4604      	mov	r4, r0
   d7898:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d789a:	b12b      	cbz	r3, d78a8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d789c:	2202      	movs	r2, #2
   d789e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d78a0:	68eb      	ldr	r3, [r5, #12]
   d78a2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d78a4:	68ab      	ldr	r3, [r5, #8]
   d78a6:	60a3      	str	r3, [r4, #8]
	}
    }
   d78a8:	4620      	mov	r0, r4
   d78aa:	bd38      	pop	{r3, r4, r5, pc}

000d78ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d78ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d78ae:	b570      	push	{r4, r5, r6, lr}
   d78b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d78b2:	d006      	beq.n	d78c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d78b4:	2a03      	cmp	r2, #3
   d78b6:	d011      	beq.n	d78dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d78b8:	2a01      	cmp	r2, #1
   d78ba:	d118      	bne.n	d78ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d78bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d78be:	6003      	str	r3, [r0, #0]
	      break;
   d78c0:	e015      	b.n	d78ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d78c2:	2014      	movs	r0, #20
   d78c4:	680e      	ldr	r6, [r1, #0]
   d78c6:	f7fc fbe8 	bl	d409a <_Znwj>
   d78ca:	4605      	mov	r5, r0
   d78cc:	b120      	cbz	r0, d78d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d78ce:	4631      	mov	r1, r6
   d78d0:	f7ff ffdd 	bl	d788e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d78d4:	7c33      	ldrb	r3, [r6, #16]
   d78d6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d78d8:	6025      	str	r5, [r4, #0]
   d78da:	e008      	b.n	d78ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d78dc:	6804      	ldr	r4, [r0, #0]
   d78de:	b134      	cbz	r4, d78ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78e0:	4620      	mov	r0, r4
   d78e2:	f7fe fa51 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d78e6:	2114      	movs	r1, #20
   d78e8:	4620      	mov	r0, r4
   d78ea:	f000 ffad 	bl	d8848 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d78ee:	2000      	movs	r0, #0
   d78f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d78f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d78f4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d78f6:	2300      	movs	r3, #0
   d78f8:	b087      	sub	sp, #28
   d78fa:	460c      	mov	r4, r1
   d78fc:	f3bf 8f5f 	dmb	sy
   d7900:	e850 6f00 	ldrex	r6, [r0]
   d7904:	e840 3200 	strex	r2, r3, [r0]
   d7908:	2a00      	cmp	r2, #0
   d790a:	d1f9      	bne.n	d7900 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d790c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7910:	2e00      	cmp	r6, #0
   d7912:	d03f      	beq.n	d7994 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7914:	4618      	mov	r0, r3
   d7916:	f7fe ff43 	bl	d67a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d791a:	4607      	mov	r7, r0
   d791c:	b120      	cbz	r0, d7928 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d791e:	4621      	mov	r1, r4
   d7920:	4630      	mov	r0, r6
   d7922:	f7ff fe53 	bl	d75cc <_ZNKSt8functionIFvRKbEEclES1_>
   d7926:	e02e      	b.n	d7986 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7928:	4631      	mov	r1, r6
   d792a:	a801      	add	r0, sp, #4
   d792c:	f7ff ffaf 	bl	d788e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7930:	7823      	ldrb	r3, [r4, #0]
   d7932:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7936:	2010      	movs	r0, #16
   d7938:	f7fc fbaf 	bl	d409a <_Znwj>
   d793c:	4605      	mov	r5, r0
   d793e:	b1d0      	cbz	r0, d7976 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7940:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7942:	2014      	movs	r0, #20
   d7944:	f7fc fba9 	bl	d409a <_Znwj>
   d7948:	4604      	mov	r4, r0
   d794a:	b178      	cbz	r0, d796c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d794c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d794e:	4601      	mov	r1, r0
   d7950:	a801      	add	r0, sp, #4
   d7952:	f7ff fcf8 	bl	d7346 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7956:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7958:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d795a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d795c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d795e:	9203      	str	r2, [sp, #12]
   d7960:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7962:	60e3      	str	r3, [r4, #12]
   d7964:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7968:	9204      	str	r2, [sp, #16]
   d796a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d796c:	4b0a      	ldr	r3, [pc, #40]	; (d7998 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d796e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7970:	4b0a      	ldr	r3, [pc, #40]	; (d799c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7972:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7974:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7976:	a801      	add	r0, sp, #4
   d7978:	f7fe fa06 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d797c:	2200      	movs	r2, #0
   d797e:	4629      	mov	r1, r5
   d7980:	4807      	ldr	r0, [pc, #28]	; (d79a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7982:	f7fe ff15 	bl	d67b0 <application_thread_invoke>
   d7986:	4630      	mov	r0, r6
   d7988:	f7fe f9fe 	bl	d5d88 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d798c:	2110      	movs	r1, #16
   d798e:	4630      	mov	r0, r6
   d7990:	f000 ff5a 	bl	d8848 <_ZdlPvj>
        }
    }
   d7994:	b007      	add	sp, #28
   d7996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7998:	000d75df 	.word	0x000d75df
   d799c:	000d78ad 	.word	0x000d78ad
   d79a0:	000d7d5d 	.word	0x000d7d5d

000d79a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d79a4:	b530      	push	{r4, r5, lr}
   d79a6:	b085      	sub	sp, #20
   d79a8:	4604      	mov	r4, r0
   d79aa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d79ac:	4668      	mov	r0, sp
   d79ae:	4611      	mov	r1, r2
   d79b0:	f7ff fdc9 	bl	d7546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d79b4:	b17c      	cbz	r4, d79d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d79b6:	b224      	sxth	r4, r4
   d79b8:	4628      	mov	r0, r5
   d79ba:	b10d      	cbz	r5, d79c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d79bc:	f001 ffb0 	bl	d9920 <strdup>
   d79c0:	9002      	str	r0, [sp, #8]
   d79c2:	a902      	add	r1, sp, #8
   d79c4:	4668      	mov	r0, sp
   d79c6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d79ca:	f7ff fe1f 	bl	d760c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d79ce:	a802      	add	r0, sp, #8
   d79d0:	f7ff fd7e 	bl	d74d0 <_ZN8particle5ErrorD1Ev>
   d79d4:	e01d      	b.n	d7a12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d79d6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d79d8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d79dc:	f04f 0201 	mov.w	r2, #1
   d79e0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d79e4:	42a3      	cmp	r3, r4
   d79e6:	d103      	bne.n	d79f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d79e8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d79ec:	2900      	cmp	r1, #0
   d79ee:	d1f7      	bne.n	d79e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d79f0:	d002      	beq.n	d79f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d79f2:	f88d 3008 	strb.w	r3, [sp, #8]
   d79f6:	e00c      	b.n	d7a12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d79f8:	f110 010c 	adds.w	r1, r0, #12
   d79fc:	f04f 0301 	mov.w	r3, #1
   d7a00:	bf18      	it	ne
   d7a02:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7a04:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7a08:	3004      	adds	r0, #4
   d7a0a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7a0e:	f7ff ff71 	bl	d78f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7a12:	a801      	add	r0, sp, #4
   d7a14:	f7ff fb1b 	bl	d704e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7a18:	b005      	add	sp, #20
   d7a1a:	bd30      	pop	{r4, r5, pc}

000d7a1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7a1c:	4770      	bx	lr

000d7a1e <_ZN9IPAddressD0Ev>:
   d7a1e:	b510      	push	{r4, lr}
   d7a20:	2118      	movs	r1, #24
   d7a22:	4604      	mov	r4, r0
   d7a24:	f000 ff10 	bl	d8848 <_ZdlPvj>
   d7a28:	4620      	mov	r0, r4
   d7a2a:	bd10      	pop	{r4, pc}

000d7a2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a2e:	7d03      	ldrb	r3, [r0, #20]
   d7a30:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a32:	b08d      	sub	sp, #52	; 0x34
   d7a34:	460e      	mov	r6, r1
   d7a36:	f100 0704 	add.w	r7, r0, #4
   d7a3a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a3e:	d002      	beq.n	d7a46 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7a40:	f100 0508 	add.w	r5, r0, #8
   d7a44:	e018      	b.n	d7a78 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a46:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a48:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a4a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a4e:	232f      	movs	r3, #47	; 0x2f
   d7a50:	462a      	mov	r2, r5
   d7a52:	200a      	movs	r0, #10
   d7a54:	f7fe fd6c 	bl	d6530 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7a58:	4628      	mov	r0, r5
   d7a5a:	f001 ff7c 	bl	d9956 <strlen>
   d7a5e:	6833      	ldr	r3, [r6, #0]
   d7a60:	4602      	mov	r2, r0
   d7a62:	68db      	ldr	r3, [r3, #12]
   d7a64:	4629      	mov	r1, r5
   d7a66:	4630      	mov	r0, r6
   d7a68:	4798      	blx	r3
   d7a6a:	e00f      	b.n	d7a8c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7a6c:	b124      	cbz	r4, d7a78 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7a6e:	212e      	movs	r1, #46	; 0x2e
   d7a70:	4630      	mov	r0, r6
   d7a72:	f7ff fb37 	bl	d70e4 <_ZN5Print5printEc>
   d7a76:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7a78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a7c:	220a      	movs	r2, #10
   d7a7e:	4630      	mov	r0, r6
   d7a80:	f7ff fb49 	bl	d7116 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a84:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a86:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a88:	d1f0      	bne.n	d7a6c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a8a:	4620      	mov	r0, r4
    }
    return n;
}
   d7a8c:	b00d      	add	sp, #52	; 0x34
   d7a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a90 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7a90:	b510      	push	{r4, lr}
   d7a92:	4b05      	ldr	r3, [pc, #20]	; (d7aa8 <_ZN9IPAddressC1Ev+0x18>)
   d7a94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a96:	2211      	movs	r2, #17
   d7a98:	f840 3b04 	str.w	r3, [r0], #4
   d7a9c:	2100      	movs	r1, #0
   d7a9e:	f001 feee 	bl	d987e <memset>
{
    clear();
}
   d7aa2:	4620      	mov	r0, r4
   d7aa4:	bd10      	pop	{r4, pc}
   d7aa6:	bf00      	nop
   d7aa8:	000dc64c 	.word	0x000dc64c

000d7aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7aac:	4603      	mov	r3, r0
   d7aae:	4a07      	ldr	r2, [pc, #28]	; (d7acc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7ab0:	b510      	push	{r4, lr}
   d7ab2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7ab6:	f101 0210 	add.w	r2, r1, #16
   d7aba:	f851 4b04 	ldr.w	r4, [r1], #4
   d7abe:	f843 4b04 	str.w	r4, [r3], #4
   d7ac2:	4291      	cmp	r1, r2
   d7ac4:	d1f9      	bne.n	d7aba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7ac6:	780a      	ldrb	r2, [r1, #0]
   d7ac8:	701a      	strb	r2, [r3, #0]
}
   d7aca:	bd10      	pop	{r4, pc}
   d7acc:	000dc64c 	.word	0x000dc64c

000d7ad0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7ad0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7ad2:	2b04      	cmp	r3, #4
   d7ad4:	d101      	bne.n	d7ada <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7ad6:	6840      	ldr	r0, [r0, #4]
   d7ad8:	e008      	b.n	d7aec <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7ada:	2b06      	cmp	r3, #6
   d7adc:	d10a      	bne.n	d7af4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7ade:	6843      	ldr	r3, [r0, #4]
   d7ae0:	b953      	cbnz	r3, d7af8 <_ZNK9IPAddresscvbEv+0x28>
   d7ae2:	6883      	ldr	r3, [r0, #8]
   d7ae4:	b943      	cbnz	r3, d7af8 <_ZNK9IPAddresscvbEv+0x28>
   d7ae6:	68c3      	ldr	r3, [r0, #12]
   d7ae8:	b933      	cbnz	r3, d7af8 <_ZNK9IPAddresscvbEv+0x28>
   d7aea:	6900      	ldr	r0, [r0, #16]
   d7aec:	3000      	adds	r0, #0
   d7aee:	bf18      	it	ne
   d7af0:	2001      	movne	r0, #1
   d7af2:	4770      	bx	lr
    } else {
        return false;
   d7af4:	2000      	movs	r0, #0
   d7af6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7af8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7afa:	4770      	bx	lr

000d7afc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7afc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7afe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7b02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7b06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7b0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7b0e:	2304      	movs	r3, #4
   d7b10:	6041      	str	r1, [r0, #4]
   d7b12:	7503      	strb	r3, [r0, #20]
   d7b14:	bd10      	pop	{r4, pc}
	...

000d7b18 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b1a:	4d04      	ldr	r5, [pc, #16]	; (d7b2c <_ZN9IPAddressC1Ehhhh+0x14>)
   d7b1c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7b1e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7b22:	9500      	str	r5, [sp, #0]
   d7b24:	f7ff ffea 	bl	d7afc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7b28:	b003      	add	sp, #12
   d7b2a:	bd30      	pop	{r4, r5, pc}
   d7b2c:	000dc64c 	.word	0x000dc64c

000d7b30 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7b32:	780d      	ldrb	r5, [r1, #0]
   d7b34:	788b      	ldrb	r3, [r1, #2]
   d7b36:	784a      	ldrb	r2, [r1, #1]
   d7b38:	78c9      	ldrb	r1, [r1, #3]
   d7b3a:	9100      	str	r1, [sp, #0]
   d7b3c:	4629      	mov	r1, r5
   d7b3e:	f7ff ffdd 	bl	d7afc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7b42:	b003      	add	sp, #12
   d7b44:	bd30      	pop	{r4, r5, pc}

000d7b46 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b46:	7441      	strb	r1, [r0, #17]
   d7b48:	4770      	bx	lr

000d7b4a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b4a:	4770      	bx	lr

000d7b4c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7b4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b4e:	2100      	movs	r1, #0
   d7b50:	7c00      	ldrb	r0, [r0, #16]
   d7b52:	f7fe fded 	bl	d6730 <HAL_USB_USART_Receive_Data>
}
   d7b56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b5a:	bf28      	it	cs
   d7b5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b60:	bd08      	pop	{r3, pc}

000d7b62 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7b62:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b64:	2101      	movs	r1, #1
   d7b66:	7c00      	ldrb	r0, [r0, #16]
   d7b68:	f7fe fde2 	bl	d6730 <HAL_USB_USART_Receive_Data>
}
   d7b6c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b70:	bf28      	it	cs
   d7b72:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b76:	bd08      	pop	{r3, pc}

000d7b78 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7b78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b7a:	7c00      	ldrb	r0, [r0, #16]
   d7b7c:	f7fe fdd0 	bl	d6720 <HAL_USB_USART_Available_Data_For_Write>
}
   d7b80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b84:	bd08      	pop	{r3, pc}

000d7b86 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7b86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b88:	7c00      	ldrb	r0, [r0, #16]
   d7b8a:	f7fe fdc1 	bl	d6710 <HAL_USB_USART_Available_Data>
}
   d7b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b92:	bd08      	pop	{r3, pc}

000d7b94 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7b94:	7c00      	ldrb	r0, [r0, #16]
   d7b96:	f7fe bddb 	b.w	d6750 <HAL_USB_USART_Flush_Data>

000d7b9a <_ZN9USBSerialD0Ev>:
   d7b9a:	b510      	push	{r4, lr}
   d7b9c:	2114      	movs	r1, #20
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	f000 fe52 	bl	d8848 <_ZdlPvj>
   d7ba4:	4620      	mov	r0, r4
   d7ba6:	bd10      	pop	{r4, pc}

000d7ba8 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ba8:	b538      	push	{r3, r4, r5, lr}
   d7baa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7bac:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7bae:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7bb0:	f7fe fdb6 	bl	d6720 <HAL_USB_USART_Available_Data_For_Write>
   d7bb4:	2800      	cmp	r0, #0
   d7bb6:	dc01      	bgt.n	d7bbc <_ZN9USBSerial5writeEh+0x14>
   d7bb8:	7c60      	ldrb	r0, [r4, #17]
   d7bba:	b128      	cbz	r0, d7bc8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7bbc:	4629      	mov	r1, r5
   d7bbe:	7c20      	ldrb	r0, [r4, #16]
   d7bc0:	f7fe fdbe 	bl	d6740 <HAL_USB_USART_Send_Data>
   d7bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7bc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7bcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7bcc:	b510      	push	{r4, lr}
   d7bce:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7bd0:	2300      	movs	r3, #0
   d7bd2:	6063      	str	r3, [r4, #4]
   d7bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7bd8:	60a3      	str	r3, [r4, #8]
   d7bda:	4b05      	ldr	r3, [pc, #20]	; (d7bf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bdc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7bde:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7be0:	4608      	mov	r0, r1
{
  _serial = serial;
   d7be2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7be4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7be6:	4611      	mov	r1, r2
   d7be8:	f7fe fd82 	bl	d66f0 <HAL_USB_USART_Init>
}
   d7bec:	4620      	mov	r0, r4
   d7bee:	bd10      	pop	{r4, pc}
   d7bf0:	000dc660 	.word	0x000dc660

000d7bf4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7bf4:	2200      	movs	r2, #0
   d7bf6:	7c00      	ldrb	r0, [r0, #16]
   d7bf8:	f7fe bd82 	b.w	d6700 <HAL_USB_USART_Begin>

000d7bfc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7bfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7bfe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c00:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7c02:	2100      	movs	r1, #0
   d7c04:	f001 fe3b 	bl	d987e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7c08:	4620      	mov	r0, r4
   d7c0a:	bd10      	pop	{r4, pc}

000d7c0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7c0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c0e:	4d0e      	ldr	r5, [pc, #56]	; (d7c48 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7c10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7c12:	a801      	add	r0, sp, #4
   d7c14:	f7ff fff2 	bl	d7bfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c18:	6829      	ldr	r1, [r5, #0]
   d7c1a:	f011 0401 	ands.w	r4, r1, #1
   d7c1e:	d110      	bne.n	d7c42 <_Z16_fetch_usbserialv+0x36>
   d7c20:	4628      	mov	r0, r5
   d7c22:	f7fc fa42 	bl	d40aa <__cxa_guard_acquire>
   d7c26:	b160      	cbz	r0, d7c42 <_Z16_fetch_usbserialv+0x36>
   d7c28:	aa01      	add	r2, sp, #4
   d7c2a:	4621      	mov	r1, r4
   d7c2c:	4807      	ldr	r0, [pc, #28]	; (d7c4c <_Z16_fetch_usbserialv+0x40>)
   d7c2e:	f7ff ffcd 	bl	d7bcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c32:	4628      	mov	r0, r5
   d7c34:	f7fc fa3e 	bl	d40b4 <__cxa_guard_release>
   d7c38:	4a05      	ldr	r2, [pc, #20]	; (d7c50 <_Z16_fetch_usbserialv+0x44>)
   d7c3a:	4906      	ldr	r1, [pc, #24]	; (d7c54 <_Z16_fetch_usbserialv+0x48>)
   d7c3c:	4803      	ldr	r0, [pc, #12]	; (d7c4c <_Z16_fetch_usbserialv+0x40>)
   d7c3e:	f000 fdf5 	bl	d882c <__aeabi_atexit>
	return _usbserial;
}
   d7c42:	4802      	ldr	r0, [pc, #8]	; (d7c4c <_Z16_fetch_usbserialv+0x40>)
   d7c44:	b007      	add	sp, #28
   d7c46:	bd30      	pop	{r4, r5, pc}
   d7c48:	2003e3dc 	.word	0x2003e3dc
   d7c4c:	2003e3e0 	.word	0x2003e3e0
   d7c50:	2003e11c 	.word	0x2003e11c
   d7c54:	000d7b4b 	.word	0x000d7b4b

000d7c58 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7c58:	4770      	bx	lr

000d7c5a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c5a:	7441      	strb	r1, [r0, #17]
   d7c5c:	4770      	bx	lr

000d7c5e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7c5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7c60:	7c00      	ldrb	r0, [r0, #16]
   d7c62:	f7fe fcbd 	bl	d65e0 <HAL_USART_Available_Data_For_Write>
}
   d7c66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c6a:	bd08      	pop	{r3, pc}

000d7c6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7c6e:	7c00      	ldrb	r0, [r0, #16]
   d7c70:	f7fe fc8e 	bl	d6590 <HAL_USART_Available_Data>
}
   d7c74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c78:	bd08      	pop	{r3, pc}

000d7c7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7c7c:	7c00      	ldrb	r0, [r0, #16]
   d7c7e:	f7fe fc97 	bl	d65b0 <HAL_USART_Peek_Data>
}
   d7c82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c86:	bf28      	it	cs
   d7c88:	f04f 30ff 	movcs.w	r0, #4294967295
   d7c8c:	bd08      	pop	{r3, pc}

000d7c8e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7c90:	7c00      	ldrb	r0, [r0, #16]
   d7c92:	f7fe fc85 	bl	d65a0 <HAL_USART_Read_Data>
}
   d7c96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c9a:	bf28      	it	cs
   d7c9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ca0:	bd08      	pop	{r3, pc}

000d7ca2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7ca2:	7c00      	ldrb	r0, [r0, #16]
   d7ca4:	f7fe bc8c 	b.w	d65c0 <HAL_USART_Flush_Data>

000d7ca8 <_ZN11USARTSerialD0Ev>:
   d7ca8:	b510      	push	{r4, lr}
   d7caa:	2114      	movs	r1, #20
   d7cac:	4604      	mov	r4, r0
   d7cae:	f000 fdcb 	bl	d8848 <_ZdlPvj>
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	bd10      	pop	{r4, pc}

000d7cb6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7cb6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7cb8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7cba:	4604      	mov	r4, r0
   d7cbc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7cbe:	b925      	cbnz	r5, d7cca <_ZN11USARTSerial5writeEh+0x14>
   d7cc0:	7c00      	ldrb	r0, [r0, #16]
   d7cc2:	f7fe fc8d 	bl	d65e0 <HAL_USART_Available_Data_For_Write>
   d7cc6:	2800      	cmp	r0, #0
   d7cc8:	dd05      	ble.n	d7cd6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7cca:	4631      	mov	r1, r6
   d7ccc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7cd2:	f7fe bc55 	b.w	d6580 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7cd6:	4628      	mov	r0, r5
   d7cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7cdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7cdc:	b510      	push	{r4, lr}
   d7cde:	4604      	mov	r4, r0
   d7ce0:	4608      	mov	r0, r1
   d7ce2:	4611      	mov	r1, r2
   d7ce4:	2200      	movs	r2, #0
   d7ce6:	6062      	str	r2, [r4, #4]
   d7ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7cec:	60a2      	str	r2, [r4, #8]
   d7cee:	4a05      	ldr	r2, [pc, #20]	; (d7d04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7cf0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7cf2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7cf4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7cf6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7cf8:	461a      	mov	r2, r3
   d7cfa:	f7fe fc39 	bl	d6570 <HAL_USART_Init>
}
   d7cfe:	4620      	mov	r0, r4
   d7d00:	bd10      	pop	{r4, pc}
   d7d02:	bf00      	nop
   d7d04:	000dc690 	.word	0x000dc690

000d7d08 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7d08:	7c00      	ldrb	r0, [r0, #16]
   d7d0a:	f7fe bc61 	b.w	d65d0 <HAL_USART_Is_Enabled>
	...

000d7d10 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7d10:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d12:	4d0c      	ldr	r5, [pc, #48]	; (d7d44 <_Z22__fetch_global_Serial1v+0x34>)
   d7d14:	6829      	ldr	r1, [r5, #0]
   d7d16:	f011 0401 	ands.w	r4, r1, #1
   d7d1a:	d111      	bne.n	d7d40 <_Z22__fetch_global_Serial1v+0x30>
   d7d1c:	4628      	mov	r0, r5
   d7d1e:	f7fc f9c4 	bl	d40aa <__cxa_guard_acquire>
   d7d22:	b168      	cbz	r0, d7d40 <_Z22__fetch_global_Serial1v+0x30>
   d7d24:	4a08      	ldr	r2, [pc, #32]	; (d7d48 <_Z22__fetch_global_Serial1v+0x38>)
   d7d26:	4b09      	ldr	r3, [pc, #36]	; (d7d4c <_Z22__fetch_global_Serial1v+0x3c>)
   d7d28:	4809      	ldr	r0, [pc, #36]	; (d7d50 <_Z22__fetch_global_Serial1v+0x40>)
   d7d2a:	4621      	mov	r1, r4
   d7d2c:	f7ff ffd6 	bl	d7cdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7d30:	4628      	mov	r0, r5
   d7d32:	f7fc f9bf 	bl	d40b4 <__cxa_guard_release>
   d7d36:	4a07      	ldr	r2, [pc, #28]	; (d7d54 <_Z22__fetch_global_Serial1v+0x44>)
   d7d38:	4907      	ldr	r1, [pc, #28]	; (d7d58 <_Z22__fetch_global_Serial1v+0x48>)
   d7d3a:	4805      	ldr	r0, [pc, #20]	; (d7d50 <_Z22__fetch_global_Serial1v+0x40>)
   d7d3c:	f000 fd76 	bl	d882c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7d40:	4803      	ldr	r0, [pc, #12]	; (d7d50 <_Z22__fetch_global_Serial1v+0x40>)
   d7d42:	bd38      	pop	{r3, r4, r5, pc}
   d7d44:	2003e48c 	.word	0x2003e48c
   d7d48:	2003e490 	.word	0x2003e490
   d7d4c:	2003e408 	.word	0x2003e408
   d7d50:	2003e3f4 	.word	0x2003e3f4
   d7d54:	2003e11c 	.word	0x2003e11c
   d7d58:	000d7c59 	.word	0x000d7c59

000d7d5c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7d5c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7d5e:	6883      	ldr	r3, [r0, #8]
   d7d60:	4604      	mov	r4, r0
   d7d62:	b90b      	cbnz	r3, d7d68 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7d64:	f000 fe3c 	bl	d89e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d68:	68c3      	ldr	r3, [r0, #12]
   d7d6a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d6c:	68a3      	ldr	r3, [r4, #8]
   d7d6e:	b11b      	cbz	r3, d7d78 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d70:	2203      	movs	r2, #3
   d7d72:	4621      	mov	r1, r4
   d7d74:	4620      	mov	r0, r4
   d7d76:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7d78:	4620      	mov	r0, r4
   d7d7a:	2110      	movs	r1, #16
}
   d7d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7d80:	f000 bd62 	b.w	d8848 <_ZdlPvj>

000d7d84 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7d84:	4770      	bx	lr

000d7d86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d88:	4606      	mov	r6, r0
   d7d8a:	4615      	mov	r5, r2
   d7d8c:	460c      	mov	r4, r1
   d7d8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7d90:	42bc      	cmp	r4, r7
   d7d92:	d006      	beq.n	d7da2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7d94:	6833      	ldr	r3, [r6, #0]
   d7d96:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7d9a:	689b      	ldr	r3, [r3, #8]
   d7d9c:	4630      	mov	r0, r6
   d7d9e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7da0:	e7f6      	b.n	d7d90 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7da2:	4628      	mov	r0, r5
   d7da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7da6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7da6:	2200      	movs	r2, #0
   d7da8:	7c00      	ldrb	r0, [r0, #16]
   d7daa:	f7fe bc21 	b.w	d65f0 <HAL_I2C_Write_Data>

000d7dae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7dae:	2100      	movs	r1, #0
   d7db0:	7c00      	ldrb	r0, [r0, #16]
   d7db2:	f7fe bc25 	b.w	d6600 <HAL_I2C_Available_Data>

000d7db6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7db6:	2100      	movs	r1, #0
   d7db8:	7c00      	ldrb	r0, [r0, #16]
   d7dba:	f7fe bc29 	b.w	d6610 <HAL_I2C_Read_Data>

000d7dbe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7dbe:	2100      	movs	r1, #0
   d7dc0:	7c00      	ldrb	r0, [r0, #16]
   d7dc2:	f7fe bc2d 	b.w	d6620 <HAL_I2C_Peek_Data>

000d7dc6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7dc6:	2100      	movs	r1, #0
   d7dc8:	7c00      	ldrb	r0, [r0, #16]
   d7dca:	f7fe bc31 	b.w	d6630 <HAL_I2C_Flush_Data>

000d7dce <_ZN7TwoWireD0Ev>:
   d7dce:	b510      	push	{r4, lr}
   d7dd0:	2114      	movs	r1, #20
   d7dd2:	4604      	mov	r4, r0
   d7dd4:	f000 fd38 	bl	d8848 <_ZdlPvj>
   d7dd8:	4620      	mov	r0, r4
   d7dda:	bd10      	pop	{r4, pc}

000d7ddc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7ddc:	b510      	push	{r4, lr}
   d7dde:	4604      	mov	r4, r0
   d7de0:	2300      	movs	r3, #0
   d7de2:	6063      	str	r3, [r4, #4]
   d7de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7de8:	60a3      	str	r3, [r4, #8]
   d7dea:	4b04      	ldr	r3, [pc, #16]	; (d7dfc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7dec:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7dee:	4608      	mov	r0, r1
   d7df0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7df2:	4611      	mov	r1, r2
   d7df4:	f7fe fc2c 	bl	d6650 <HAL_I2C_Init>
}
   d7df8:	4620      	mov	r0, r4
   d7dfa:	bd10      	pop	{r4, pc}
   d7dfc:	000dc6c0 	.word	0x000dc6c0

000d7e00 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7e00:	2100      	movs	r1, #0
   d7e02:	7c00      	ldrb	r0, [r0, #16]
   d7e04:	f7fe bc1c 	b.w	d6640 <HAL_I2C_Is_Enabled>

000d7e08 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e08:	2200      	movs	r2, #0
   d7e0a:	4611      	mov	r1, r2
   d7e0c:	6840      	ldr	r0, [r0, #4]
   d7e0e:	f7fe bd2b 	b.w	d6868 <network_listening>

000d7e12 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7e12:	2200      	movs	r2, #0
   d7e14:	4611      	mov	r1, r2
   d7e16:	6840      	ldr	r0, [r0, #4]
   d7e18:	f7fe bd36 	b.w	d6888 <network_get_listen_timeout>

000d7e1c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7e1c:	2200      	movs	r2, #0
   d7e1e:	6840      	ldr	r0, [r0, #4]
   d7e20:	f7fe bd2a 	b.w	d6878 <network_set_listen_timeout>

000d7e24 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e24:	2200      	movs	r2, #0
   d7e26:	f081 0101 	eor.w	r1, r1, #1
   d7e2a:	6840      	ldr	r0, [r0, #4]
   d7e2c:	f7fe bd14 	b.w	d6858 <network_listen>

000d7e30 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7e30:	2300      	movs	r3, #0
   d7e32:	461a      	mov	r2, r3
   d7e34:	2101      	movs	r1, #1
   d7e36:	6840      	ldr	r0, [r0, #4]
   d7e38:	f7fe bd06 	b.w	d6848 <network_off>

000d7e3c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7e3c:	2300      	movs	r3, #0
   d7e3e:	461a      	mov	r2, r3
   d7e40:	4619      	mov	r1, r3
   d7e42:	6840      	ldr	r0, [r0, #4]
   d7e44:	f7fe bcf8 	b.w	d6838 <network_on>

000d7e48 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7e48:	2200      	movs	r2, #0
   d7e4a:	4611      	mov	r1, r2
   d7e4c:	6840      	ldr	r0, [r0, #4]
   d7e4e:	f7fe bcdb 	b.w	d6808 <network_connecting>

000d7e52 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e52:	2200      	movs	r2, #0
   d7e54:	2102      	movs	r1, #2
   d7e56:	6840      	ldr	r0, [r0, #4]
   d7e58:	f7fe bcde 	b.w	d6818 <network_disconnect>

000d7e5c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7e5c:	2300      	movs	r3, #0
   d7e5e:	461a      	mov	r2, r3
   d7e60:	6840      	ldr	r0, [r0, #4]
   d7e62:	f7fe bcc9 	b.w	d67f8 <network_connect>

000d7e66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7e66:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e68:	4605      	mov	r5, r0
   d7e6a:	b188      	cbz	r0, d7e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e6c:	6804      	ldr	r4, [r0, #0]
   d7e6e:	b14c      	cbz	r4, d7e84 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7e70:	68a3      	ldr	r3, [r4, #8]
   d7e72:	b11b      	cbz	r3, d7e7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e74:	2203      	movs	r2, #3
   d7e76:	4621      	mov	r1, r4
   d7e78:	4620      	mov	r0, r4
   d7e7a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e7c:	2110      	movs	r1, #16
   d7e7e:	4620      	mov	r0, r4
   d7e80:	f000 fce2 	bl	d8848 <_ZdlPvj>
   d7e84:	4628      	mov	r0, r5
   d7e86:	2114      	movs	r1, #20
      }
   d7e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e8c:	f000 bcdc 	b.w	d8848 <_ZdlPvj>
   d7e90:	bd38      	pop	{r3, r4, r5, pc}

000d7e92 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7e92:	b110      	cbz	r0, d7e9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7e94:	6803      	ldr	r3, [r0, #0]
   d7e96:	685b      	ldr	r3, [r3, #4]
   d7e98:	4718      	bx	r3
   d7e9a:	4770      	bx	lr

000d7e9c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7e9c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7e9e:	6803      	ldr	r3, [r0, #0]
   d7ea0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7ea2:	b1bb      	cbz	r3, d7ed4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7ea4:	6858      	ldr	r0, [r3, #4]
   d7ea6:	f7fe fb1b 	bl	d64e0 <os_thread_is_current>
   d7eaa:	b978      	cbnz	r0, d7ecc <_ZN6ThreadD1Ev+0x30>
   d7eac:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7eae:	7c5a      	ldrb	r2, [r3, #17]
   d7eb0:	b912      	cbnz	r2, d7eb8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7eb2:	6858      	ldr	r0, [r3, #4]
   d7eb4:	f7fe fb1c 	bl	d64f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7eb8:	6823      	ldr	r3, [r4, #0]
   d7eba:	6858      	ldr	r0, [r3, #4]
   d7ebc:	f7fe fb20 	bl	d6500 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ec0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7ec2:	2300      	movs	r3, #0
   d7ec4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7ec6:	b128      	cbz	r0, d7ed4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7ec8:	f7ff ffcd 	bl	d7e66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ecc:	6820      	ldr	r0, [r4, #0]
   d7ece:	b108      	cbz	r0, d7ed4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7ed0:	f7ff ffc9 	bl	d7e66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	bd10      	pop	{r4, pc}

000d7ed8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7ed8:	b538      	push	{r3, r4, r5, lr}
   d7eda:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7edc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7ee0:	b108      	cbz	r0, d7ee6 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7ee2:	f7fc f8e0 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7ee6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7eea:	b108      	cbz	r0, d7ef0 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7eec:	f7fe fb18 	bl	d6520 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ef0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7ef4:	b135      	cbz	r5, d7f04 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ef6:	4628      	mov	r0, r5
   d7ef8:	f7ff ffd0 	bl	d7e9c <_ZN6ThreadD1Ev>
   d7efc:	2104      	movs	r1, #4
   d7efe:	4628      	mov	r0, r5
   d7f00:	f000 fca2 	bl	d8848 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f04:	6820      	ldr	r0, [r4, #0]
   d7f06:	b108      	cbz	r0, d7f0c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7f08:	f7ff ffc3 	bl	d7e92 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7f0c:	4620      	mov	r0, r4
   d7f0e:	bd38      	pop	{r3, r4, r5, pc}

000d7f10 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7f10:	b510      	push	{r4, lr}
   d7f12:	4b04      	ldr	r3, [pc, #16]	; (d7f24 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7f14:	4604      	mov	r4, r0
   d7f16:	f840 3b08 	str.w	r3, [r0], #8
   d7f1a:	f7ff ffdd 	bl	d7ed8 <_ZN5spark11MeshPublishD1Ev>
   d7f1e:	4620      	mov	r0, r4
   d7f20:	bd10      	pop	{r4, pc}
   d7f22:	bf00      	nop
   d7f24:	000dc6e8 	.word	0x000dc6e8

000d7f28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7f28:	b538      	push	{r3, r4, r5, lr}
   d7f2a:	4c0e      	ldr	r4, [pc, #56]	; (d7f64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7f2c:	4b0e      	ldr	r3, [pc, #56]	; (d7f68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7f2e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7f30:	2500      	movs	r5, #0
   d7f32:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7f34:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7f38:	6063      	str	r3, [r4, #4]
   d7f3a:	60a5      	str	r5, [r4, #8]
   d7f3c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7f40:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7f44:	f7fe fae4 	bl	d6510 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7f48:	4b08      	ldr	r3, [pc, #32]	; (d7f6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7f4a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7f4e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7f52:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7f54:	4620      	mov	r0, r4
   d7f56:	4a06      	ldr	r2, [pc, #24]	; (d7f70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7f58:	4906      	ldr	r1, [pc, #24]	; (d7f74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7f5e:	f000 bc65 	b.w	d882c <__aeabi_atexit>
   d7f62:	bf00      	nop
   d7f64:	2003e514 	.word	0x2003e514
   d7f68:	000dc7d0 	.word	0x000dc7d0
   d7f6c:	000dc6e8 	.word	0x000dc6e8
   d7f70:	2003e11c 	.word	0x2003e11c
   d7f74:	000d7f11 	.word	0x000d7f11

000d7f78 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7f7a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7f7c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7f7e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7f82:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7f84:	2201      	movs	r2, #1
   d7f86:	f04f 33ff 	mov.w	r3, #4294967295
   d7f8a:	4621      	mov	r1, r4
   d7f8c:	47a8      	blx	r5
}
   d7f8e:	b003      	add	sp, #12
   d7f90:	bd30      	pop	{r4, r5, pc}

000d7f92 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7f92:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7f94:	6803      	ldr	r3, [r0, #0]
   d7f96:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7f98:	f04f 33ff 	mov.w	r3, #4294967295
   d7f9c:	46a4      	mov	ip, r4
}
   d7f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7fa2:	4760      	bx	ip

000d7fa4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7fa6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7fa8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7faa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7fae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7fb0:	4621      	mov	r1, r4
   d7fb2:	4613      	mov	r3, r2
   d7fb4:	2201      	movs	r2, #1
   d7fb6:	47a8      	blx	r5
}
   d7fb8:	b003      	add	sp, #12
   d7fba:	bd30      	pop	{r4, r5, pc}

000d7fbc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7fbc:	4770      	bx	lr

000d7fbe <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7fbe:	b538      	push	{r3, r4, r5, lr}
   d7fc0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7fc2:	681a      	ldr	r2, [r3, #0]
   d7fc4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7fc6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7fc8:	da05      	bge.n	d7fd6 <_ZN9TCPClient9connectedEv+0x18>
   d7fca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7fce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7fd2:	429a      	cmp	r2, r3
   d7fd4:	d001      	beq.n	d7fda <_ZN9TCPClient9connectedEv+0x1c>
   d7fd6:	2501      	movs	r5, #1
   d7fd8:	e00b      	b.n	d7ff2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7fda:	6803      	ldr	r3, [r0, #0]
   d7fdc:	691b      	ldr	r3, [r3, #16]
   d7fde:	4798      	blx	r3
   d7fe0:	2800      	cmp	r0, #0
   d7fe2:	bf14      	ite	ne
   d7fe4:	2501      	movne	r5, #1
   d7fe6:	2500      	moveq	r5, #0
        if (!rv) {
   d7fe8:	d103      	bne.n	d7ff2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7fea:	6823      	ldr	r3, [r4, #0]
   d7fec:	4620      	mov	r0, r4
   d7fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ff0:	4798      	blx	r3
        }
    }
    return rv;
}
   d7ff2:	4628      	mov	r0, r5
   d7ff4:	bd38      	pop	{r3, r4, r5, pc}

000d7ff6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7ff6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7ff8:	6818      	ldr	r0, [r3, #0]
}
   d7ffa:	43c0      	mvns	r0, r0
   d7ffc:	0fc0      	lsrs	r0, r0, #31
   d7ffe:	4770      	bx	lr

000d8000 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8000:	4770      	bx	lr

000d8002 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8002:	2000      	movs	r0, #0
   d8004:	4770      	bx	lr

000d8006 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8006:	b510      	push	{r4, lr}
   d8008:	2114      	movs	r1, #20
   d800a:	4604      	mov	r4, r0
   d800c:	f000 fc1c 	bl	d8848 <_ZdlPvj>
   d8010:	4620      	mov	r0, r4
   d8012:	bd10      	pop	{r4, pc}

000d8014 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d8014:	f7fc b845 	b.w	d40a2 <_ZdlPv>

000d8018 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d801a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d801c:	2200      	movs	r2, #0
   d801e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8020:	9202      	str	r2, [sp, #8]
   d8022:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8024:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8026:	4604      	mov	r4, r0
   d8028:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d802a:	d008      	beq.n	d803e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d802c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8030:	fbb3 f1f2 	udiv	r1, r3, r2
   d8034:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8036:	fb02 3111 	mls	r1, r2, r1, r3
   d803a:	434a      	muls	r2, r1
   d803c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d803e:	6960      	ldr	r0, [r4, #20]
   d8040:	2308      	movs	r3, #8
   d8042:	9300      	str	r3, [sp, #0]
   d8044:	f241 0205 	movw	r2, #4101	; 0x1005
   d8048:	446b      	add	r3, sp
   d804a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d804e:	6800      	ldr	r0, [r0, #0]
   d8050:	f7fe fb0e 	bl	d6670 <sock_setsockopt>
    if (ret < 0) {
   d8054:	2800      	cmp	r0, #0
   d8056:	db08      	blt.n	d806a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8058:	6960      	ldr	r0, [r4, #20]
   d805a:	2300      	movs	r3, #0
   d805c:	4632      	mov	r2, r6
   d805e:	4629      	mov	r1, r5
   d8060:	6800      	ldr	r0, [r0, #0]
   d8062:	f7fe fb2d 	bl	d66c0 <sock_send>
    if (ret < 0) {
   d8066:	2800      	cmp	r0, #0
   d8068:	da04      	bge.n	d8074 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d806a:	f7fe fc85 	bl	d6978 <__errno>
   d806e:	6803      	ldr	r3, [r0, #0]
   d8070:	6063      	str	r3, [r4, #4]
   d8072:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8074:	b004      	add	sp, #16
   d8076:	bd70      	pop	{r4, r5, r6, pc}

000d8078 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8078:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d807a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d807c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d807e:	689b      	ldr	r3, [r3, #8]
   d8080:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8082:	68a3      	ldr	r3, [r4, #8]
   d8084:	3b01      	subs	r3, #1
   d8086:	60a3      	str	r3, [r4, #8]
   d8088:	b92b      	cbnz	r3, d8096 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d808a:	6823      	ldr	r3, [r4, #0]
   d808c:	4620      	mov	r0, r4
   d808e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8094:	4718      	bx	r3
   d8096:	bd10      	pop	{r4, pc}

000d8098 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8098:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d809a:	4604      	mov	r4, r0
   d809c:	694d      	ldr	r5, [r1, #20]
   d809e:	4b05      	ldr	r3, [pc, #20]	; (d80b4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d80a0:	f844 3b04 	str.w	r3, [r4], #4
   d80a4:	358c      	adds	r5, #140	; 0x8c
   d80a6:	4606      	mov	r6, r0
   d80a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80ac:	682b      	ldr	r3, [r5, #0]
   d80ae:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d80b0:	4630      	mov	r0, r6
   d80b2:	bd70      	pop	{r4, r5, r6, pc}
   d80b4:	000dc64c 	.word	0x000dc64c

000d80b8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d80b8:	b510      	push	{r4, lr}
   d80ba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d80bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d80c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d80c4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d80c6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d80c8:	d005      	beq.n	d80d6 <_ZN9TCPClient4peekEv+0x1e>
   d80ca:	6962      	ldr	r2, [r4, #20]
   d80cc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d80d0:	4413      	add	r3, r2
   d80d2:	7918      	ldrb	r0, [r3, #4]
   d80d4:	bd10      	pop	{r4, pc}
   d80d6:	6803      	ldr	r3, [r0, #0]
   d80d8:	691b      	ldr	r3, [r3, #16]
   d80da:	4798      	blx	r3
   d80dc:	2800      	cmp	r0, #0
   d80de:	d1f4      	bne.n	d80ca <_ZN9TCPClient4peekEv+0x12>
   d80e0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d80e4:	bd10      	pop	{r4, pc}

000d80e6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d80e6:	b510      	push	{r4, lr}
   d80e8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d80ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d80ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d80f2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d80f4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d80f6:	d008      	beq.n	d810a <_ZN9TCPClient4readEv+0x24>
   d80f8:	6962      	ldr	r2, [r4, #20]
   d80fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d80fe:	1c59      	adds	r1, r3, #1
   d8100:	4413      	add	r3, r2
   d8102:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8106:	7918      	ldrb	r0, [r3, #4]
   d8108:	bd10      	pop	{r4, pc}
   d810a:	6803      	ldr	r3, [r0, #0]
   d810c:	691b      	ldr	r3, [r3, #16]
   d810e:	4798      	blx	r3
   d8110:	2800      	cmp	r0, #0
   d8112:	d1f1      	bne.n	d80f8 <_ZN9TCPClient4readEv+0x12>
   d8114:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8118:	bd10      	pop	{r4, pc}

000d811a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d811a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d811c:	6943      	ldr	r3, [r0, #20]
   d811e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8120:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8124:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8128:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d812a:	4605      	mov	r5, r0
   d812c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d812e:	d106      	bne.n	d813e <_ZN9TCPClient4readEPhj+0x24>
   d8130:	6803      	ldr	r3, [r0, #0]
   d8132:	691b      	ldr	r3, [r3, #16]
   d8134:	4798      	blx	r3
   d8136:	b910      	cbnz	r0, d813e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8138:	f04f 34ff 	mov.w	r4, #4294967295
   d813c:	e014      	b.n	d8168 <_ZN9TCPClient4readEPhj+0x4e>
   d813e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8140:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8144:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8148:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d814a:	42bc      	cmp	r4, r7
   d814c:	bf28      	it	cs
   d814e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8150:	4419      	add	r1, r3
   d8152:	4622      	mov	r2, r4
   d8154:	3104      	adds	r1, #4
   d8156:	4630      	mov	r0, r6
   d8158:	f001 fb86 	bl	d9868 <memcpy>
   d815c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d815e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8162:	4423      	add	r3, r4
   d8164:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8168:	4620      	mov	r0, r4
   d816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d816c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d816c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8170:	4698      	mov	r8, r3
    stop();
   d8172:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8174:	b093      	sub	sp, #76	; 0x4c
    stop();
   d8176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8178:	460d      	mov	r5, r1
   d817a:	4606      	mov	r6, r0
   d817c:	4617      	mov	r7, r2
    stop();
   d817e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8180:	ab12      	add	r3, sp, #72	; 0x48
   d8182:	2400      	movs	r4, #0
   d8184:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8188:	4622      	mov	r2, r4
   d818a:	4621      	mov	r1, r4
   d818c:	4628      	mov	r0, r5
   d818e:	f7fe f947 	bl	d6420 <netdb_getaddrinfo>
   d8192:	4681      	mov	r9, r0
   d8194:	2800      	cmp	r0, #0
   d8196:	d13d      	bne.n	d8214 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8198:	9b00      	ldr	r3, [sp, #0]
   d819a:	2b00      	cmp	r3, #0
   d819c:	d056      	beq.n	d824c <_ZN9TCPClient7connectEPKctm+0xe0>
   d819e:	695b      	ldr	r3, [r3, #20]
   d81a0:	2b00      	cmp	r3, #0
   d81a2:	d053      	beq.n	d824c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d81a4:	a806      	add	r0, sp, #24
   d81a6:	f7ff fc73 	bl	d7a90 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d81aa:	9b00      	ldr	r3, [sp, #0]
   d81ac:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d81ae:	7863      	ldrb	r3, [r4, #1]
   d81b0:	2b02      	cmp	r3, #2
   d81b2:	d101      	bne.n	d81b8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d81b4:	1d21      	adds	r1, r4, #4
   d81b6:	e013      	b.n	d81e0 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d81b8:	2b0a      	cmp	r3, #10
   d81ba:	d114      	bne.n	d81e6 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d81bc:	2211      	movs	r2, #17
   d81be:	4649      	mov	r1, r9
   d81c0:	a801      	add	r0, sp, #4
   d81c2:	f001 fb5c 	bl	d987e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d81c6:	68a3      	ldr	r3, [r4, #8]
   d81c8:	bb33      	cbnz	r3, d8218 <_ZN9TCPClient7connectEPKctm+0xac>
   d81ca:	68e3      	ldr	r3, [r4, #12]
   d81cc:	bb23      	cbnz	r3, d8218 <_ZN9TCPClient7connectEPKctm+0xac>
   d81ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d81d2:	6925      	ldr	r5, [r4, #16]
   d81d4:	f7fe f9b4 	bl	d6540 <inet_htonl>
   d81d8:	4285      	cmp	r5, r0
   d81da:	d11d      	bne.n	d8218 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d81dc:	f104 0114 	add.w	r1, r4, #20
   d81e0:	a806      	add	r0, sp, #24
   d81e2:	f7ff fca5 	bl	d7b30 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d81e6:	a806      	add	r0, sp, #24
   d81e8:	f7ff fc72 	bl	d7ad0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d81ec:	2800      	cmp	r0, #0
   d81ee:	d02d      	beq.n	d824c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d81f0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d81f2:	ad07      	add	r5, sp, #28
   d81f4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d81f8:	4b18      	ldr	r3, [pc, #96]	; (d825c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d81fa:	930c      	str	r3, [sp, #48]	; 0x30
   d81fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81fe:	ac0d      	add	r4, sp, #52	; 0x34
   d8200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8202:	682b      	ldr	r3, [r5, #0]
   d8204:	7023      	strb	r3, [r4, #0]
   d8206:	463a      	mov	r2, r7
   d8208:	4643      	mov	r3, r8
   d820a:	a90c      	add	r1, sp, #48	; 0x30
   d820c:	4630      	mov	r0, r6
   d820e:	47c8      	blx	r9
   d8210:	4681      	mov	r9, r0
   d8212:	e01b      	b.n	d824c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8214:	46a1      	mov	r9, r4
   d8216:	e019      	b.n	d824c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8218:	f104 0308 	add.w	r3, r4, #8
   d821c:	ad01      	add	r5, sp, #4
   d821e:	3418      	adds	r4, #24
   d8220:	6818      	ldr	r0, [r3, #0]
   d8222:	6859      	ldr	r1, [r3, #4]
   d8224:	462a      	mov	r2, r5
   d8226:	c203      	stmia	r2!, {r0, r1}
   d8228:	3308      	adds	r3, #8
   d822a:	42a3      	cmp	r3, r4
   d822c:	4615      	mov	r5, r2
   d822e:	d1f7      	bne.n	d8220 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d8230:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8232:	a901      	add	r1, sp, #4
   d8234:	a80c      	add	r0, sp, #48	; 0x30
   d8236:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8238:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d823c:	f7ff fc36 	bl	d7aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8242:	ac07      	add	r4, sp, #28
   d8244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8246:	682b      	ldr	r3, [r5, #0]
   d8248:	7023      	strb	r3, [r4, #0]
   d824a:	e7cc      	b.n	d81e6 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d824c:	9800      	ldr	r0, [sp, #0]
   d824e:	f7fe f8df 	bl	d6410 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d8252:	4648      	mov	r0, r9
   d8254:	b013      	add	sp, #76	; 0x4c
   d8256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d825a:	bf00      	nop
   d825c:	000dc64c 	.word	0x000dc64c

000d8260 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d8260:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8262:	2300      	movs	r3, #0
   d8264:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8268:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d826a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d826e:	4770      	bx	lr

000d8270 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8274:	461e      	mov	r6, r3
    stop();
   d8276:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8278:	460c      	mov	r4, r1
   d827a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d827e:	4605      	mov	r5, r0
   d8280:	4617      	mov	r7, r2
    stop();
   d8282:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8284:	7d23      	ldrb	r3, [r4, #20]
   d8286:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d828a:	2b04      	cmp	r3, #4
   d828c:	bf0c      	ite	eq
   d828e:	2002      	moveq	r0, #2
   d8290:	200a      	movne	r0, #10
   d8292:	2206      	movs	r2, #6
   d8294:	2101      	movs	r1, #1
   d8296:	f7fe fa23 	bl	d66e0 <sock_socket>
   d829a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d829e:	696b      	ldr	r3, [r5, #20]
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	2b00      	cmp	r3, #0
   d82a4:	db18      	blt.n	d82d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d82a6:	4628      	mov	r0, r5
   d82a8:	f7ff ffda 	bl	d8260 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d82ac:	b1d6      	cbz	r6, d82e4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d82ae:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d82b0:	a903      	add	r1, sp, #12
   d82b2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d82b4:	9303      	str	r3, [sp, #12]
   d82b6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d82ba:	f7fe f8e9 	bl	d6490 <if_index_to_name>
   d82be:	b958      	cbnz	r0, d82d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d82c0:	6968      	ldr	r0, [r5, #20]
   d82c2:	2306      	movs	r3, #6
   d82c4:	9300      	str	r3, [sp, #0]
   d82c6:	f241 020b 	movw	r2, #4107	; 0x100b
   d82ca:	ab03      	add	r3, sp, #12
   d82cc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d82d0:	6800      	ldr	r0, [r0, #0]
   d82d2:	f7fe f9cd 	bl	d6670 <sock_setsockopt>
   d82d6:	b128      	cbz	r0, d82e4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d82d8:	682b      	ldr	r3, [r5, #0]
   d82da:	4628      	mov	r0, r5
   d82dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d82de:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d82e0:	4798      	blx	r3
   d82e2:	e03b      	b.n	d835c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d82e4:	261c      	movs	r6, #28
   d82e6:	4632      	mov	r2, r6
   d82e8:	2100      	movs	r1, #0
   d82ea:	a803      	add	r0, sp, #12
   d82ec:	f001 fac7 	bl	d987e <memset>
    if (ip.version() == 4) {
   d82f0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d82f2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d82f6:	2b04      	cmp	r3, #4
   d82f8:	d10c      	bne.n	d8314 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d82fa:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d82fc:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d82fe:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8302:	f7fe f92d 	bl	d6560 <inet_htons>
   d8306:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d830a:	6860      	ldr	r0, [r4, #4]
   d830c:	f7fe f918 	bl	d6540 <inet_htonl>
   d8310:	9004      	str	r0, [sp, #16]
   d8312:	e013      	b.n	d833c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8314:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d8316:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8318:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d831c:	f7fe f920 	bl	d6560 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8320:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8322:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8326:	1d23      	adds	r3, r4, #4
   d8328:	f104 0714 	add.w	r7, r4, #20
   d832c:	6818      	ldr	r0, [r3, #0]
   d832e:	6859      	ldr	r1, [r3, #4]
   d8330:	4632      	mov	r2, r6
   d8332:	c203      	stmia	r2!, {r0, r1}
   d8334:	3308      	adds	r3, #8
   d8336:	42bb      	cmp	r3, r7
   d8338:	4616      	mov	r6, r2
   d833a:	d1f7      	bne.n	d832c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d833c:	696b      	ldr	r3, [r5, #20]
   d833e:	221c      	movs	r2, #28
   d8340:	a903      	add	r1, sp, #12
   d8342:	6818      	ldr	r0, [r3, #0]
   d8344:	f7fe f9a4 	bl	d6690 <sock_connect>
   d8348:	2800      	cmp	r0, #0
   d834a:	d1c5      	bne.n	d82d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d834c:	3404      	adds	r4, #4
   d834e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8350:	696d      	ldr	r5, [r5, #20]
   d8352:	358c      	adds	r5, #140	; 0x8c
   d8354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8356:	6823      	ldr	r3, [r4, #0]
   d8358:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d835a:	2401      	movs	r4, #1
}
   d835c:	4620      	mov	r0, r4
   d835e:	b00a      	add	sp, #40	; 0x28
   d8360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8364 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8364:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8366:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8368:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d836a:	6818      	ldr	r0, [r3, #0]
   d836c:	2800      	cmp	r0, #0
   d836e:	db01      	blt.n	d8374 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8370:	f7fe f986 	bl	d6680 <sock_close>
   d8374:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8376:	f04f 32ff 	mov.w	r2, #4294967295
   d837a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d837c:	6960      	ldr	r0, [r4, #20]
   d837e:	2211      	movs	r2, #17
   d8380:	2100      	movs	r1, #0
   d8382:	308c      	adds	r0, #140	; 0x8c
   d8384:	f001 fa7b 	bl	d987e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8388:	4620      	mov	r0, r4
}
   d838a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d838e:	f7ff bf67 	b.w	d8260 <_ZN9TCPClient12flush_bufferEv>
	...

000d8394 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8394:	b530      	push	{r4, r5, lr}
   d8396:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8398:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d839c:	b08b      	sub	sp, #44	; 0x2c
   d839e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d83a0:	b11b      	cbz	r3, d83aa <_ZN9TCPClient9availableEv+0x16>
   d83a2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d83a6:	429a      	cmp	r2, r3
   d83a8:	d040      	beq.n	d842c <_ZN9TCPClient9availableEv+0x98>
   d83aa:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d83ac:	6818      	ldr	r0, [r3, #0]
   d83ae:	2800      	cmp	r0, #0
   d83b0:	db3f      	blt.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d83b2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d83b6:	2d7f      	cmp	r5, #127	; 0x7f
   d83b8:	d83b      	bhi.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d83ba:	1d19      	adds	r1, r3, #4
   d83bc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d83c0:	2308      	movs	r3, #8
   d83c2:	4429      	add	r1, r5
   d83c4:	f7fe f96c 	bl	d66a0 <sock_recv>
            if (ret > 0) {
   d83c8:	2800      	cmp	r0, #0
   d83ca:	dd0c      	ble.n	d83e6 <_ZN9TCPClient9availableEv+0x52>
   d83cc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d83ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d83d2:	b90a      	cbnz	r2, d83d8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d83d4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d83d8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d83da:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d83de:	4418      	add	r0, r3
   d83e0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d83e4:	e025      	b.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d83e6:	f7fe fac7 	bl	d6978 <__errno>
   d83ea:	6803      	ldr	r3, [r0, #0]
   d83ec:	2b0b      	cmp	r3, #11
   d83ee:	d020      	beq.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
   d83f0:	f7fe fac2 	bl	d6978 <__errno>
   d83f4:	6803      	ldr	r3, [r0, #0]
   d83f6:	2b0b      	cmp	r3, #11
   d83f8:	d01b      	beq.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d83fa:	2320      	movs	r3, #32
   d83fc:	2500      	movs	r5, #0
   d83fe:	9302      	str	r3, [sp, #8]
   d8400:	9503      	str	r5, [sp, #12]
   d8402:	f7fe fab9 	bl	d6978 <__errno>
   d8406:	6803      	ldr	r3, [r0, #0]
   d8408:	9301      	str	r3, [sp, #4]
   d840a:	4b0e      	ldr	r3, [pc, #56]	; (d8444 <_ZN9TCPClient9availableEv+0xb0>)
   d840c:	9300      	str	r3, [sp, #0]
   d840e:	aa02      	add	r2, sp, #8
   d8410:	462b      	mov	r3, r5
   d8412:	490d      	ldr	r1, [pc, #52]	; (d8448 <_ZN9TCPClient9availableEv+0xb4>)
   d8414:	2032      	movs	r0, #50	; 0x32
   d8416:	f7fe f9a3 	bl	d6760 <log_message>
                    sock_close(d_->sock);
   d841a:	6963      	ldr	r3, [r4, #20]
   d841c:	6818      	ldr	r0, [r3, #0]
   d841e:	f7fe f92f 	bl	d6680 <sock_close>
   d8422:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8424:	f04f 32ff 	mov.w	r2, #4294967295
   d8428:	601a      	str	r2, [r3, #0]
   d842a:	e002      	b.n	d8432 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d842c:	f7ff ff18 	bl	d8260 <_ZN9TCPClient12flush_bufferEv>
   d8430:	e7bb      	b.n	d83aa <_ZN9TCPClient9availableEv+0x16>
   d8432:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8434:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8438:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d843c:	1a18      	subs	r0, r3, r0
}
   d843e:	b00b      	add	sp, #44	; 0x2c
   d8440:	bd30      	pop	{r4, r5, pc}
   d8442:	bf00      	nop
   d8444:	000dc783 	.word	0x000dc783
   d8448:	000dc77c 	.word	0x000dc77c

000d844c <_ZN9TCPClient6statusEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d844c:	6943      	ldr	r3, [r0, #20]
   d844e:	6818      	ldr	r0, [r3, #0]
}
   d8450:	43c0      	mvns	r0, r0
   d8452:	0fc0      	lsrs	r0, r0, #31
   d8454:	4770      	bx	lr

000d8456 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8456:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8458:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d845a:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d845c:	6001      	str	r1, [r0, #0]
   d845e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8462:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8466:	3088      	adds	r0, #136	; 0x88
   d8468:	f7ff fb12 	bl	d7a90 <_ZN9IPAddressC1Ev>
}
   d846c:	4620      	mov	r0, r4
   d846e:	bd10      	pop	{r4, pc}

000d8470 <_ZN9TCPClientC1Ei>:
   d8470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8474:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8476:	2300      	movs	r3, #0
   d8478:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d847a:	4a14      	ldr	r2, [pc, #80]	; (d84cc <_ZN9TCPClientC1Ei+0x5c>)
   d847c:	6043      	str	r3, [r0, #4]
   d847e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8480:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8482:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8484:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8486:	20a0      	movs	r0, #160	; 0xa0
   d8488:	460e      	mov	r6, r1
   d848a:	f7fb fe06 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d848e:	4605      	mov	r5, r0
   d8490:	b110      	cbz	r0, d8498 <_ZN9TCPClientC1Ei+0x28>
   d8492:	4631      	mov	r1, r6
   d8494:	f7ff ffdf 	bl	d8456 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8498:	2014      	movs	r0, #20
   d849a:	f7fb fdfe 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d849e:	4603      	mov	r3, r0
   d84a0:	b128      	cbz	r0, d84ae <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d84a2:	2201      	movs	r2, #1
   d84a4:	6042      	str	r2, [r0, #4]
   d84a6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d84a8:	4a09      	ldr	r2, [pc, #36]	; (d84d0 <_ZN9TCPClientC1Ei+0x60>)
   d84aa:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d84ac:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d84ae:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d84b0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d84b2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d84b4:	b128      	cbz	r0, d84c2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d84b6:	6843      	ldr	r3, [r0, #4]
   d84b8:	3b01      	subs	r3, #1
   d84ba:	6043      	str	r3, [r0, #4]
   d84bc:	b90b      	cbnz	r3, d84c2 <_ZN9TCPClientC1Ei+0x52>
   d84be:	f7ff fddb 	bl	d8078 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d84c2:	4620      	mov	r0, r4
   d84c4:	f7ff fecc 	bl	d8260 <_ZN9TCPClient12flush_bufferEv>
}
   d84c8:	4620      	mov	r0, r4
   d84ca:	bd70      	pop	{r4, r5, r6, pc}
   d84cc:	000dc738 	.word	0x000dc738
   d84d0:	000dc71c 	.word	0x000dc71c

000d84d4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d84d4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d84d6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d84da:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d84dc:	f7ff ffc8 	bl	d8470 <_ZN9TCPClientC1Ei>
}
   d84e0:	4620      	mov	r0, r4
   d84e2:	bd10      	pop	{r4, pc}

000d84e4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d84e4:	b510      	push	{r4, lr}
   d84e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d84e8:	6800      	ldr	r0, [r0, #0]
   d84ea:	2800      	cmp	r0, #0
   d84ec:	db01      	blt.n	d84f2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d84ee:	f7fe f8c7 	bl	d6680 <sock_close>
    }
}
   d84f2:	4620      	mov	r0, r4
   d84f4:	bd10      	pop	{r4, pc}

000d84f6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d84f6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d84f8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d84fa:	4620      	mov	r0, r4
   d84fc:	f7ff fff2 	bl	d84e4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8500:	b124      	cbz	r4, d850c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8502:	4620      	mov	r0, r4
   d8504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8508:	f7fb bdcb 	b.w	d40a2 <_ZdlPv>
   d850c:	bd10      	pop	{r4, pc}

000d850e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d850e:	2200      	movs	r2, #0
   d8510:	4611      	mov	r1, r2
   d8512:	6840      	ldr	r0, [r0, #4]
   d8514:	f7fe b988 	b.w	d6828 <network_ready>

000d8518 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8518:	2200      	movs	r2, #0
   d851a:	4611      	mov	r1, r2
   d851c:	6840      	ldr	r0, [r0, #4]
   d851e:	f7fe b9a3 	b.w	d6868 <network_listening>

000d8522 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8522:	2200      	movs	r2, #0
   d8524:	4611      	mov	r1, r2
   d8526:	6840      	ldr	r0, [r0, #4]
   d8528:	f7fe b9ae 	b.w	d6888 <network_get_listen_timeout>

000d852c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d852c:	2200      	movs	r2, #0
   d852e:	6840      	ldr	r0, [r0, #4]
   d8530:	f7fe b9a2 	b.w	d6878 <network_set_listen_timeout>

000d8534 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8534:	2200      	movs	r2, #0
   d8536:	f081 0101 	eor.w	r1, r1, #1
   d853a:	6840      	ldr	r0, [r0, #4]
   d853c:	f7fe b98c 	b.w	d6858 <network_listen>

000d8540 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8540:	2300      	movs	r3, #0
   d8542:	461a      	mov	r2, r3
   d8544:	4619      	mov	r1, r3
   d8546:	6840      	ldr	r0, [r0, #4]
   d8548:	f7fe b97e 	b.w	d6848 <network_off>

000d854c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d854c:	2300      	movs	r3, #0
   d854e:	461a      	mov	r2, r3
   d8550:	4619      	mov	r1, r3
   d8552:	6840      	ldr	r0, [r0, #4]
   d8554:	f7fe b970 	b.w	d6838 <network_on>

000d8558 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8558:	2200      	movs	r2, #0
   d855a:	4611      	mov	r1, r2
   d855c:	6840      	ldr	r0, [r0, #4]
   d855e:	f7fe b953 	b.w	d6808 <network_connecting>

000d8562 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8562:	2200      	movs	r2, #0
   d8564:	2102      	movs	r1, #2
   d8566:	6840      	ldr	r0, [r0, #4]
   d8568:	f7fe b956 	b.w	d6818 <network_disconnect>

000d856c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d856c:	2300      	movs	r3, #0
   d856e:	461a      	mov	r2, r3
   d8570:	6840      	ldr	r0, [r0, #4]
   d8572:	f7fe b941 	b.w	d67f8 <network_connect>
	...

000d8578 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8578:	4b02      	ldr	r3, [pc, #8]	; (d8584 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d857a:	2204      	movs	r2, #4
   d857c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d857e:	4a02      	ldr	r2, [pc, #8]	; (d8588 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8580:	601a      	str	r2, [r3, #0]
   d8582:	4770      	bx	lr
   d8584:	2003e6e8 	.word	0x2003e6e8
   d8588:	000dc79c 	.word	0x000dc79c

000d858c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d858c:	2300      	movs	r3, #0
   d858e:	461a      	mov	r2, r3
   d8590:	6840      	ldr	r0, [r0, #4]
   d8592:	f7fe b931 	b.w	d67f8 <network_connect>

000d8596 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8596:	2200      	movs	r2, #0
   d8598:	2102      	movs	r1, #2
   d859a:	6840      	ldr	r0, [r0, #4]
   d859c:	f7fe b93c 	b.w	d6818 <network_disconnect>

000d85a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d85a0:	2200      	movs	r2, #0
   d85a2:	4611      	mov	r1, r2
   d85a4:	6840      	ldr	r0, [r0, #4]
   d85a6:	f7fe b92f 	b.w	d6808 <network_connecting>

000d85aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d85aa:	2200      	movs	r2, #0
   d85ac:	4611      	mov	r1, r2
   d85ae:	6840      	ldr	r0, [r0, #4]
   d85b0:	f7fe b93a 	b.w	d6828 <network_ready>

000d85b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d85b4:	2300      	movs	r3, #0
   d85b6:	461a      	mov	r2, r3
   d85b8:	4619      	mov	r1, r3
   d85ba:	6840      	ldr	r0, [r0, #4]
   d85bc:	f7fe b93c 	b.w	d6838 <network_on>

000d85c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d85c0:	2300      	movs	r3, #0
   d85c2:	461a      	mov	r2, r3
   d85c4:	4619      	mov	r1, r3
   d85c6:	6840      	ldr	r0, [r0, #4]
   d85c8:	f7fe b93e 	b.w	d6848 <network_off>

000d85cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d85cc:	2200      	movs	r2, #0
   d85ce:	f081 0101 	eor.w	r1, r1, #1
   d85d2:	6840      	ldr	r0, [r0, #4]
   d85d4:	f7fe b940 	b.w	d6858 <network_listen>

000d85d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d85d8:	2200      	movs	r2, #0
   d85da:	6840      	ldr	r0, [r0, #4]
   d85dc:	f7fe b94c 	b.w	d6878 <network_set_listen_timeout>

000d85e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d85e0:	2200      	movs	r2, #0
   d85e2:	4611      	mov	r1, r2
   d85e4:	6840      	ldr	r0, [r0, #4]
   d85e6:	f7fe b94f 	b.w	d6888 <network_get_listen_timeout>

000d85ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d85ea:	2200      	movs	r2, #0
   d85ec:	4611      	mov	r1, r2
   d85ee:	6840      	ldr	r0, [r0, #4]
   d85f0:	f7fe b93a 	b.w	d6868 <network_listening>

000d85f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d85f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d85f8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d85fa:	b095      	sub	sp, #84	; 0x54
   d85fc:	4616      	mov	r6, r2
   d85fe:	460d      	mov	r5, r1
   d8600:	4607      	mov	r7, r0
    IPAddress addr;
   d8602:	f7ff fa45 	bl	d7a90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8606:	4621      	mov	r1, r4
   d8608:	2220      	movs	r2, #32
   d860a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d860c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d860e:	f001 f936 	bl	d987e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8612:	2340      	movs	r3, #64	; 0x40
   d8614:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8616:	4621      	mov	r1, r4
   d8618:	466b      	mov	r3, sp
   d861a:	aa0c      	add	r2, sp, #48	; 0x30
   d861c:	4630      	mov	r0, r6
   d861e:	f7fd feff 	bl	d6420 <netdb_getaddrinfo>
    if (!r) {
   d8622:	4604      	mov	r4, r0
   d8624:	2800      	cmp	r0, #0
   d8626:	d144      	bne.n	d86b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8628:	4602      	mov	r2, r0
   d862a:	2101      	movs	r1, #1
   d862c:	6868      	ldr	r0, [r5, #4]
   d862e:	f7fe f8fb 	bl	d6828 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8632:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8634:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8636:	4622      	mov	r2, r4
   d8638:	6868      	ldr	r0, [r5, #4]
   d863a:	f7fe f8f5 	bl	d6828 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d863e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8640:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8642:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8644:	2e00      	cmp	r6, #0
   d8646:	d034      	beq.n	d86b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8648:	2900      	cmp	r1, #0
   d864a:	d132      	bne.n	d86b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d864c:	6873      	ldr	r3, [r6, #4]
   d864e:	2b02      	cmp	r3, #2
   d8650:	d002      	beq.n	d8658 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8652:	2b0a      	cmp	r3, #10
   d8654:	d009      	beq.n	d866a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8656:	e02a      	b.n	d86ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8658:	f1b8 0f00 	cmp.w	r8, #0
   d865c:	d027      	beq.n	d86ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d865e:	6971      	ldr	r1, [r6, #20]
   d8660:	4638      	mov	r0, r7
   d8662:	3104      	adds	r1, #4
   d8664:	f7ff fa64 	bl	d7b30 <_ZN9IPAddressaSEPKh>
   d8668:	e020      	b.n	d86ac <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d866a:	f1b9 0f00 	cmp.w	r9, #0
   d866e:	d01e      	beq.n	d86ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8670:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8672:	2211      	movs	r2, #17
   d8674:	a801      	add	r0, sp, #4
   d8676:	f001 f902 	bl	d987e <memset>
                    a.v = 6;
   d867a:	2306      	movs	r3, #6
   d867c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8680:	ad01      	add	r5, sp, #4
   d8682:	f104 0308 	add.w	r3, r4, #8
   d8686:	3418      	adds	r4, #24
   d8688:	6818      	ldr	r0, [r3, #0]
   d868a:	6859      	ldr	r1, [r3, #4]
   d868c:	462a      	mov	r2, r5
   d868e:	c203      	stmia	r2!, {r0, r1}
   d8690:	3308      	adds	r3, #8
   d8692:	42a3      	cmp	r3, r4
   d8694:	4615      	mov	r5, r2
   d8696:	d1f7      	bne.n	d8688 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8698:	a901      	add	r1, sp, #4
   d869a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d869c:	ad07      	add	r5, sp, #28
   d869e:	f7ff fa05 	bl	d7aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d86a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86a4:	1d3c      	adds	r4, r7, #4
   d86a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86a8:	682b      	ldr	r3, [r5, #0]
   d86aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d86ac:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86ae:	69f6      	ldr	r6, [r6, #28]
   d86b0:	e7c8      	b.n	d8644 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d86b2:	9800      	ldr	r0, [sp, #0]
   d86b4:	f7fd feac 	bl	d6410 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d86b8:	4638      	mov	r0, r7
   d86ba:	b015      	add	sp, #84	; 0x54
   d86bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d86c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d86c0:	4b02      	ldr	r3, [pc, #8]	; (d86cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d86c2:	4a03      	ldr	r2, [pc, #12]	; (d86d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d86c4:	601a      	str	r2, [r3, #0]
   d86c6:	2200      	movs	r2, #0
   d86c8:	605a      	str	r2, [r3, #4]
   d86ca:	4770      	bx	lr
   d86cc:	2003e6f0 	.word	0x2003e6f0
   d86d0:	000dc7d0 	.word	0x000dc7d0

000d86d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d86d4:	b510      	push	{r4, lr}
   d86d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d86d8:	f000 f848 	bl	d876c <_ZN8particle7globals11instanceSpiEv>
   d86dc:	f7fe f9a8 	bl	d6a30 <_ZN8SPIClass9isEnabledEv>
   d86e0:	b128      	cbz	r0, d86ee <pinAvailable+0x1a>
   d86e2:	f1a4 030b 	sub.w	r3, r4, #11
   d86e6:	2b02      	cmp	r3, #2
   d86e8:	d801      	bhi.n	d86ee <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d86ea:	2000      	movs	r0, #0
   d86ec:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d86ee:	f000 f877 	bl	d87e0 <_Z19__fetch_global_Wirev>
   d86f2:	f7ff fb85 	bl	d7e00 <_ZN7TwoWire9isEnabledEv>
   d86f6:	b108      	cbz	r0, d86fc <pinAvailable+0x28>
   d86f8:	2c01      	cmp	r4, #1
   d86fa:	d9f6      	bls.n	d86ea <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d86fc:	f7ff fb08 	bl	d7d10 <_Z22__fetch_global_Serial1v>
   d8700:	f7ff fb02 	bl	d7d08 <_ZN11USARTSerial9isEnabledEv>
   d8704:	b118      	cbz	r0, d870e <pinAvailable+0x3a>
   d8706:	f1a4 0309 	sub.w	r3, r4, #9
   d870a:	2b01      	cmp	r3, #1
   d870c:	d9ed      	bls.n	d86ea <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d870e:	2c23      	cmp	r4, #35	; 0x23
   d8710:	bf8c      	ite	hi
   d8712:	2000      	movhi	r0, #0
   d8714:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8716:	bd10      	pop	{r4, pc}

000d8718 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8718:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d871a:	b538      	push	{r3, r4, r5, lr}
   d871c:	4604      	mov	r4, r0
   d871e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8720:	d80a      	bhi.n	d8738 <pinMode+0x20>
   d8722:	29ff      	cmp	r1, #255	; 0xff
   d8724:	d008      	beq.n	d8738 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8726:	f7ff ffd5 	bl	d86d4 <pinAvailable>
   d872a:	b128      	cbz	r0, d8738 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d872c:	4629      	mov	r1, r5
   d872e:	4620      	mov	r0, r4
}
   d8730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8734:	f7fd be84 	b.w	d6440 <HAL_Pin_Mode>
   d8738:	bd38      	pop	{r3, r4, r5, pc}

000d873a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d873a:	b538      	push	{r3, r4, r5, lr}
   d873c:	4604      	mov	r4, r0
   d873e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8740:	f7fd fe86 	bl	d6450 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8744:	28ff      	cmp	r0, #255	; 0xff
   d8746:	d010      	beq.n	d876a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8748:	2806      	cmp	r0, #6
   d874a:	d804      	bhi.n	d8756 <digitalWrite+0x1c>
   d874c:	234d      	movs	r3, #77	; 0x4d
   d874e:	fa23 f000 	lsr.w	r0, r3, r0
   d8752:	07c3      	lsls	r3, r0, #31
   d8754:	d409      	bmi.n	d876a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8756:	4620      	mov	r0, r4
   d8758:	f7ff ffbc 	bl	d86d4 <pinAvailable>
   d875c:	b128      	cbz	r0, d876a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d875e:	4629      	mov	r1, r5
   d8760:	4620      	mov	r0, r4
}
   d8762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8766:	f7fd be7b 	b.w	d6460 <HAL_GPIO_Write>
   d876a:	bd38      	pop	{r3, r4, r5, pc}

000d876c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d876c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d876e:	4d0b      	ldr	r5, [pc, #44]	; (d879c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8770:	6829      	ldr	r1, [r5, #0]
   d8772:	f011 0401 	ands.w	r4, r1, #1
   d8776:	d10f      	bne.n	d8798 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8778:	4628      	mov	r0, r5
   d877a:	f7fb fc96 	bl	d40aa <__cxa_guard_acquire>
   d877e:	b158      	cbz	r0, d8798 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8780:	4621      	mov	r1, r4
   d8782:	4807      	ldr	r0, [pc, #28]	; (d87a0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8784:	f7fe f946 	bl	d6a14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8788:	4628      	mov	r0, r5
   d878a:	f7fb fc93 	bl	d40b4 <__cxa_guard_release>
   d878e:	4a05      	ldr	r2, [pc, #20]	; (d87a4 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d8790:	4905      	ldr	r1, [pc, #20]	; (d87a8 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d8792:	4803      	ldr	r0, [pc, #12]	; (d87a0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8794:	f000 f84a 	bl	d882c <__aeabi_atexit>
    return instance;
}
   d8798:	4801      	ldr	r0, [pc, #4]	; (d87a0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d879a:	bd38      	pop	{r3, r4, r5, pc}
   d879c:	2003e704 	.word	0x2003e704
   d87a0:	2003e6f8 	.word	0x2003e6f8
   d87a4:	2003e11c 	.word	0x2003e11c
   d87a8:	000d6a05 	.word	0x000d6a05

000d87ac <_Z17acquireWireBufferv>:
   d87ac:	b570      	push	{r4, r5, r6, lr}
   d87ae:	4604      	mov	r4, r0
   d87b0:	2514      	movs	r5, #20
   d87b2:	462a      	mov	r2, r5
   d87b4:	4e09      	ldr	r6, [pc, #36]	; (d87dc <_Z17acquireWireBufferv+0x30>)
   d87b6:	2100      	movs	r1, #0
   d87b8:	f001 f861 	bl	d987e <memset>
   d87bc:	8025      	strh	r5, [r4, #0]
   d87be:	2520      	movs	r5, #32
   d87c0:	4631      	mov	r1, r6
   d87c2:	60a5      	str	r5, [r4, #8]
   d87c4:	6125      	str	r5, [r4, #16]
   d87c6:	4628      	mov	r0, r5
   d87c8:	f000 f840 	bl	d884c <_ZnajRKSt9nothrow_t>
   d87cc:	4631      	mov	r1, r6
   d87ce:	6060      	str	r0, [r4, #4]
   d87d0:	4628      	mov	r0, r5
   d87d2:	f000 f83b 	bl	d884c <_ZnajRKSt9nothrow_t>
   d87d6:	60e0      	str	r0, [r4, #12]
   d87d8:	4620      	mov	r0, r4
   d87da:	bd70      	pop	{r4, r5, r6, pc}
   d87dc:	000dc7fc 	.word	0x000dc7fc

000d87e0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d87e0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87e2:	4d0e      	ldr	r5, [pc, #56]	; (d881c <_Z19__fetch_global_Wirev+0x3c>)
   d87e4:	6829      	ldr	r1, [r5, #0]
   d87e6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d87ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87ec:	d113      	bne.n	d8816 <_Z19__fetch_global_Wirev+0x36>
   d87ee:	4628      	mov	r0, r5
   d87f0:	f7fb fc5b 	bl	d40aa <__cxa_guard_acquire>
   d87f4:	b178      	cbz	r0, d8816 <_Z19__fetch_global_Wirev+0x36>
   d87f6:	a801      	add	r0, sp, #4
   d87f8:	f7ff ffd8 	bl	d87ac <_Z17acquireWireBufferv>
   d87fc:	aa01      	add	r2, sp, #4
   d87fe:	4621      	mov	r1, r4
   d8800:	4807      	ldr	r0, [pc, #28]	; (d8820 <_Z19__fetch_global_Wirev+0x40>)
   d8802:	f7ff faeb 	bl	d7ddc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8806:	4628      	mov	r0, r5
   d8808:	f7fb fc54 	bl	d40b4 <__cxa_guard_release>
   d880c:	4a05      	ldr	r2, [pc, #20]	; (d8824 <_Z19__fetch_global_Wirev+0x44>)
   d880e:	4906      	ldr	r1, [pc, #24]	; (d8828 <_Z19__fetch_global_Wirev+0x48>)
   d8810:	4803      	ldr	r0, [pc, #12]	; (d8820 <_Z19__fetch_global_Wirev+0x40>)
   d8812:	f000 f80b 	bl	d882c <__aeabi_atexit>
	return wire;
}
   d8816:	4802      	ldr	r0, [pc, #8]	; (d8820 <_Z19__fetch_global_Wirev+0x40>)
   d8818:	b007      	add	sp, #28
   d881a:	bd30      	pop	{r4, r5, pc}
   d881c:	2003e70c 	.word	0x2003e70c
   d8820:	2003e710 	.word	0x2003e710
   d8824:	2003e11c 	.word	0x2003e11c
   d8828:	000d7d85 	.word	0x000d7d85

000d882c <__aeabi_atexit>:
   d882c:	460b      	mov	r3, r1
   d882e:	4601      	mov	r1, r0
   d8830:	4618      	mov	r0, r3
   d8832:	f000 bf0f 	b.w	d9654 <__cxa_atexit>
	...

000d8838 <_ZSt15get_new_handlerv>:
   d8838:	4b02      	ldr	r3, [pc, #8]	; (d8844 <_ZSt15get_new_handlerv+0xc>)
   d883a:	6818      	ldr	r0, [r3, #0]
   d883c:	f3bf 8f5f 	dmb	sy
   d8840:	4770      	bx	lr
   d8842:	bf00      	nop
   d8844:	2003e724 	.word	0x2003e724

000d8848 <_ZdlPvj>:
   d8848:	f7fb bc2b 	b.w	d40a2 <_ZdlPv>

000d884c <_ZnajRKSt9nothrow_t>:
   d884c:	f000 b800 	b.w	d8850 <_ZnwjRKSt9nothrow_t>

000d8850 <_ZnwjRKSt9nothrow_t>:
   d8850:	b510      	push	{r4, lr}
   d8852:	2800      	cmp	r0, #0
   d8854:	bf14      	ite	ne
   d8856:	4604      	movne	r4, r0
   d8858:	2401      	moveq	r4, #1
   d885a:	4620      	mov	r0, r4
   d885c:	f7fe f854 	bl	d6908 <malloc>
   d8860:	b920      	cbnz	r0, d886c <_ZnwjRKSt9nothrow_t+0x1c>
   d8862:	f7ff ffe9 	bl	d8838 <_ZSt15get_new_handlerv>
   d8866:	b108      	cbz	r0, d886c <_ZnwjRKSt9nothrow_t+0x1c>
   d8868:	4780      	blx	r0
   d886a:	e7f6      	b.n	d885a <_ZnwjRKSt9nothrow_t+0xa>
   d886c:	bd10      	pop	{r4, pc}

000d886e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d886e:	68c3      	ldr	r3, [r0, #12]
   d8870:	689a      	ldr	r2, [r3, #8]
   d8872:	60c2      	str	r2, [r0, #12]
   d8874:	b102      	cbz	r2, d8878 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   d8876:	6050      	str	r0, [r2, #4]
   d8878:	6842      	ldr	r2, [r0, #4]
   d887a:	605a      	str	r2, [r3, #4]
   d887c:	680a      	ldr	r2, [r1, #0]
   d887e:	4290      	cmp	r0, r2
   d8880:	d101      	bne.n	d8886 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   d8882:	600b      	str	r3, [r1, #0]
   d8884:	e005      	b.n	d8892 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   d8886:	6842      	ldr	r2, [r0, #4]
   d8888:	6891      	ldr	r1, [r2, #8]
   d888a:	4288      	cmp	r0, r1
   d888c:	bf0c      	ite	eq
   d888e:	6093      	streq	r3, [r2, #8]
   d8890:	60d3      	strne	r3, [r2, #12]
   d8892:	6098      	str	r0, [r3, #8]
   d8894:	6043      	str	r3, [r0, #4]
   d8896:	4770      	bx	lr

000d8898 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d8898:	6883      	ldr	r3, [r0, #8]
   d889a:	68da      	ldr	r2, [r3, #12]
   d889c:	6082      	str	r2, [r0, #8]
   d889e:	b102      	cbz	r2, d88a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   d88a0:	6050      	str	r0, [r2, #4]
   d88a2:	6842      	ldr	r2, [r0, #4]
   d88a4:	605a      	str	r2, [r3, #4]
   d88a6:	680a      	ldr	r2, [r1, #0]
   d88a8:	4290      	cmp	r0, r2
   d88aa:	d101      	bne.n	d88b0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   d88ac:	600b      	str	r3, [r1, #0]
   d88ae:	e005      	b.n	d88bc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   d88b0:	6842      	ldr	r2, [r0, #4]
   d88b2:	68d1      	ldr	r1, [r2, #12]
   d88b4:	4288      	cmp	r0, r1
   d88b6:	bf0c      	ite	eq
   d88b8:	60d3      	streq	r3, [r2, #12]
   d88ba:	6093      	strne	r3, [r2, #8]
   d88bc:	60d8      	str	r0, [r3, #12]
   d88be:	6043      	str	r3, [r0, #4]
   d88c0:	4770      	bx	lr

000d88c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d88c2:	7803      	ldrb	r3, [r0, #0]
   d88c4:	b92b      	cbnz	r3, d88d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d88c6:	6843      	ldr	r3, [r0, #4]
   d88c8:	685b      	ldr	r3, [r3, #4]
   d88ca:	4298      	cmp	r0, r3
   d88cc:	d101      	bne.n	d88d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d88ce:	68c3      	ldr	r3, [r0, #12]
   d88d0:	e00c      	b.n	d88ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d88d2:	6883      	ldr	r3, [r0, #8]
   d88d4:	b11b      	cbz	r3, d88de <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   d88d6:	68da      	ldr	r2, [r3, #12]
   d88d8:	b142      	cbz	r2, d88ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d88da:	4613      	mov	r3, r2
   d88dc:	e7fb      	b.n	d88d6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   d88de:	6843      	ldr	r3, [r0, #4]
   d88e0:	689a      	ldr	r2, [r3, #8]
   d88e2:	4282      	cmp	r2, r0
   d88e4:	d102      	bne.n	d88ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d88e6:	4618      	mov	r0, r3
   d88e8:	685b      	ldr	r3, [r3, #4]
   d88ea:	e7f9      	b.n	d88e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   d88ec:	4618      	mov	r0, r3
   d88ee:	4770      	bx	lr

000d88f0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d88f0:	68c3      	ldr	r3, [r0, #12]
   d88f2:	b123      	cbz	r3, d88fe <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d88f4:	4618      	mov	r0, r3
   d88f6:	689b      	ldr	r3, [r3, #8]
   d88f8:	2b00      	cmp	r3, #0
   d88fa:	d1fb      	bne.n	d88f4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d88fc:	e00a      	b.n	d8914 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
   d88fe:	6843      	ldr	r3, [r0, #4]
   d8900:	68da      	ldr	r2, [r3, #12]
   d8902:	4282      	cmp	r2, r0
   d8904:	d102      	bne.n	d890c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d8906:	4618      	mov	r0, r3
   d8908:	685b      	ldr	r3, [r3, #4]
   d890a:	e7f9      	b.n	d8900 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d890c:	68c2      	ldr	r2, [r0, #12]
   d890e:	4293      	cmp	r3, r2
   d8910:	bf18      	it	ne
   d8912:	4618      	movne	r0, r3
   d8914:	4770      	bx	lr

000d8916 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d8916:	f7ff bfd4 	b.w	d88c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d891a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d891a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d891e:	461f      	mov	r7, r3
   d8920:	f103 0904 	add.w	r9, r3, #4
   d8924:	2300      	movs	r3, #0
   d8926:	460c      	mov	r4, r1
   d8928:	604a      	str	r2, [r1, #4]
   d892a:	608b      	str	r3, [r1, #8]
   d892c:	60cb      	str	r3, [r1, #12]
   d892e:	700b      	strb	r3, [r1, #0]
   d8930:	b168      	cbz	r0, d894e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   d8932:	4297      	cmp	r7, r2
   d8934:	6091      	str	r1, [r2, #8]
   d8936:	d101      	bne.n	d893c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d8938:	6079      	str	r1, [r7, #4]
   d893a:	e00c      	b.n	d8956 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   d893c:	68bb      	ldr	r3, [r7, #8]
   d893e:	429a      	cmp	r2, r3
   d8940:	bf08      	it	eq
   d8942:	60b9      	streq	r1, [r7, #8]
   d8944:	f04f 0801 	mov.w	r8, #1
   d8948:	f04f 0a00 	mov.w	sl, #0
   d894c:	e017      	b.n	d897e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d894e:	60d1      	str	r1, [r2, #12]
   d8950:	68fb      	ldr	r3, [r7, #12]
   d8952:	429a      	cmp	r2, r3
   d8954:	d1f6      	bne.n	d8944 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d8956:	60fc      	str	r4, [r7, #12]
   d8958:	e7f4      	b.n	d8944 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d895a:	6866      	ldr	r6, [r4, #4]
   d895c:	7832      	ldrb	r2, [r6, #0]
   d895e:	2a00      	cmp	r2, #0
   d8960:	d13a      	bne.n	d89d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d8962:	6875      	ldr	r5, [r6, #4]
   d8964:	68ab      	ldr	r3, [r5, #8]
   d8966:	429e      	cmp	r6, r3
   d8968:	d11f      	bne.n	d89aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   d896a:	68eb      	ldr	r3, [r5, #12]
   d896c:	b15b      	cbz	r3, d8986 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d896e:	781a      	ldrb	r2, [r3, #0]
   d8970:	b94a      	cbnz	r2, d8986 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d8972:	f886 8000 	strb.w	r8, [r6]
   d8976:	f883 8000 	strb.w	r8, [r3]
   d897a:	702a      	strb	r2, [r5, #0]
   d897c:	462c      	mov	r4, r5
   d897e:	687b      	ldr	r3, [r7, #4]
   d8980:	429c      	cmp	r4, r3
   d8982:	d1ea      	bne.n	d895a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   d8984:	e028      	b.n	d89d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d8986:	68f3      	ldr	r3, [r6, #12]
   d8988:	429c      	cmp	r4, r3
   d898a:	d104      	bne.n	d8996 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   d898c:	4649      	mov	r1, r9
   d898e:	4630      	mov	r0, r6
   d8990:	f7ff ff6d 	bl	d886e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d8994:	4634      	mov	r4, r6
   d8996:	6863      	ldr	r3, [r4, #4]
   d8998:	4649      	mov	r1, r9
   d899a:	f883 8000 	strb.w	r8, [r3]
   d899e:	4628      	mov	r0, r5
   d89a0:	f885 a000 	strb.w	sl, [r5]
   d89a4:	f7ff ff78 	bl	d8898 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d89a8:	e014      	b.n	d89d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   d89aa:	b113      	cbz	r3, d89b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   d89ac:	781a      	ldrb	r2, [r3, #0]
   d89ae:	2a00      	cmp	r2, #0
   d89b0:	d0df      	beq.n	d8972 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   d89b2:	68b3      	ldr	r3, [r6, #8]
   d89b4:	429c      	cmp	r4, r3
   d89b6:	d104      	bne.n	d89c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   d89b8:	4649      	mov	r1, r9
   d89ba:	4630      	mov	r0, r6
   d89bc:	f7ff ff6c 	bl	d8898 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d89c0:	4634      	mov	r4, r6
   d89c2:	6863      	ldr	r3, [r4, #4]
   d89c4:	4649      	mov	r1, r9
   d89c6:	f883 8000 	strb.w	r8, [r3]
   d89ca:	4628      	mov	r0, r5
   d89cc:	f885 a000 	strb.w	sl, [r5]
   d89d0:	f7ff ff4d 	bl	d886e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d89d4:	4625      	mov	r5, r4
   d89d6:	e7d1      	b.n	d897c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   d89d8:	2201      	movs	r2, #1
   d89da:	701a      	strb	r2, [r3, #0]
   d89dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d89e0 <_ZSt25__throw_bad_function_callv>:
   d89e0:	b508      	push	{r3, lr}
   d89e2:	f7fd ffb9 	bl	d6958 <abort>
	...

000d89e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d89e8:	4b18      	ldr	r3, [pc, #96]	; (d8a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d89ea:	681a      	ldr	r2, [r3, #0]
   d89ec:	07d1      	lsls	r1, r2, #31
   d89ee:	bf5c      	itt	pl
   d89f0:	2201      	movpl	r2, #1
   d89f2:	601a      	strpl	r2, [r3, #0]
   d89f4:	4b16      	ldr	r3, [pc, #88]	; (d8a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d89f6:	681a      	ldr	r2, [r3, #0]
   d89f8:	07d2      	lsls	r2, r2, #31
   d89fa:	bf5c      	itt	pl
   d89fc:	2201      	movpl	r2, #1
   d89fe:	601a      	strpl	r2, [r3, #0]
   d8a00:	4b14      	ldr	r3, [pc, #80]	; (d8a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8a02:	681a      	ldr	r2, [r3, #0]
   d8a04:	07d0      	lsls	r0, r2, #31
   d8a06:	bf5c      	itt	pl
   d8a08:	2201      	movpl	r2, #1
   d8a0a:	601a      	strpl	r2, [r3, #0]
   d8a0c:	4b12      	ldr	r3, [pc, #72]	; (d8a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8a0e:	681a      	ldr	r2, [r3, #0]
   d8a10:	07d1      	lsls	r1, r2, #31
   d8a12:	bf5c      	itt	pl
   d8a14:	2201      	movpl	r2, #1
   d8a16:	601a      	strpl	r2, [r3, #0]
   d8a18:	4b10      	ldr	r3, [pc, #64]	; (d8a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8a1a:	681a      	ldr	r2, [r3, #0]
   d8a1c:	07d2      	lsls	r2, r2, #31
   d8a1e:	bf5c      	itt	pl
   d8a20:	2201      	movpl	r2, #1
   d8a22:	601a      	strpl	r2, [r3, #0]
   d8a24:	4b0e      	ldr	r3, [pc, #56]	; (d8a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8a26:	681a      	ldr	r2, [r3, #0]
   d8a28:	07d0      	lsls	r0, r2, #31
   d8a2a:	bf5c      	itt	pl
   d8a2c:	2201      	movpl	r2, #1
   d8a2e:	601a      	strpl	r2, [r3, #0]
   d8a30:	4b0c      	ldr	r3, [pc, #48]	; (d8a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8a32:	681a      	ldr	r2, [r3, #0]
   d8a34:	07d1      	lsls	r1, r2, #31
   d8a36:	bf5c      	itt	pl
   d8a38:	2201      	movpl	r2, #1
   d8a3a:	601a      	strpl	r2, [r3, #0]
   d8a3c:	4b0a      	ldr	r3, [pc, #40]	; (d8a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8a3e:	681a      	ldr	r2, [r3, #0]
   d8a40:	07d2      	lsls	r2, r2, #31
   d8a42:	bf5c      	itt	pl
   d8a44:	2201      	movpl	r2, #1
   d8a46:	601a      	strpl	r2, [r3, #0]
   d8a48:	4770      	bx	lr
   d8a4a:	bf00      	nop
   d8a4c:	2003e744 	.word	0x2003e744
   d8a50:	2003e740 	.word	0x2003e740
   d8a54:	2003e73c 	.word	0x2003e73c
   d8a58:	2003e738 	.word	0x2003e738
   d8a5c:	2003e734 	.word	0x2003e734
   d8a60:	2003e730 	.word	0x2003e730
   d8a64:	2003e72c 	.word	0x2003e72c
   d8a68:	2003e728 	.word	0x2003e728

000d8a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8a6c:	4b24      	ldr	r3, [pc, #144]	; (d8b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d0      	lsls	r0, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4b22      	ldr	r3, [pc, #136]	; (d8b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8a7a:	681a      	ldr	r2, [r3, #0]
   d8a7c:	07d1      	lsls	r1, r2, #31
   d8a7e:	bf5c      	itt	pl
   d8a80:	2201      	movpl	r2, #1
   d8a82:	601a      	strpl	r2, [r3, #0]
   d8a84:	4b20      	ldr	r3, [pc, #128]	; (d8b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8a86:	681a      	ldr	r2, [r3, #0]
   d8a88:	07d2      	lsls	r2, r2, #31
   d8a8a:	bf5c      	itt	pl
   d8a8c:	2201      	movpl	r2, #1
   d8a8e:	601a      	strpl	r2, [r3, #0]
   d8a90:	4b1e      	ldr	r3, [pc, #120]	; (d8b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8a92:	681a      	ldr	r2, [r3, #0]
   d8a94:	07d0      	lsls	r0, r2, #31
   d8a96:	bf5c      	itt	pl
   d8a98:	2201      	movpl	r2, #1
   d8a9a:	601a      	strpl	r2, [r3, #0]
   d8a9c:	4b1c      	ldr	r3, [pc, #112]	; (d8b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8a9e:	681a      	ldr	r2, [r3, #0]
   d8aa0:	07d1      	lsls	r1, r2, #31
   d8aa2:	bf5c      	itt	pl
   d8aa4:	2201      	movpl	r2, #1
   d8aa6:	601a      	strpl	r2, [r3, #0]
   d8aa8:	4b1a      	ldr	r3, [pc, #104]	; (d8b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8aaa:	681a      	ldr	r2, [r3, #0]
   d8aac:	07d2      	lsls	r2, r2, #31
   d8aae:	bf5c      	itt	pl
   d8ab0:	2201      	movpl	r2, #1
   d8ab2:	601a      	strpl	r2, [r3, #0]
   d8ab4:	4b18      	ldr	r3, [pc, #96]	; (d8b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8ab6:	681a      	ldr	r2, [r3, #0]
   d8ab8:	07d0      	lsls	r0, r2, #31
   d8aba:	bf5c      	itt	pl
   d8abc:	2201      	movpl	r2, #1
   d8abe:	601a      	strpl	r2, [r3, #0]
   d8ac0:	4b16      	ldr	r3, [pc, #88]	; (d8b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8ac2:	681a      	ldr	r2, [r3, #0]
   d8ac4:	07d1      	lsls	r1, r2, #31
   d8ac6:	bf5c      	itt	pl
   d8ac8:	2201      	movpl	r2, #1
   d8aca:	601a      	strpl	r2, [r3, #0]
   d8acc:	4b14      	ldr	r3, [pc, #80]	; (d8b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8ace:	681a      	ldr	r2, [r3, #0]
   d8ad0:	07d2      	lsls	r2, r2, #31
   d8ad2:	bf5c      	itt	pl
   d8ad4:	2201      	movpl	r2, #1
   d8ad6:	601a      	strpl	r2, [r3, #0]
   d8ad8:	4b12      	ldr	r3, [pc, #72]	; (d8b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8ada:	681a      	ldr	r2, [r3, #0]
   d8adc:	07d0      	lsls	r0, r2, #31
   d8ade:	bf5c      	itt	pl
   d8ae0:	2201      	movpl	r2, #1
   d8ae2:	601a      	strpl	r2, [r3, #0]
   d8ae4:	4b10      	ldr	r3, [pc, #64]	; (d8b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8ae6:	681a      	ldr	r2, [r3, #0]
   d8ae8:	07d1      	lsls	r1, r2, #31
   d8aea:	bf5c      	itt	pl
   d8aec:	2201      	movpl	r2, #1
   d8aee:	601a      	strpl	r2, [r3, #0]
   d8af0:	4b0e      	ldr	r3, [pc, #56]	; (d8b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8af2:	681a      	ldr	r2, [r3, #0]
   d8af4:	07d2      	lsls	r2, r2, #31
   d8af6:	bf5c      	itt	pl
   d8af8:	2201      	movpl	r2, #1
   d8afa:	601a      	strpl	r2, [r3, #0]
   d8afc:	4770      	bx	lr
   d8afe:	bf00      	nop
   d8b00:	2003e774 	.word	0x2003e774
   d8b04:	2003e770 	.word	0x2003e770
   d8b08:	2003e76c 	.word	0x2003e76c
   d8b0c:	2003e768 	.word	0x2003e768
   d8b10:	2003e764 	.word	0x2003e764
   d8b14:	2003e760 	.word	0x2003e760
   d8b18:	2003e75c 	.word	0x2003e75c
   d8b1c:	2003e758 	.word	0x2003e758
   d8b20:	2003e754 	.word	0x2003e754
   d8b24:	2003e750 	.word	0x2003e750
   d8b28:	2003e74c 	.word	0x2003e74c
   d8b2c:	2003e748 	.word	0x2003e748

000d8b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8b30:	4b24      	ldr	r3, [pc, #144]	; (d8bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8b32:	681a      	ldr	r2, [r3, #0]
   d8b34:	07d0      	lsls	r0, r2, #31
   d8b36:	bf5c      	itt	pl
   d8b38:	2201      	movpl	r2, #1
   d8b3a:	601a      	strpl	r2, [r3, #0]
   d8b3c:	4b22      	ldr	r3, [pc, #136]	; (d8bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8b3e:	681a      	ldr	r2, [r3, #0]
   d8b40:	07d1      	lsls	r1, r2, #31
   d8b42:	bf5c      	itt	pl
   d8b44:	2201      	movpl	r2, #1
   d8b46:	601a      	strpl	r2, [r3, #0]
   d8b48:	4b20      	ldr	r3, [pc, #128]	; (d8bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8b4a:	681a      	ldr	r2, [r3, #0]
   d8b4c:	07d2      	lsls	r2, r2, #31
   d8b4e:	bf5c      	itt	pl
   d8b50:	2201      	movpl	r2, #1
   d8b52:	601a      	strpl	r2, [r3, #0]
   d8b54:	4b1e      	ldr	r3, [pc, #120]	; (d8bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8b56:	681a      	ldr	r2, [r3, #0]
   d8b58:	07d0      	lsls	r0, r2, #31
   d8b5a:	bf5c      	itt	pl
   d8b5c:	2201      	movpl	r2, #1
   d8b5e:	601a      	strpl	r2, [r3, #0]
   d8b60:	4b1c      	ldr	r3, [pc, #112]	; (d8bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8b62:	681a      	ldr	r2, [r3, #0]
   d8b64:	07d1      	lsls	r1, r2, #31
   d8b66:	bf5c      	itt	pl
   d8b68:	2201      	movpl	r2, #1
   d8b6a:	601a      	strpl	r2, [r3, #0]
   d8b6c:	4b1a      	ldr	r3, [pc, #104]	; (d8bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8b6e:	681a      	ldr	r2, [r3, #0]
   d8b70:	07d2      	lsls	r2, r2, #31
   d8b72:	bf5c      	itt	pl
   d8b74:	2201      	movpl	r2, #1
   d8b76:	601a      	strpl	r2, [r3, #0]
   d8b78:	4b18      	ldr	r3, [pc, #96]	; (d8bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8b7a:	681a      	ldr	r2, [r3, #0]
   d8b7c:	07d0      	lsls	r0, r2, #31
   d8b7e:	bf5c      	itt	pl
   d8b80:	2201      	movpl	r2, #1
   d8b82:	601a      	strpl	r2, [r3, #0]
   d8b84:	4b16      	ldr	r3, [pc, #88]	; (d8be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8b86:	681a      	ldr	r2, [r3, #0]
   d8b88:	07d1      	lsls	r1, r2, #31
   d8b8a:	bf5c      	itt	pl
   d8b8c:	2201      	movpl	r2, #1
   d8b8e:	601a      	strpl	r2, [r3, #0]
   d8b90:	4b14      	ldr	r3, [pc, #80]	; (d8be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8b92:	681a      	ldr	r2, [r3, #0]
   d8b94:	07d2      	lsls	r2, r2, #31
   d8b96:	bf5c      	itt	pl
   d8b98:	2201      	movpl	r2, #1
   d8b9a:	601a      	strpl	r2, [r3, #0]
   d8b9c:	4b12      	ldr	r3, [pc, #72]	; (d8be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8b9e:	681a      	ldr	r2, [r3, #0]
   d8ba0:	07d0      	lsls	r0, r2, #31
   d8ba2:	bf5c      	itt	pl
   d8ba4:	2201      	movpl	r2, #1
   d8ba6:	601a      	strpl	r2, [r3, #0]
   d8ba8:	4b10      	ldr	r3, [pc, #64]	; (d8bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8baa:	681a      	ldr	r2, [r3, #0]
   d8bac:	07d1      	lsls	r1, r2, #31
   d8bae:	bf5c      	itt	pl
   d8bb0:	2201      	movpl	r2, #1
   d8bb2:	601a      	strpl	r2, [r3, #0]
   d8bb4:	4b0e      	ldr	r3, [pc, #56]	; (d8bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8bb6:	681a      	ldr	r2, [r3, #0]
   d8bb8:	07d2      	lsls	r2, r2, #31
   d8bba:	bf5c      	itt	pl
   d8bbc:	2201      	movpl	r2, #1
   d8bbe:	601a      	strpl	r2, [r3, #0]
   d8bc0:	4770      	bx	lr
   d8bc2:	bf00      	nop
   d8bc4:	2003e7a4 	.word	0x2003e7a4
   d8bc8:	2003e7a0 	.word	0x2003e7a0
   d8bcc:	2003e79c 	.word	0x2003e79c
   d8bd0:	2003e798 	.word	0x2003e798
   d8bd4:	2003e794 	.word	0x2003e794
   d8bd8:	2003e790 	.word	0x2003e790
   d8bdc:	2003e78c 	.word	0x2003e78c
   d8be0:	2003e788 	.word	0x2003e788
   d8be4:	2003e784 	.word	0x2003e784
   d8be8:	2003e780 	.word	0x2003e780
   d8bec:	2003e77c 	.word	0x2003e77c
   d8bf0:	2003e778 	.word	0x2003e778

000d8bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8bf4:	4b18      	ldr	r3, [pc, #96]	; (d8c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8bf6:	681a      	ldr	r2, [r3, #0]
   d8bf8:	07d1      	lsls	r1, r2, #31
   d8bfa:	bf5c      	itt	pl
   d8bfc:	2201      	movpl	r2, #1
   d8bfe:	601a      	strpl	r2, [r3, #0]
   d8c00:	4b16      	ldr	r3, [pc, #88]	; (d8c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8c02:	681a      	ldr	r2, [r3, #0]
   d8c04:	07d2      	lsls	r2, r2, #31
   d8c06:	bf5c      	itt	pl
   d8c08:	2201      	movpl	r2, #1
   d8c0a:	601a      	strpl	r2, [r3, #0]
   d8c0c:	4b14      	ldr	r3, [pc, #80]	; (d8c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8c0e:	681a      	ldr	r2, [r3, #0]
   d8c10:	07d0      	lsls	r0, r2, #31
   d8c12:	bf5c      	itt	pl
   d8c14:	2201      	movpl	r2, #1
   d8c16:	601a      	strpl	r2, [r3, #0]
   d8c18:	4b12      	ldr	r3, [pc, #72]	; (d8c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8c1a:	681a      	ldr	r2, [r3, #0]
   d8c1c:	07d1      	lsls	r1, r2, #31
   d8c1e:	bf5c      	itt	pl
   d8c20:	2201      	movpl	r2, #1
   d8c22:	601a      	strpl	r2, [r3, #0]
   d8c24:	4b10      	ldr	r3, [pc, #64]	; (d8c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8c26:	681a      	ldr	r2, [r3, #0]
   d8c28:	07d2      	lsls	r2, r2, #31
   d8c2a:	bf5c      	itt	pl
   d8c2c:	2201      	movpl	r2, #1
   d8c2e:	601a      	strpl	r2, [r3, #0]
   d8c30:	4b0e      	ldr	r3, [pc, #56]	; (d8c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8c32:	681a      	ldr	r2, [r3, #0]
   d8c34:	07d0      	lsls	r0, r2, #31
   d8c36:	bf5c      	itt	pl
   d8c38:	2201      	movpl	r2, #1
   d8c3a:	601a      	strpl	r2, [r3, #0]
   d8c3c:	4b0c      	ldr	r3, [pc, #48]	; (d8c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8c3e:	681a      	ldr	r2, [r3, #0]
   d8c40:	07d1      	lsls	r1, r2, #31
   d8c42:	bf5c      	itt	pl
   d8c44:	2201      	movpl	r2, #1
   d8c46:	601a      	strpl	r2, [r3, #0]
   d8c48:	4b0a      	ldr	r3, [pc, #40]	; (d8c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8c4a:	681a      	ldr	r2, [r3, #0]
   d8c4c:	07d2      	lsls	r2, r2, #31
   d8c4e:	bf5c      	itt	pl
   d8c50:	2201      	movpl	r2, #1
   d8c52:	601a      	strpl	r2, [r3, #0]
   d8c54:	4770      	bx	lr
   d8c56:	bf00      	nop
   d8c58:	2003e7c4 	.word	0x2003e7c4
   d8c5c:	2003e7c0 	.word	0x2003e7c0
   d8c60:	2003e7bc 	.word	0x2003e7bc
   d8c64:	2003e7b8 	.word	0x2003e7b8
   d8c68:	2003e7b4 	.word	0x2003e7b4
   d8c6c:	2003e7b0 	.word	0x2003e7b0
   d8c70:	2003e7ac 	.word	0x2003e7ac
   d8c74:	2003e7a8 	.word	0x2003e7a8

000d8c78 <__aeabi_drsub>:
   d8c78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8c7c:	e002      	b.n	d8c84 <__adddf3>
   d8c7e:	bf00      	nop

000d8c80 <__aeabi_dsub>:
   d8c80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8c84 <__adddf3>:
   d8c84:	b530      	push	{r4, r5, lr}
   d8c86:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8c8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8c8e:	ea94 0f05 	teq	r4, r5
   d8c92:	bf08      	it	eq
   d8c94:	ea90 0f02 	teqeq	r0, r2
   d8c98:	bf1f      	itttt	ne
   d8c9a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8c9e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8ca2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8ca6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8caa:	f000 80e2 	beq.w	d8e72 <__adddf3+0x1ee>
   d8cae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8cb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8cb6:	bfb8      	it	lt
   d8cb8:	426d      	neglt	r5, r5
   d8cba:	dd0c      	ble.n	d8cd6 <__adddf3+0x52>
   d8cbc:	442c      	add	r4, r5
   d8cbe:	ea80 0202 	eor.w	r2, r0, r2
   d8cc2:	ea81 0303 	eor.w	r3, r1, r3
   d8cc6:	ea82 0000 	eor.w	r0, r2, r0
   d8cca:	ea83 0101 	eor.w	r1, r3, r1
   d8cce:	ea80 0202 	eor.w	r2, r0, r2
   d8cd2:	ea81 0303 	eor.w	r3, r1, r3
   d8cd6:	2d36      	cmp	r5, #54	; 0x36
   d8cd8:	bf88      	it	hi
   d8cda:	bd30      	pophi	{r4, r5, pc}
   d8cdc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ce4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8ce8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8cec:	d002      	beq.n	d8cf4 <__adddf3+0x70>
   d8cee:	4240      	negs	r0, r0
   d8cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8cf4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8cf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cfc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8d00:	d002      	beq.n	d8d08 <__adddf3+0x84>
   d8d02:	4252      	negs	r2, r2
   d8d04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8d08:	ea94 0f05 	teq	r4, r5
   d8d0c:	f000 80a7 	beq.w	d8e5e <__adddf3+0x1da>
   d8d10:	f1a4 0401 	sub.w	r4, r4, #1
   d8d14:	f1d5 0e20 	rsbs	lr, r5, #32
   d8d18:	db0d      	blt.n	d8d36 <__adddf3+0xb2>
   d8d1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8d1e:	fa22 f205 	lsr.w	r2, r2, r5
   d8d22:	1880      	adds	r0, r0, r2
   d8d24:	f141 0100 	adc.w	r1, r1, #0
   d8d28:	fa03 f20e 	lsl.w	r2, r3, lr
   d8d2c:	1880      	adds	r0, r0, r2
   d8d2e:	fa43 f305 	asr.w	r3, r3, r5
   d8d32:	4159      	adcs	r1, r3
   d8d34:	e00e      	b.n	d8d54 <__adddf3+0xd0>
   d8d36:	f1a5 0520 	sub.w	r5, r5, #32
   d8d3a:	f10e 0e20 	add.w	lr, lr, #32
   d8d3e:	2a01      	cmp	r2, #1
   d8d40:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8d44:	bf28      	it	cs
   d8d46:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8d4a:	fa43 f305 	asr.w	r3, r3, r5
   d8d4e:	18c0      	adds	r0, r0, r3
   d8d50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8d54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d58:	d507      	bpl.n	d8d6a <__adddf3+0xe6>
   d8d5a:	f04f 0e00 	mov.w	lr, #0
   d8d5e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8d62:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8d66:	eb6e 0101 	sbc.w	r1, lr, r1
   d8d6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8d6e:	d31b      	bcc.n	d8da8 <__adddf3+0x124>
   d8d70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8d74:	d30c      	bcc.n	d8d90 <__adddf3+0x10c>
   d8d76:	0849      	lsrs	r1, r1, #1
   d8d78:	ea5f 0030 	movs.w	r0, r0, rrx
   d8d7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8d80:	f104 0401 	add.w	r4, r4, #1
   d8d84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8d88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8d8c:	f080 809a 	bcs.w	d8ec4 <__adddf3+0x240>
   d8d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8d94:	bf08      	it	eq
   d8d96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d9a:	f150 0000 	adcs.w	r0, r0, #0
   d8d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8da2:	ea41 0105 	orr.w	r1, r1, r5
   d8da6:	bd30      	pop	{r4, r5, pc}
   d8da8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8dac:	4140      	adcs	r0, r0
   d8dae:	eb41 0101 	adc.w	r1, r1, r1
   d8db2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8db6:	f1a4 0401 	sub.w	r4, r4, #1
   d8dba:	d1e9      	bne.n	d8d90 <__adddf3+0x10c>
   d8dbc:	f091 0f00 	teq	r1, #0
   d8dc0:	bf04      	itt	eq
   d8dc2:	4601      	moveq	r1, r0
   d8dc4:	2000      	moveq	r0, #0
   d8dc6:	fab1 f381 	clz	r3, r1
   d8dca:	bf08      	it	eq
   d8dcc:	3320      	addeq	r3, #32
   d8dce:	f1a3 030b 	sub.w	r3, r3, #11
   d8dd2:	f1b3 0220 	subs.w	r2, r3, #32
   d8dd6:	da0c      	bge.n	d8df2 <__adddf3+0x16e>
   d8dd8:	320c      	adds	r2, #12
   d8dda:	dd08      	ble.n	d8dee <__adddf3+0x16a>
   d8ddc:	f102 0c14 	add.w	ip, r2, #20
   d8de0:	f1c2 020c 	rsb	r2, r2, #12
   d8de4:	fa01 f00c 	lsl.w	r0, r1, ip
   d8de8:	fa21 f102 	lsr.w	r1, r1, r2
   d8dec:	e00c      	b.n	d8e08 <__adddf3+0x184>
   d8dee:	f102 0214 	add.w	r2, r2, #20
   d8df2:	bfd8      	it	le
   d8df4:	f1c2 0c20 	rsble	ip, r2, #32
   d8df8:	fa01 f102 	lsl.w	r1, r1, r2
   d8dfc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8e00:	bfdc      	itt	le
   d8e02:	ea41 010c 	orrle.w	r1, r1, ip
   d8e06:	4090      	lslle	r0, r2
   d8e08:	1ae4      	subs	r4, r4, r3
   d8e0a:	bfa2      	ittt	ge
   d8e0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8e10:	4329      	orrge	r1, r5
   d8e12:	bd30      	popge	{r4, r5, pc}
   d8e14:	ea6f 0404 	mvn.w	r4, r4
   d8e18:	3c1f      	subs	r4, #31
   d8e1a:	da1c      	bge.n	d8e56 <__adddf3+0x1d2>
   d8e1c:	340c      	adds	r4, #12
   d8e1e:	dc0e      	bgt.n	d8e3e <__adddf3+0x1ba>
   d8e20:	f104 0414 	add.w	r4, r4, #20
   d8e24:	f1c4 0220 	rsb	r2, r4, #32
   d8e28:	fa20 f004 	lsr.w	r0, r0, r4
   d8e2c:	fa01 f302 	lsl.w	r3, r1, r2
   d8e30:	ea40 0003 	orr.w	r0, r0, r3
   d8e34:	fa21 f304 	lsr.w	r3, r1, r4
   d8e38:	ea45 0103 	orr.w	r1, r5, r3
   d8e3c:	bd30      	pop	{r4, r5, pc}
   d8e3e:	f1c4 040c 	rsb	r4, r4, #12
   d8e42:	f1c4 0220 	rsb	r2, r4, #32
   d8e46:	fa20 f002 	lsr.w	r0, r0, r2
   d8e4a:	fa01 f304 	lsl.w	r3, r1, r4
   d8e4e:	ea40 0003 	orr.w	r0, r0, r3
   d8e52:	4629      	mov	r1, r5
   d8e54:	bd30      	pop	{r4, r5, pc}
   d8e56:	fa21 f004 	lsr.w	r0, r1, r4
   d8e5a:	4629      	mov	r1, r5
   d8e5c:	bd30      	pop	{r4, r5, pc}
   d8e5e:	f094 0f00 	teq	r4, #0
   d8e62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8e66:	bf06      	itte	eq
   d8e68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8e6c:	3401      	addeq	r4, #1
   d8e6e:	3d01      	subne	r5, #1
   d8e70:	e74e      	b.n	d8d10 <__adddf3+0x8c>
   d8e72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8e76:	bf18      	it	ne
   d8e78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8e7c:	d029      	beq.n	d8ed2 <__adddf3+0x24e>
   d8e7e:	ea94 0f05 	teq	r4, r5
   d8e82:	bf08      	it	eq
   d8e84:	ea90 0f02 	teqeq	r0, r2
   d8e88:	d005      	beq.n	d8e96 <__adddf3+0x212>
   d8e8a:	ea54 0c00 	orrs.w	ip, r4, r0
   d8e8e:	bf04      	itt	eq
   d8e90:	4619      	moveq	r1, r3
   d8e92:	4610      	moveq	r0, r2
   d8e94:	bd30      	pop	{r4, r5, pc}
   d8e96:	ea91 0f03 	teq	r1, r3
   d8e9a:	bf1e      	ittt	ne
   d8e9c:	2100      	movne	r1, #0
   d8e9e:	2000      	movne	r0, #0
   d8ea0:	bd30      	popne	{r4, r5, pc}
   d8ea2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8ea6:	d105      	bne.n	d8eb4 <__adddf3+0x230>
   d8ea8:	0040      	lsls	r0, r0, #1
   d8eaa:	4149      	adcs	r1, r1
   d8eac:	bf28      	it	cs
   d8eae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8eb2:	bd30      	pop	{r4, r5, pc}
   d8eb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8eb8:	bf3c      	itt	cc
   d8eba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8ebe:	bd30      	popcc	{r4, r5, pc}
   d8ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ec4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8ec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ecc:	f04f 0000 	mov.w	r0, #0
   d8ed0:	bd30      	pop	{r4, r5, pc}
   d8ed2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ed6:	bf1a      	itte	ne
   d8ed8:	4619      	movne	r1, r3
   d8eda:	4610      	movne	r0, r2
   d8edc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8ee0:	bf1c      	itt	ne
   d8ee2:	460b      	movne	r3, r1
   d8ee4:	4602      	movne	r2, r0
   d8ee6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8eea:	bf06      	itte	eq
   d8eec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8ef0:	ea91 0f03 	teqeq	r1, r3
   d8ef4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ef8:	bd30      	pop	{r4, r5, pc}
   d8efa:	bf00      	nop

000d8efc <__aeabi_ui2d>:
   d8efc:	f090 0f00 	teq	r0, #0
   d8f00:	bf04      	itt	eq
   d8f02:	2100      	moveq	r1, #0
   d8f04:	4770      	bxeq	lr
   d8f06:	b530      	push	{r4, r5, lr}
   d8f08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f10:	f04f 0500 	mov.w	r5, #0
   d8f14:	f04f 0100 	mov.w	r1, #0
   d8f18:	e750      	b.n	d8dbc <__adddf3+0x138>
   d8f1a:	bf00      	nop

000d8f1c <__aeabi_i2d>:
   d8f1c:	f090 0f00 	teq	r0, #0
   d8f20:	bf04      	itt	eq
   d8f22:	2100      	moveq	r1, #0
   d8f24:	4770      	bxeq	lr
   d8f26:	b530      	push	{r4, r5, lr}
   d8f28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8f34:	bf48      	it	mi
   d8f36:	4240      	negmi	r0, r0
   d8f38:	f04f 0100 	mov.w	r1, #0
   d8f3c:	e73e      	b.n	d8dbc <__adddf3+0x138>
   d8f3e:	bf00      	nop

000d8f40 <__aeabi_f2d>:
   d8f40:	0042      	lsls	r2, r0, #1
   d8f42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8f46:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8f4e:	bf1f      	itttt	ne
   d8f50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8f54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8f5c:	4770      	bxne	lr
   d8f5e:	f092 0f00 	teq	r2, #0
   d8f62:	bf14      	ite	ne
   d8f64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f68:	4770      	bxeq	lr
   d8f6a:	b530      	push	{r4, r5, lr}
   d8f6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f78:	e720      	b.n	d8dbc <__adddf3+0x138>
   d8f7a:	bf00      	nop

000d8f7c <__aeabi_ul2d>:
   d8f7c:	ea50 0201 	orrs.w	r2, r0, r1
   d8f80:	bf08      	it	eq
   d8f82:	4770      	bxeq	lr
   d8f84:	b530      	push	{r4, r5, lr}
   d8f86:	f04f 0500 	mov.w	r5, #0
   d8f8a:	e00a      	b.n	d8fa2 <__aeabi_l2d+0x16>

000d8f8c <__aeabi_l2d>:
   d8f8c:	ea50 0201 	orrs.w	r2, r0, r1
   d8f90:	bf08      	it	eq
   d8f92:	4770      	bxeq	lr
   d8f94:	b530      	push	{r4, r5, lr}
   d8f96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8f9a:	d502      	bpl.n	d8fa2 <__aeabi_l2d+0x16>
   d8f9c:	4240      	negs	r0, r0
   d8f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8fa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8fa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8faa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8fae:	f43f aedc 	beq.w	d8d6a <__adddf3+0xe6>
   d8fb2:	f04f 0203 	mov.w	r2, #3
   d8fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fba:	bf18      	it	ne
   d8fbc:	3203      	addne	r2, #3
   d8fbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fc2:	bf18      	it	ne
   d8fc4:	3203      	addne	r2, #3
   d8fc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8fca:	f1c2 0320 	rsb	r3, r2, #32
   d8fce:	fa00 fc03 	lsl.w	ip, r0, r3
   d8fd2:	fa20 f002 	lsr.w	r0, r0, r2
   d8fd6:	fa01 fe03 	lsl.w	lr, r1, r3
   d8fda:	ea40 000e 	orr.w	r0, r0, lr
   d8fde:	fa21 f102 	lsr.w	r1, r1, r2
   d8fe2:	4414      	add	r4, r2
   d8fe4:	e6c1      	b.n	d8d6a <__adddf3+0xe6>
   d8fe6:	bf00      	nop

000d8fe8 <__aeabi_dmul>:
   d8fe8:	b570      	push	{r4, r5, r6, lr}
   d8fea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8fee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ff2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ff6:	bf1d      	ittte	ne
   d8ff8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ffc:	ea94 0f0c 	teqne	r4, ip
   d9000:	ea95 0f0c 	teqne	r5, ip
   d9004:	f000 f8de 	bleq	d91c4 <__aeabi_dmul+0x1dc>
   d9008:	442c      	add	r4, r5
   d900a:	ea81 0603 	eor.w	r6, r1, r3
   d900e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9012:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9016:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d901a:	bf18      	it	ne
   d901c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9028:	d038      	beq.n	d909c <__aeabi_dmul+0xb4>
   d902a:	fba0 ce02 	umull	ip, lr, r0, r2
   d902e:	f04f 0500 	mov.w	r5, #0
   d9032:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9036:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d903a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d903e:	f04f 0600 	mov.w	r6, #0
   d9042:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9046:	f09c 0f00 	teq	ip, #0
   d904a:	bf18      	it	ne
   d904c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9050:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9054:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9058:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d905c:	d204      	bcs.n	d9068 <__aeabi_dmul+0x80>
   d905e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9062:	416d      	adcs	r5, r5
   d9064:	eb46 0606 	adc.w	r6, r6, r6
   d9068:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d906c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9070:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9074:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9078:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d907c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9080:	bf88      	it	hi
   d9082:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9086:	d81e      	bhi.n	d90c6 <__aeabi_dmul+0xde>
   d9088:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d908c:	bf08      	it	eq
   d908e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9092:	f150 0000 	adcs.w	r0, r0, #0
   d9096:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d909a:	bd70      	pop	{r4, r5, r6, pc}
   d909c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d90a0:	ea46 0101 	orr.w	r1, r6, r1
   d90a4:	ea40 0002 	orr.w	r0, r0, r2
   d90a8:	ea81 0103 	eor.w	r1, r1, r3
   d90ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d90b0:	bfc2      	ittt	gt
   d90b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90ba:	bd70      	popgt	{r4, r5, r6, pc}
   d90bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90c0:	f04f 0e00 	mov.w	lr, #0
   d90c4:	3c01      	subs	r4, #1
   d90c6:	f300 80ab 	bgt.w	d9220 <__aeabi_dmul+0x238>
   d90ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d90ce:	bfde      	ittt	le
   d90d0:	2000      	movle	r0, #0
   d90d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d90d6:	bd70      	pople	{r4, r5, r6, pc}
   d90d8:	f1c4 0400 	rsb	r4, r4, #0
   d90dc:	3c20      	subs	r4, #32
   d90de:	da35      	bge.n	d914c <__aeabi_dmul+0x164>
   d90e0:	340c      	adds	r4, #12
   d90e2:	dc1b      	bgt.n	d911c <__aeabi_dmul+0x134>
   d90e4:	f104 0414 	add.w	r4, r4, #20
   d90e8:	f1c4 0520 	rsb	r5, r4, #32
   d90ec:	fa00 f305 	lsl.w	r3, r0, r5
   d90f0:	fa20 f004 	lsr.w	r0, r0, r4
   d90f4:	fa01 f205 	lsl.w	r2, r1, r5
   d90f8:	ea40 0002 	orr.w	r0, r0, r2
   d90fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9104:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9108:	fa21 f604 	lsr.w	r6, r1, r4
   d910c:	eb42 0106 	adc.w	r1, r2, r6
   d9110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9114:	bf08      	it	eq
   d9116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d911a:	bd70      	pop	{r4, r5, r6, pc}
   d911c:	f1c4 040c 	rsb	r4, r4, #12
   d9120:	f1c4 0520 	rsb	r5, r4, #32
   d9124:	fa00 f304 	lsl.w	r3, r0, r4
   d9128:	fa20 f005 	lsr.w	r0, r0, r5
   d912c:	fa01 f204 	lsl.w	r2, r1, r4
   d9130:	ea40 0002 	orr.w	r0, r0, r2
   d9134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d913c:	f141 0100 	adc.w	r1, r1, #0
   d9140:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9144:	bf08      	it	eq
   d9146:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d914a:	bd70      	pop	{r4, r5, r6, pc}
   d914c:	f1c4 0520 	rsb	r5, r4, #32
   d9150:	fa00 f205 	lsl.w	r2, r0, r5
   d9154:	ea4e 0e02 	orr.w	lr, lr, r2
   d9158:	fa20 f304 	lsr.w	r3, r0, r4
   d915c:	fa01 f205 	lsl.w	r2, r1, r5
   d9160:	ea43 0302 	orr.w	r3, r3, r2
   d9164:	fa21 f004 	lsr.w	r0, r1, r4
   d9168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d916c:	fa21 f204 	lsr.w	r2, r1, r4
   d9170:	ea20 0002 	bic.w	r0, r0, r2
   d9174:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d917c:	bf08      	it	eq
   d917e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9182:	bd70      	pop	{r4, r5, r6, pc}
   d9184:	f094 0f00 	teq	r4, #0
   d9188:	d10f      	bne.n	d91aa <__aeabi_dmul+0x1c2>
   d918a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d918e:	0040      	lsls	r0, r0, #1
   d9190:	eb41 0101 	adc.w	r1, r1, r1
   d9194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9198:	bf08      	it	eq
   d919a:	3c01      	subeq	r4, #1
   d919c:	d0f7      	beq.n	d918e <__aeabi_dmul+0x1a6>
   d919e:	ea41 0106 	orr.w	r1, r1, r6
   d91a2:	f095 0f00 	teq	r5, #0
   d91a6:	bf18      	it	ne
   d91a8:	4770      	bxne	lr
   d91aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d91ae:	0052      	lsls	r2, r2, #1
   d91b0:	eb43 0303 	adc.w	r3, r3, r3
   d91b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d91b8:	bf08      	it	eq
   d91ba:	3d01      	subeq	r5, #1
   d91bc:	d0f7      	beq.n	d91ae <__aeabi_dmul+0x1c6>
   d91be:	ea43 0306 	orr.w	r3, r3, r6
   d91c2:	4770      	bx	lr
   d91c4:	ea94 0f0c 	teq	r4, ip
   d91c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d91cc:	bf18      	it	ne
   d91ce:	ea95 0f0c 	teqne	r5, ip
   d91d2:	d00c      	beq.n	d91ee <__aeabi_dmul+0x206>
   d91d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91d8:	bf18      	it	ne
   d91da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91de:	d1d1      	bne.n	d9184 <__aeabi_dmul+0x19c>
   d91e0:	ea81 0103 	eor.w	r1, r1, r3
   d91e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d91e8:	f04f 0000 	mov.w	r0, #0
   d91ec:	bd70      	pop	{r4, r5, r6, pc}
   d91ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91f2:	bf06      	itte	eq
   d91f4:	4610      	moveq	r0, r2
   d91f6:	4619      	moveq	r1, r3
   d91f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91fc:	d019      	beq.n	d9232 <__aeabi_dmul+0x24a>
   d91fe:	ea94 0f0c 	teq	r4, ip
   d9202:	d102      	bne.n	d920a <__aeabi_dmul+0x222>
   d9204:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9208:	d113      	bne.n	d9232 <__aeabi_dmul+0x24a>
   d920a:	ea95 0f0c 	teq	r5, ip
   d920e:	d105      	bne.n	d921c <__aeabi_dmul+0x234>
   d9210:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9214:	bf1c      	itt	ne
   d9216:	4610      	movne	r0, r2
   d9218:	4619      	movne	r1, r3
   d921a:	d10a      	bne.n	d9232 <__aeabi_dmul+0x24a>
   d921c:	ea81 0103 	eor.w	r1, r1, r3
   d9220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9224:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9228:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d922c:	f04f 0000 	mov.w	r0, #0
   d9230:	bd70      	pop	{r4, r5, r6, pc}
   d9232:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9236:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d923a:	bd70      	pop	{r4, r5, r6, pc}

000d923c <__aeabi_ddiv>:
   d923c:	b570      	push	{r4, r5, r6, lr}
   d923e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9242:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9246:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d924a:	bf1d      	ittte	ne
   d924c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9250:	ea94 0f0c 	teqne	r4, ip
   d9254:	ea95 0f0c 	teqne	r5, ip
   d9258:	f000 f8a7 	bleq	d93aa <__aeabi_ddiv+0x16e>
   d925c:	eba4 0405 	sub.w	r4, r4, r5
   d9260:	ea81 0e03 	eor.w	lr, r1, r3
   d9264:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9268:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d926c:	f000 8088 	beq.w	d9380 <__aeabi_ddiv+0x144>
   d9270:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9274:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9278:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d927c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9280:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9284:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9288:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d928c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9290:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9294:	429d      	cmp	r5, r3
   d9296:	bf08      	it	eq
   d9298:	4296      	cmpeq	r6, r2
   d929a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d929e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d92a2:	d202      	bcs.n	d92aa <__aeabi_ddiv+0x6e>
   d92a4:	085b      	lsrs	r3, r3, #1
   d92a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d92aa:	1ab6      	subs	r6, r6, r2
   d92ac:	eb65 0503 	sbc.w	r5, r5, r3
   d92b0:	085b      	lsrs	r3, r3, #1
   d92b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d92b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d92ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d92be:	ebb6 0e02 	subs.w	lr, r6, r2
   d92c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92c6:	bf22      	ittt	cs
   d92c8:	1ab6      	subcs	r6, r6, r2
   d92ca:	4675      	movcs	r5, lr
   d92cc:	ea40 000c 	orrcs.w	r0, r0, ip
   d92d0:	085b      	lsrs	r3, r3, #1
   d92d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d92d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d92da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92de:	bf22      	ittt	cs
   d92e0:	1ab6      	subcs	r6, r6, r2
   d92e2:	4675      	movcs	r5, lr
   d92e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d92e8:	085b      	lsrs	r3, r3, #1
   d92ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d92ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d92f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92f6:	bf22      	ittt	cs
   d92f8:	1ab6      	subcs	r6, r6, r2
   d92fa:	4675      	movcs	r5, lr
   d92fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9300:	085b      	lsrs	r3, r3, #1
   d9302:	ea4f 0232 	mov.w	r2, r2, rrx
   d9306:	ebb6 0e02 	subs.w	lr, r6, r2
   d930a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d930e:	bf22      	ittt	cs
   d9310:	1ab6      	subcs	r6, r6, r2
   d9312:	4675      	movcs	r5, lr
   d9314:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9318:	ea55 0e06 	orrs.w	lr, r5, r6
   d931c:	d018      	beq.n	d9350 <__aeabi_ddiv+0x114>
   d931e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9322:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9326:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d932a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d932e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9332:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9336:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d933a:	d1c0      	bne.n	d92be <__aeabi_ddiv+0x82>
   d933c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9340:	d10b      	bne.n	d935a <__aeabi_ddiv+0x11e>
   d9342:	ea41 0100 	orr.w	r1, r1, r0
   d9346:	f04f 0000 	mov.w	r0, #0
   d934a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d934e:	e7b6      	b.n	d92be <__aeabi_ddiv+0x82>
   d9350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9354:	bf04      	itt	eq
   d9356:	4301      	orreq	r1, r0
   d9358:	2000      	moveq	r0, #0
   d935a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d935e:	bf88      	it	hi
   d9360:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9364:	f63f aeaf 	bhi.w	d90c6 <__aeabi_dmul+0xde>
   d9368:	ebb5 0c03 	subs.w	ip, r5, r3
   d936c:	bf04      	itt	eq
   d936e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9376:	f150 0000 	adcs.w	r0, r0, #0
   d937a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d937e:	bd70      	pop	{r4, r5, r6, pc}
   d9380:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9384:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9388:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d938c:	bfc2      	ittt	gt
   d938e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9392:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9396:	bd70      	popgt	{r4, r5, r6, pc}
   d9398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d939c:	f04f 0e00 	mov.w	lr, #0
   d93a0:	3c01      	subs	r4, #1
   d93a2:	e690      	b.n	d90c6 <__aeabi_dmul+0xde>
   d93a4:	ea45 0e06 	orr.w	lr, r5, r6
   d93a8:	e68d      	b.n	d90c6 <__aeabi_dmul+0xde>
   d93aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93ae:	ea94 0f0c 	teq	r4, ip
   d93b2:	bf08      	it	eq
   d93b4:	ea95 0f0c 	teqeq	r5, ip
   d93b8:	f43f af3b 	beq.w	d9232 <__aeabi_dmul+0x24a>
   d93bc:	ea94 0f0c 	teq	r4, ip
   d93c0:	d10a      	bne.n	d93d8 <__aeabi_ddiv+0x19c>
   d93c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93c6:	f47f af34 	bne.w	d9232 <__aeabi_dmul+0x24a>
   d93ca:	ea95 0f0c 	teq	r5, ip
   d93ce:	f47f af25 	bne.w	d921c <__aeabi_dmul+0x234>
   d93d2:	4610      	mov	r0, r2
   d93d4:	4619      	mov	r1, r3
   d93d6:	e72c      	b.n	d9232 <__aeabi_dmul+0x24a>
   d93d8:	ea95 0f0c 	teq	r5, ip
   d93dc:	d106      	bne.n	d93ec <__aeabi_ddiv+0x1b0>
   d93de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d93e2:	f43f aefd 	beq.w	d91e0 <__aeabi_dmul+0x1f8>
   d93e6:	4610      	mov	r0, r2
   d93e8:	4619      	mov	r1, r3
   d93ea:	e722      	b.n	d9232 <__aeabi_dmul+0x24a>
   d93ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93f0:	bf18      	it	ne
   d93f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93f6:	f47f aec5 	bne.w	d9184 <__aeabi_dmul+0x19c>
   d93fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d93fe:	f47f af0d 	bne.w	d921c <__aeabi_dmul+0x234>
   d9402:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9406:	f47f aeeb 	bne.w	d91e0 <__aeabi_dmul+0x1f8>
   d940a:	e712      	b.n	d9232 <__aeabi_dmul+0x24a>

000d940c <__gedf2>:
   d940c:	f04f 3cff 	mov.w	ip, #4294967295
   d9410:	e006      	b.n	d9420 <__cmpdf2+0x4>
   d9412:	bf00      	nop

000d9414 <__ledf2>:
   d9414:	f04f 0c01 	mov.w	ip, #1
   d9418:	e002      	b.n	d9420 <__cmpdf2+0x4>
   d941a:	bf00      	nop

000d941c <__cmpdf2>:
   d941c:	f04f 0c01 	mov.w	ip, #1
   d9420:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9424:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d942c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9430:	bf18      	it	ne
   d9432:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9436:	d01b      	beq.n	d9470 <__cmpdf2+0x54>
   d9438:	b001      	add	sp, #4
   d943a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d943e:	bf0c      	ite	eq
   d9440:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9444:	ea91 0f03 	teqne	r1, r3
   d9448:	bf02      	ittt	eq
   d944a:	ea90 0f02 	teqeq	r0, r2
   d944e:	2000      	moveq	r0, #0
   d9450:	4770      	bxeq	lr
   d9452:	f110 0f00 	cmn.w	r0, #0
   d9456:	ea91 0f03 	teq	r1, r3
   d945a:	bf58      	it	pl
   d945c:	4299      	cmppl	r1, r3
   d945e:	bf08      	it	eq
   d9460:	4290      	cmpeq	r0, r2
   d9462:	bf2c      	ite	cs
   d9464:	17d8      	asrcs	r0, r3, #31
   d9466:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d946a:	f040 0001 	orr.w	r0, r0, #1
   d946e:	4770      	bx	lr
   d9470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9478:	d102      	bne.n	d9480 <__cmpdf2+0x64>
   d947a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d947e:	d107      	bne.n	d9490 <__cmpdf2+0x74>
   d9480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9488:	d1d6      	bne.n	d9438 <__cmpdf2+0x1c>
   d948a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d948e:	d0d3      	beq.n	d9438 <__cmpdf2+0x1c>
   d9490:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9494:	4770      	bx	lr
   d9496:	bf00      	nop

000d9498 <__aeabi_cdrcmple>:
   d9498:	4684      	mov	ip, r0
   d949a:	4610      	mov	r0, r2
   d949c:	4662      	mov	r2, ip
   d949e:	468c      	mov	ip, r1
   d94a0:	4619      	mov	r1, r3
   d94a2:	4663      	mov	r3, ip
   d94a4:	e000      	b.n	d94a8 <__aeabi_cdcmpeq>
   d94a6:	bf00      	nop

000d94a8 <__aeabi_cdcmpeq>:
   d94a8:	b501      	push	{r0, lr}
   d94aa:	f7ff ffb7 	bl	d941c <__cmpdf2>
   d94ae:	2800      	cmp	r0, #0
   d94b0:	bf48      	it	mi
   d94b2:	f110 0f00 	cmnmi.w	r0, #0
   d94b6:	bd01      	pop	{r0, pc}

000d94b8 <__aeabi_dcmpeq>:
   d94b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94bc:	f7ff fff4 	bl	d94a8 <__aeabi_cdcmpeq>
   d94c0:	bf0c      	ite	eq
   d94c2:	2001      	moveq	r0, #1
   d94c4:	2000      	movne	r0, #0
   d94c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d94ca:	bf00      	nop

000d94cc <__aeabi_dcmplt>:
   d94cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94d0:	f7ff ffea 	bl	d94a8 <__aeabi_cdcmpeq>
   d94d4:	bf34      	ite	cc
   d94d6:	2001      	movcc	r0, #1
   d94d8:	2000      	movcs	r0, #0
   d94da:	f85d fb08 	ldr.w	pc, [sp], #8
   d94de:	bf00      	nop

000d94e0 <__aeabi_dcmple>:
   d94e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94e4:	f7ff ffe0 	bl	d94a8 <__aeabi_cdcmpeq>
   d94e8:	bf94      	ite	ls
   d94ea:	2001      	movls	r0, #1
   d94ec:	2000      	movhi	r0, #0
   d94ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d94f2:	bf00      	nop

000d94f4 <__aeabi_dcmpge>:
   d94f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94f8:	f7ff ffce 	bl	d9498 <__aeabi_cdrcmple>
   d94fc:	bf94      	ite	ls
   d94fe:	2001      	movls	r0, #1
   d9500:	2000      	movhi	r0, #0
   d9502:	f85d fb08 	ldr.w	pc, [sp], #8
   d9506:	bf00      	nop

000d9508 <__aeabi_dcmpgt>:
   d9508:	f84d ed08 	str.w	lr, [sp, #-8]!
   d950c:	f7ff ffc4 	bl	d9498 <__aeabi_cdrcmple>
   d9510:	bf34      	ite	cc
   d9512:	2001      	movcc	r0, #1
   d9514:	2000      	movcs	r0, #0
   d9516:	f85d fb08 	ldr.w	pc, [sp], #8
   d951a:	bf00      	nop

000d951c <__aeabi_d2iz>:
   d951c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9524:	d215      	bcs.n	d9552 <__aeabi_d2iz+0x36>
   d9526:	d511      	bpl.n	d954c <__aeabi_d2iz+0x30>
   d9528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d952c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9530:	d912      	bls.n	d9558 <__aeabi_d2iz+0x3c>
   d9532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d953a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d953e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9542:	fa23 f002 	lsr.w	r0, r3, r2
   d9546:	bf18      	it	ne
   d9548:	4240      	negne	r0, r0
   d954a:	4770      	bx	lr
   d954c:	f04f 0000 	mov.w	r0, #0
   d9550:	4770      	bx	lr
   d9552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9556:	d105      	bne.n	d9564 <__aeabi_d2iz+0x48>
   d9558:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d955c:	bf08      	it	eq
   d955e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9562:	4770      	bx	lr
   d9564:	f04f 0000 	mov.w	r0, #0
   d9568:	4770      	bx	lr
   d956a:	bf00      	nop

000d956c <__aeabi_d2uiz>:
   d956c:	004a      	lsls	r2, r1, #1
   d956e:	d211      	bcs.n	d9594 <__aeabi_d2uiz+0x28>
   d9570:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9574:	d211      	bcs.n	d959a <__aeabi_d2uiz+0x2e>
   d9576:	d50d      	bpl.n	d9594 <__aeabi_d2uiz+0x28>
   d9578:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d957c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9580:	d40e      	bmi.n	d95a0 <__aeabi_d2uiz+0x34>
   d9582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d958a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d958e:	fa23 f002 	lsr.w	r0, r3, r2
   d9592:	4770      	bx	lr
   d9594:	f04f 0000 	mov.w	r0, #0
   d9598:	4770      	bx	lr
   d959a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d959e:	d102      	bne.n	d95a6 <__aeabi_d2uiz+0x3a>
   d95a0:	f04f 30ff 	mov.w	r0, #4294967295
   d95a4:	4770      	bx	lr
   d95a6:	f04f 0000 	mov.w	r0, #0
   d95aa:	4770      	bx	lr

000d95ac <__aeabi_d2f>:
   d95ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d95b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d95b4:	bf24      	itt	cs
   d95b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d95ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d95be:	d90d      	bls.n	d95dc <__aeabi_d2f+0x30>
   d95c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d95c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d95c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d95cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d95d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d95d4:	bf08      	it	eq
   d95d6:	f020 0001 	biceq.w	r0, r0, #1
   d95da:	4770      	bx	lr
   d95dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d95e0:	d121      	bne.n	d9626 <__aeabi_d2f+0x7a>
   d95e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d95e6:	bfbc      	itt	lt
   d95e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d95ec:	4770      	bxlt	lr
   d95ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d95f6:	f1c2 0218 	rsb	r2, r2, #24
   d95fa:	f1c2 0c20 	rsb	ip, r2, #32
   d95fe:	fa10 f30c 	lsls.w	r3, r0, ip
   d9602:	fa20 f002 	lsr.w	r0, r0, r2
   d9606:	bf18      	it	ne
   d9608:	f040 0001 	orrne.w	r0, r0, #1
   d960c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9610:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9614:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9618:	ea40 000c 	orr.w	r0, r0, ip
   d961c:	fa23 f302 	lsr.w	r3, r3, r2
   d9620:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9624:	e7cc      	b.n	d95c0 <__aeabi_d2f+0x14>
   d9626:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d962a:	d107      	bne.n	d963c <__aeabi_d2f+0x90>
   d962c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9630:	bf1e      	ittt	ne
   d9632:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9636:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d963a:	4770      	bxne	lr
   d963c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9640:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9648:	4770      	bx	lr
   d964a:	bf00      	nop

000d964c <atof>:
   d964c:	2100      	movs	r1, #0
   d964e:	f000 bfeb 	b.w	da628 <strtod>
	...

000d9654 <__cxa_atexit>:
   d9654:	b510      	push	{r4, lr}
   d9656:	4c05      	ldr	r4, [pc, #20]	; (d966c <__cxa_atexit+0x18>)
   d9658:	4613      	mov	r3, r2
   d965a:	b12c      	cbz	r4, d9668 <__cxa_atexit+0x14>
   d965c:	460a      	mov	r2, r1
   d965e:	4601      	mov	r1, r0
   d9660:	2002      	movs	r0, #2
   d9662:	f3af 8000 	nop.w
   d9666:	bd10      	pop	{r4, pc}
   d9668:	4620      	mov	r0, r4
   d966a:	bd10      	pop	{r4, pc}
   d966c:	00000000 	.word	0x00000000

000d9670 <localtime>:
   d9670:	b538      	push	{r3, r4, r5, lr}
   d9672:	4b07      	ldr	r3, [pc, #28]	; (d9690 <localtime+0x20>)
   d9674:	681c      	ldr	r4, [r3, #0]
   d9676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9678:	4605      	mov	r5, r0
   d967a:	b91b      	cbnz	r3, d9684 <localtime+0x14>
   d967c:	2024      	movs	r0, #36	; 0x24
   d967e:	f7fd f943 	bl	d6908 <malloc>
   d9682:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9684:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9686:	4628      	mov	r0, r5
   d9688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d968c:	f000 b802 	b.w	d9694 <localtime_r>
   d9690:	2003e094 	.word	0x2003e094

000d9694 <localtime_r>:
   d9694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9698:	460c      	mov	r4, r1
   d969a:	4680      	mov	r8, r0
   d969c:	f001 fde6 	bl	db26c <__gettzinfo>
   d96a0:	4621      	mov	r1, r4
   d96a2:	4607      	mov	r7, r0
   d96a4:	4640      	mov	r0, r8
   d96a6:	f001 fde5 	bl	db274 <gmtime_r>
   d96aa:	6946      	ldr	r6, [r0, #20]
   d96ac:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d96b0:	07b3      	lsls	r3, r6, #30
   d96b2:	4604      	mov	r4, r0
   d96b4:	d105      	bne.n	d96c2 <localtime_r+0x2e>
   d96b6:	2264      	movs	r2, #100	; 0x64
   d96b8:	fb96 f3f2 	sdiv	r3, r6, r2
   d96bc:	fb02 6313 	mls	r3, r2, r3, r6
   d96c0:	b94b      	cbnz	r3, d96d6 <localtime_r+0x42>
   d96c2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d96c6:	fb96 f3f5 	sdiv	r3, r6, r5
   d96ca:	fb05 6513 	mls	r5, r5, r3, r6
   d96ce:	fab5 f385 	clz	r3, r5
   d96d2:	095b      	lsrs	r3, r3, #5
   d96d4:	e000      	b.n	d96d8 <localtime_r+0x44>
   d96d6:	2301      	movs	r3, #1
   d96d8:	4a5f      	ldr	r2, [pc, #380]	; (d9858 <localtime_r+0x1c4>)
   d96da:	2530      	movs	r5, #48	; 0x30
   d96dc:	fb05 2503 	mla	r5, r5, r3, r2
   d96e0:	f001 f8da 	bl	da898 <__tz_lock>
   d96e4:	f001 f8da 	bl	da89c <_tzset_unlocked>
   d96e8:	4b5c      	ldr	r3, [pc, #368]	; (d985c <localtime_r+0x1c8>)
   d96ea:	681b      	ldr	r3, [r3, #0]
   d96ec:	b1f3      	cbz	r3, d972c <localtime_r+0x98>
   d96ee:	687b      	ldr	r3, [r7, #4]
   d96f0:	429e      	cmp	r6, r3
   d96f2:	d105      	bne.n	d9700 <localtime_r+0x6c>
   d96f4:	6839      	ldr	r1, [r7, #0]
   d96f6:	f8d8 3000 	ldr.w	r3, [r8]
   d96fa:	69fa      	ldr	r2, [r7, #28]
   d96fc:	b941      	cbnz	r1, d9710 <localtime_r+0x7c>
   d96fe:	e00a      	b.n	d9716 <localtime_r+0x82>
   d9700:	4630      	mov	r0, r6
   d9702:	f001 f821 	bl	da748 <__tzcalc_limits>
   d9706:	2800      	cmp	r0, #0
   d9708:	d1f4      	bne.n	d96f4 <localtime_r+0x60>
   d970a:	f04f 33ff 	mov.w	r3, #4294967295
   d970e:	e00d      	b.n	d972c <localtime_r+0x98>
   d9710:	4293      	cmp	r3, r2
   d9712:	db08      	blt.n	d9726 <localtime_r+0x92>
   d9714:	e001      	b.n	d971a <localtime_r+0x86>
   d9716:	4293      	cmp	r3, r2
   d9718:	da07      	bge.n	d972a <localtime_r+0x96>
   d971a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d971c:	4293      	cmp	r3, r2
   d971e:	bfac      	ite	ge
   d9720:	2300      	movge	r3, #0
   d9722:	2301      	movlt	r3, #1
   d9724:	e002      	b.n	d972c <localtime_r+0x98>
   d9726:	2300      	movs	r3, #0
   d9728:	e000      	b.n	d972c <localtime_r+0x98>
   d972a:	2301      	movs	r3, #1
   d972c:	6223      	str	r3, [r4, #32]
   d972e:	6a23      	ldr	r3, [r4, #32]
   d9730:	2b01      	cmp	r3, #1
   d9732:	bf0c      	ite	eq
   d9734:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9736:	6a39      	ldrne	r1, [r7, #32]
   d9738:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d973c:	203c      	movs	r0, #60	; 0x3c
   d973e:	fb91 f6f3 	sdiv	r6, r1, r3
   d9742:	fb03 1316 	mls	r3, r3, r6, r1
   d9746:	6861      	ldr	r1, [r4, #4]
   d9748:	fb93 f2f0 	sdiv	r2, r3, r0
   d974c:	fb00 3012 	mls	r0, r0, r2, r3
   d9750:	6823      	ldr	r3, [r4, #0]
   d9752:	1a89      	subs	r1, r1, r2
   d9754:	68a2      	ldr	r2, [r4, #8]
   d9756:	6061      	str	r1, [r4, #4]
   d9758:	1a1b      	subs	r3, r3, r0
   d975a:	1b92      	subs	r2, r2, r6
   d975c:	2b3b      	cmp	r3, #59	; 0x3b
   d975e:	6023      	str	r3, [r4, #0]
   d9760:	60a2      	str	r2, [r4, #8]
   d9762:	dd03      	ble.n	d976c <localtime_r+0xd8>
   d9764:	3101      	adds	r1, #1
   d9766:	6061      	str	r1, [r4, #4]
   d9768:	3b3c      	subs	r3, #60	; 0x3c
   d976a:	e004      	b.n	d9776 <localtime_r+0xe2>
   d976c:	2b00      	cmp	r3, #0
   d976e:	da03      	bge.n	d9778 <localtime_r+0xe4>
   d9770:	3901      	subs	r1, #1
   d9772:	6061      	str	r1, [r4, #4]
   d9774:	333c      	adds	r3, #60	; 0x3c
   d9776:	6023      	str	r3, [r4, #0]
   d9778:	6863      	ldr	r3, [r4, #4]
   d977a:	2b3b      	cmp	r3, #59	; 0x3b
   d977c:	dd03      	ble.n	d9786 <localtime_r+0xf2>
   d977e:	3201      	adds	r2, #1
   d9780:	60a2      	str	r2, [r4, #8]
   d9782:	3b3c      	subs	r3, #60	; 0x3c
   d9784:	e004      	b.n	d9790 <localtime_r+0xfc>
   d9786:	2b00      	cmp	r3, #0
   d9788:	da03      	bge.n	d9792 <localtime_r+0xfe>
   d978a:	3a01      	subs	r2, #1
   d978c:	60a2      	str	r2, [r4, #8]
   d978e:	333c      	adds	r3, #60	; 0x3c
   d9790:	6063      	str	r3, [r4, #4]
   d9792:	68a3      	ldr	r3, [r4, #8]
   d9794:	2b17      	cmp	r3, #23
   d9796:	dd22      	ble.n	d97de <localtime_r+0x14a>
   d9798:	69e2      	ldr	r2, [r4, #28]
   d979a:	3201      	adds	r2, #1
   d979c:	61e2      	str	r2, [r4, #28]
   d979e:	69a2      	ldr	r2, [r4, #24]
   d97a0:	3201      	adds	r2, #1
   d97a2:	2a06      	cmp	r2, #6
   d97a4:	bfc8      	it	gt
   d97a6:	2200      	movgt	r2, #0
   d97a8:	61a2      	str	r2, [r4, #24]
   d97aa:	68e2      	ldr	r2, [r4, #12]
   d97ac:	3b18      	subs	r3, #24
   d97ae:	3201      	adds	r2, #1
   d97b0:	60a3      	str	r3, [r4, #8]
   d97b2:	6923      	ldr	r3, [r4, #16]
   d97b4:	60e2      	str	r2, [r4, #12]
   d97b6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d97ba:	428a      	cmp	r2, r1
   d97bc:	dd46      	ble.n	d984c <localtime_r+0x1b8>
   d97be:	3301      	adds	r3, #1
   d97c0:	2b0c      	cmp	r3, #12
   d97c2:	bf0c      	ite	eq
   d97c4:	6963      	ldreq	r3, [r4, #20]
   d97c6:	6123      	strne	r3, [r4, #16]
   d97c8:	eba2 0201 	sub.w	r2, r2, r1
   d97cc:	60e2      	str	r2, [r4, #12]
   d97ce:	bf01      	itttt	eq
   d97d0:	3301      	addeq	r3, #1
   d97d2:	2200      	moveq	r2, #0
   d97d4:	6122      	streq	r2, [r4, #16]
   d97d6:	6163      	streq	r3, [r4, #20]
   d97d8:	bf08      	it	eq
   d97da:	61e2      	streq	r2, [r4, #28]
   d97dc:	e036      	b.n	d984c <localtime_r+0x1b8>
   d97de:	2b00      	cmp	r3, #0
   d97e0:	da34      	bge.n	d984c <localtime_r+0x1b8>
   d97e2:	69e2      	ldr	r2, [r4, #28]
   d97e4:	3a01      	subs	r2, #1
   d97e6:	61e2      	str	r2, [r4, #28]
   d97e8:	69a2      	ldr	r2, [r4, #24]
   d97ea:	3a01      	subs	r2, #1
   d97ec:	bf48      	it	mi
   d97ee:	2206      	movmi	r2, #6
   d97f0:	61a2      	str	r2, [r4, #24]
   d97f2:	68e2      	ldr	r2, [r4, #12]
   d97f4:	3318      	adds	r3, #24
   d97f6:	3a01      	subs	r2, #1
   d97f8:	60e2      	str	r2, [r4, #12]
   d97fa:	60a3      	str	r3, [r4, #8]
   d97fc:	bb32      	cbnz	r2, d984c <localtime_r+0x1b8>
   d97fe:	6923      	ldr	r3, [r4, #16]
   d9800:	3b01      	subs	r3, #1
   d9802:	d401      	bmi.n	d9808 <localtime_r+0x174>
   d9804:	6123      	str	r3, [r4, #16]
   d9806:	e01d      	b.n	d9844 <localtime_r+0x1b0>
   d9808:	230b      	movs	r3, #11
   d980a:	6123      	str	r3, [r4, #16]
   d980c:	6963      	ldr	r3, [r4, #20]
   d980e:	1e5a      	subs	r2, r3, #1
   d9810:	f012 0f03 	tst.w	r2, #3
   d9814:	6162      	str	r2, [r4, #20]
   d9816:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d981a:	d105      	bne.n	d9828 <localtime_r+0x194>
   d981c:	2164      	movs	r1, #100	; 0x64
   d981e:	fb93 f2f1 	sdiv	r2, r3, r1
   d9822:	fb01 3212 	mls	r2, r1, r2, r3
   d9826:	b94a      	cbnz	r2, d983c <localtime_r+0x1a8>
   d9828:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d982c:	fb93 f2f1 	sdiv	r2, r3, r1
   d9830:	fb01 3312 	mls	r3, r1, r2, r3
   d9834:	fab3 f383 	clz	r3, r3
   d9838:	095b      	lsrs	r3, r3, #5
   d983a:	e000      	b.n	d983e <localtime_r+0x1aa>
   d983c:	2301      	movs	r3, #1
   d983e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9842:	61e3      	str	r3, [r4, #28]
   d9844:	6923      	ldr	r3, [r4, #16]
   d9846:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d984a:	60e3      	str	r3, [r4, #12]
   d984c:	f001 f825 	bl	da89a <__tz_unlock>
   d9850:	4620      	mov	r0, r4
   d9852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9856:	bf00      	nop
   d9858:	000dc968 	.word	0x000dc968
   d985c:	2003e7e4 	.word	0x2003e7e4

000d9860 <_localeconv_r>:
   d9860:	4800      	ldr	r0, [pc, #0]	; (d9864 <_localeconv_r+0x4>)
   d9862:	4770      	bx	lr
   d9864:	2003e098 	.word	0x2003e098

000d9868 <memcpy>:
   d9868:	b510      	push	{r4, lr}
   d986a:	1e43      	subs	r3, r0, #1
   d986c:	440a      	add	r2, r1
   d986e:	4291      	cmp	r1, r2
   d9870:	d004      	beq.n	d987c <memcpy+0x14>
   d9872:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9876:	f803 4f01 	strb.w	r4, [r3, #1]!
   d987a:	e7f8      	b.n	d986e <memcpy+0x6>
   d987c:	bd10      	pop	{r4, pc}

000d987e <memset>:
   d987e:	4402      	add	r2, r0
   d9880:	4603      	mov	r3, r0
   d9882:	4293      	cmp	r3, r2
   d9884:	d002      	beq.n	d988c <memset+0xe>
   d9886:	f803 1b01 	strb.w	r1, [r3], #1
   d988a:	e7fa      	b.n	d9882 <memset+0x4>
   d988c:	4770      	bx	lr
	...

000d9890 <srand>:
   d9890:	b538      	push	{r3, r4, r5, lr}
   d9892:	4b12      	ldr	r3, [pc, #72]	; (d98dc <srand+0x4c>)
   d9894:	681c      	ldr	r4, [r3, #0]
   d9896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9898:	4605      	mov	r5, r0
   d989a:	b9d3      	cbnz	r3, d98d2 <srand+0x42>
   d989c:	2018      	movs	r0, #24
   d989e:	f7fd f833 	bl	d6908 <malloc>
   d98a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d98a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d98a8:	8003      	strh	r3, [r0, #0]
   d98aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d98ae:	8043      	strh	r3, [r0, #2]
   d98b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d98b4:	8083      	strh	r3, [r0, #4]
   d98b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d98ba:	80c3      	strh	r3, [r0, #6]
   d98bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d98c0:	8103      	strh	r3, [r0, #8]
   d98c2:	2305      	movs	r3, #5
   d98c4:	8143      	strh	r3, [r0, #10]
   d98c6:	230b      	movs	r3, #11
   d98c8:	8183      	strh	r3, [r0, #12]
   d98ca:	2201      	movs	r2, #1
   d98cc:	2300      	movs	r3, #0
   d98ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d98d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d98d4:	2200      	movs	r2, #0
   d98d6:	611d      	str	r5, [r3, #16]
   d98d8:	615a      	str	r2, [r3, #20]
   d98da:	bd38      	pop	{r3, r4, r5, pc}
   d98dc:	2003e094 	.word	0x2003e094

000d98e0 <strchr>:
   d98e0:	b2c9      	uxtb	r1, r1
   d98e2:	4603      	mov	r3, r0
   d98e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d98e8:	b11a      	cbz	r2, d98f2 <strchr+0x12>
   d98ea:	4291      	cmp	r1, r2
   d98ec:	d1f9      	bne.n	d98e2 <strchr+0x2>
   d98ee:	4618      	mov	r0, r3
   d98f0:	4770      	bx	lr
   d98f2:	2900      	cmp	r1, #0
   d98f4:	bf0c      	ite	eq
   d98f6:	4618      	moveq	r0, r3
   d98f8:	2000      	movne	r0, #0
   d98fa:	4770      	bx	lr

000d98fc <strcmp>:
   d98fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9900:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9904:	2a01      	cmp	r2, #1
   d9906:	bf28      	it	cs
   d9908:	429a      	cmpcs	r2, r3
   d990a:	d0f7      	beq.n	d98fc <strcmp>
   d990c:	1ad0      	subs	r0, r2, r3
   d990e:	4770      	bx	lr

000d9910 <strcpy>:
   d9910:	4603      	mov	r3, r0
   d9912:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9916:	f803 2b01 	strb.w	r2, [r3], #1
   d991a:	2a00      	cmp	r2, #0
   d991c:	d1f9      	bne.n	d9912 <strcpy+0x2>
   d991e:	4770      	bx	lr

000d9920 <strdup>:
   d9920:	4b02      	ldr	r3, [pc, #8]	; (d992c <strdup+0xc>)
   d9922:	4601      	mov	r1, r0
   d9924:	6818      	ldr	r0, [r3, #0]
   d9926:	f000 b803 	b.w	d9930 <_strdup_r>
   d992a:	bf00      	nop
   d992c:	2003e094 	.word	0x2003e094

000d9930 <_strdup_r>:
   d9930:	b570      	push	{r4, r5, r6, lr}
   d9932:	4606      	mov	r6, r0
   d9934:	4608      	mov	r0, r1
   d9936:	460c      	mov	r4, r1
   d9938:	f000 f80d 	bl	d9956 <strlen>
   d993c:	1c45      	adds	r5, r0, #1
   d993e:	4629      	mov	r1, r5
   d9940:	4630      	mov	r0, r6
   d9942:	f7fd f811 	bl	d6968 <_malloc_r>
   d9946:	4606      	mov	r6, r0
   d9948:	b118      	cbz	r0, d9952 <_strdup_r+0x22>
   d994a:	462a      	mov	r2, r5
   d994c:	4621      	mov	r1, r4
   d994e:	f7ff ff8b 	bl	d9868 <memcpy>
   d9952:	4630      	mov	r0, r6
   d9954:	bd70      	pop	{r4, r5, r6, pc}

000d9956 <strlen>:
   d9956:	4603      	mov	r3, r0
   d9958:	f813 2b01 	ldrb.w	r2, [r3], #1
   d995c:	2a00      	cmp	r2, #0
   d995e:	d1fb      	bne.n	d9958 <strlen+0x2>
   d9960:	1a18      	subs	r0, r3, r0
   d9962:	3801      	subs	r0, #1
   d9964:	4770      	bx	lr

000d9966 <strncmp>:
   d9966:	b530      	push	{r4, r5, lr}
   d9968:	b182      	cbz	r2, d998c <strncmp+0x26>
   d996a:	1e45      	subs	r5, r0, #1
   d996c:	3901      	subs	r1, #1
   d996e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9972:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9976:	42a3      	cmp	r3, r4
   d9978:	d106      	bne.n	d9988 <strncmp+0x22>
   d997a:	43ec      	mvns	r4, r5
   d997c:	4414      	add	r4, r2
   d997e:	42e0      	cmn	r0, r4
   d9980:	d001      	beq.n	d9986 <strncmp+0x20>
   d9982:	2b00      	cmp	r3, #0
   d9984:	d1f3      	bne.n	d996e <strncmp+0x8>
   d9986:	461c      	mov	r4, r3
   d9988:	1b18      	subs	r0, r3, r4
   d998a:	bd30      	pop	{r4, r5, pc}
   d998c:	4610      	mov	r0, r2
   d998e:	bd30      	pop	{r4, r5, pc}

000d9990 <strncpy>:
   d9990:	b510      	push	{r4, lr}
   d9992:	4603      	mov	r3, r0
   d9994:	b142      	cbz	r2, d99a8 <strncpy+0x18>
   d9996:	f811 4b01 	ldrb.w	r4, [r1], #1
   d999a:	f803 4b01 	strb.w	r4, [r3], #1
   d999e:	3a01      	subs	r2, #1
   d99a0:	2c00      	cmp	r4, #0
   d99a2:	d1f7      	bne.n	d9994 <strncpy+0x4>
   d99a4:	441a      	add	r2, r3
   d99a6:	e000      	b.n	d99aa <strncpy+0x1a>
   d99a8:	bd10      	pop	{r4, pc}
   d99aa:	4293      	cmp	r3, r2
   d99ac:	d002      	beq.n	d99b4 <strncpy+0x24>
   d99ae:	f803 4b01 	strb.w	r4, [r3], #1
   d99b2:	e7fa      	b.n	d99aa <strncpy+0x1a>
   d99b4:	bd10      	pop	{r4, pc}

000d99b6 <strstr>:
   d99b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d99b8:	7803      	ldrb	r3, [r0, #0]
   d99ba:	b963      	cbnz	r3, d99d6 <strstr+0x20>
   d99bc:	780b      	ldrb	r3, [r1, #0]
   d99be:	2b00      	cmp	r3, #0
   d99c0:	bf18      	it	ne
   d99c2:	2000      	movne	r0, #0
   d99c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d99c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d99ca:	b162      	cbz	r2, d99e6 <strstr+0x30>
   d99cc:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d99d0:	4297      	cmp	r7, r2
   d99d2:	4630      	mov	r0, r6
   d99d4:	d0f7      	beq.n	d99c6 <strstr+0x10>
   d99d6:	4603      	mov	r3, r0
   d99d8:	1c46      	adds	r6, r0, #1
   d99da:	7800      	ldrb	r0, [r0, #0]
   d99dc:	b110      	cbz	r0, d99e4 <strstr+0x2e>
   d99de:	1e4d      	subs	r5, r1, #1
   d99e0:	1e5c      	subs	r4, r3, #1
   d99e2:	e7f0      	b.n	d99c6 <strstr+0x10>
   d99e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d99e6:	4618      	mov	r0, r3
   d99e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d99ea <sulp>:
   d99ea:	b570      	push	{r4, r5, r6, lr}
   d99ec:	4604      	mov	r4, r0
   d99ee:	460d      	mov	r5, r1
   d99f0:	ec45 4b10 	vmov	d0, r4, r5
   d99f4:	4616      	mov	r6, r2
   d99f6:	f001 ff9b 	bl	db930 <__ulp>
   d99fa:	ec51 0b10 	vmov	r0, r1, d0
   d99fe:	b17e      	cbz	r6, d9a20 <sulp+0x36>
   d9a00:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9a04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9a08:	2b00      	cmp	r3, #0
   d9a0a:	dd09      	ble.n	d9a20 <sulp+0x36>
   d9a0c:	051b      	lsls	r3, r3, #20
   d9a0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9a12:	2400      	movs	r4, #0
   d9a14:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9a18:	4622      	mov	r2, r4
   d9a1a:	462b      	mov	r3, r5
   d9a1c:	f7ff fae4 	bl	d8fe8 <__aeabi_dmul>
   d9a20:	bd70      	pop	{r4, r5, r6, pc}
   d9a22:	0000      	movs	r0, r0
   d9a24:	0000      	movs	r0, r0
	...

000d9a28 <_strtod_r>:
   d9a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a2c:	b09d      	sub	sp, #116	; 0x74
   d9a2e:	2300      	movs	r3, #0
   d9a30:	9002      	str	r0, [sp, #8]
   d9a32:	460c      	mov	r4, r1
   d9a34:	9213      	str	r2, [sp, #76]	; 0x4c
   d9a36:	9318      	str	r3, [sp, #96]	; 0x60
   d9a38:	f04f 0a00 	mov.w	sl, #0
   d9a3c:	f04f 0b00 	mov.w	fp, #0
   d9a40:	9117      	str	r1, [sp, #92]	; 0x5c
   d9a42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9a44:	781a      	ldrb	r2, [r3, #0]
   d9a46:	2a0d      	cmp	r2, #13
   d9a48:	d805      	bhi.n	d9a56 <_strtod_r+0x2e>
   d9a4a:	2a09      	cmp	r2, #9
   d9a4c:	d213      	bcs.n	d9a76 <_strtod_r+0x4e>
   d9a4e:	2a00      	cmp	r2, #0
   d9a50:	f000 81ac 	beq.w	d9dac <_strtod_r+0x384>
   d9a54:	e012      	b.n	d9a7c <_strtod_r+0x54>
   d9a56:	2a2b      	cmp	r2, #43	; 0x2b
   d9a58:	d004      	beq.n	d9a64 <_strtod_r+0x3c>
   d9a5a:	2a2d      	cmp	r2, #45	; 0x2d
   d9a5c:	d004      	beq.n	d9a68 <_strtod_r+0x40>
   d9a5e:	2a20      	cmp	r2, #32
   d9a60:	d10c      	bne.n	d9a7c <_strtod_r+0x54>
   d9a62:	e008      	b.n	d9a76 <_strtod_r+0x4e>
   d9a64:	2200      	movs	r2, #0
   d9a66:	e000      	b.n	d9a6a <_strtod_r+0x42>
   d9a68:	2201      	movs	r2, #1
   d9a6a:	920c      	str	r2, [sp, #48]	; 0x30
   d9a6c:	1c5a      	adds	r2, r3, #1
   d9a6e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9a70:	785b      	ldrb	r3, [r3, #1]
   d9a72:	b92b      	cbnz	r3, d9a80 <_strtod_r+0x58>
   d9a74:	e19a      	b.n	d9dac <_strtod_r+0x384>
   d9a76:	3301      	adds	r3, #1
   d9a78:	9317      	str	r3, [sp, #92]	; 0x5c
   d9a7a:	e7e2      	b.n	d9a42 <_strtod_r+0x1a>
   d9a7c:	2300      	movs	r3, #0
   d9a7e:	930c      	str	r3, [sp, #48]	; 0x30
   d9a80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9a82:	782b      	ldrb	r3, [r5, #0]
   d9a84:	2b30      	cmp	r3, #48	; 0x30
   d9a86:	d15c      	bne.n	d9b42 <_strtod_r+0x11a>
   d9a88:	786b      	ldrb	r3, [r5, #1]
   d9a8a:	2b58      	cmp	r3, #88	; 0x58
   d9a8c:	d001      	beq.n	d9a92 <_strtod_r+0x6a>
   d9a8e:	2b78      	cmp	r3, #120	; 0x78
   d9a90:	d14c      	bne.n	d9b2c <_strtod_r+0x104>
   d9a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9a94:	9301      	str	r3, [sp, #4]
   d9a96:	ab18      	add	r3, sp, #96	; 0x60
   d9a98:	9300      	str	r3, [sp, #0]
   d9a9a:	4aa9      	ldr	r2, [pc, #676]	; (d9d40 <_strtod_r+0x318>)
   d9a9c:	9802      	ldr	r0, [sp, #8]
   d9a9e:	ab19      	add	r3, sp, #100	; 0x64
   d9aa0:	a917      	add	r1, sp, #92	; 0x5c
   d9aa2:	f001 f8cc 	bl	dac3e <__gethex>
   d9aa6:	f010 0607 	ands.w	r6, r0, #7
   d9aaa:	4604      	mov	r4, r0
   d9aac:	f000 8587 	beq.w	da5be <_strtod_r+0xb96>
   d9ab0:	2e06      	cmp	r6, #6
   d9ab2:	d105      	bne.n	d9ac0 <_strtod_r+0x98>
   d9ab4:	3501      	adds	r5, #1
   d9ab6:	2300      	movs	r3, #0
   d9ab8:	9517      	str	r5, [sp, #92]	; 0x5c
   d9aba:	930c      	str	r3, [sp, #48]	; 0x30
   d9abc:	f000 bd7f 	b.w	da5be <_strtod_r+0xb96>
   d9ac0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9ac2:	b13a      	cbz	r2, d9ad4 <_strtod_r+0xac>
   d9ac4:	2135      	movs	r1, #53	; 0x35
   d9ac6:	a81a      	add	r0, sp, #104	; 0x68
   d9ac8:	f002 f81f 	bl	dbb0a <__copybits>
   d9acc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9ace:	9802      	ldr	r0, [sp, #8]
   d9ad0:	f001 fc9d 	bl	db40e <_Bfree>
   d9ad4:	2e06      	cmp	r6, #6
   d9ad6:	d822      	bhi.n	d9b1e <_strtod_r+0xf6>
   d9ad8:	e8df f006 	tbb	[pc, r6]
   d9adc:	18080d04 	.word	0x18080d04
   d9ae0:	0d1d      	.short	0x0d1d
   d9ae2:	04          	.byte	0x04
   d9ae3:	00          	.byte	0x00
   d9ae4:	f04f 0b00 	mov.w	fp, #0
   d9ae8:	46da      	mov	sl, fp
   d9aea:	e018      	b.n	d9b1e <_strtod_r+0xf6>
   d9aec:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9af0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9af4:	e013      	b.n	d9b1e <_strtod_r+0xf6>
   d9af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9afa:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9afe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9b02:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9b06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9b0a:	e008      	b.n	d9b1e <_strtod_r+0xf6>
   d9b0c:	f8df b234 	ldr.w	fp, [pc, #564]	; d9d44 <_strtod_r+0x31c>
   d9b10:	f04f 0a00 	mov.w	sl, #0
   d9b14:	e003      	b.n	d9b1e <_strtod_r+0xf6>
   d9b16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9b1a:	f04f 3aff 	mov.w	sl, #4294967295
   d9b1e:	0721      	lsls	r1, r4, #28
   d9b20:	f140 854d 	bpl.w	da5be <_strtod_r+0xb96>
   d9b24:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9b28:	f000 bd49 	b.w	da5be <_strtod_r+0xb96>
   d9b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9b2e:	1c5a      	adds	r2, r3, #1
   d9b30:	9217      	str	r2, [sp, #92]	; 0x5c
   d9b32:	785b      	ldrb	r3, [r3, #1]
   d9b34:	2b30      	cmp	r3, #48	; 0x30
   d9b36:	d0f9      	beq.n	d9b2c <_strtod_r+0x104>
   d9b38:	2b00      	cmp	r3, #0
   d9b3a:	f000 8540 	beq.w	da5be <_strtod_r+0xb96>
   d9b3e:	2301      	movs	r3, #1
   d9b40:	e000      	b.n	d9b44 <_strtod_r+0x11c>
   d9b42:	2300      	movs	r3, #0
   d9b44:	f04f 0800 	mov.w	r8, #0
   d9b48:	9306      	str	r3, [sp, #24]
   d9b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9b4c:	9307      	str	r3, [sp, #28]
   d9b4e:	f8cd 8014 	str.w	r8, [sp, #20]
   d9b52:	f8cd 8010 	str.w	r8, [sp, #16]
   d9b56:	220a      	movs	r2, #10
   d9b58:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9b5a:	782e      	ldrb	r6, [r5, #0]
   d9b5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9b60:	b2d9      	uxtb	r1, r3
   d9b62:	2909      	cmp	r1, #9
   d9b64:	d80e      	bhi.n	d9b84 <_strtod_r+0x15c>
   d9b66:	9904      	ldr	r1, [sp, #16]
   d9b68:	2908      	cmp	r1, #8
   d9b6a:	bfdd      	ittte	le
   d9b6c:	9905      	ldrle	r1, [sp, #20]
   d9b6e:	fb02 3301 	mlale	r3, r2, r1, r3
   d9b72:	9305      	strle	r3, [sp, #20]
   d9b74:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9b78:	9b04      	ldr	r3, [sp, #16]
   d9b7a:	3501      	adds	r5, #1
   d9b7c:	3301      	adds	r3, #1
   d9b7e:	9304      	str	r3, [sp, #16]
   d9b80:	9517      	str	r5, [sp, #92]	; 0x5c
   d9b82:	e7e9      	b.n	d9b58 <_strtod_r+0x130>
   d9b84:	9802      	ldr	r0, [sp, #8]
   d9b86:	f7ff fe6b 	bl	d9860 <_localeconv_r>
   d9b8a:	6807      	ldr	r7, [r0, #0]
   d9b8c:	9802      	ldr	r0, [sp, #8]
   d9b8e:	f7ff fe67 	bl	d9860 <_localeconv_r>
   d9b92:	6800      	ldr	r0, [r0, #0]
   d9b94:	f7ff fedf 	bl	d9956 <strlen>
   d9b98:	4639      	mov	r1, r7
   d9b9a:	4602      	mov	r2, r0
   d9b9c:	4628      	mov	r0, r5
   d9b9e:	f7ff fee2 	bl	d9966 <strncmp>
   d9ba2:	4607      	mov	r7, r0
   d9ba4:	b128      	cbz	r0, d9bb2 <_strtod_r+0x18a>
   d9ba6:	2000      	movs	r0, #0
   d9ba8:	4633      	mov	r3, r6
   d9baa:	9d04      	ldr	r5, [sp, #16]
   d9bac:	4602      	mov	r2, r0
   d9bae:	4601      	mov	r1, r0
   d9bb0:	e057      	b.n	d9c62 <_strtod_r+0x23a>
   d9bb2:	9802      	ldr	r0, [sp, #8]
   d9bb4:	f7ff fe54 	bl	d9860 <_localeconv_r>
   d9bb8:	6800      	ldr	r0, [r0, #0]
   d9bba:	f7ff fecc 	bl	d9956 <strlen>
   d9bbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9bc0:	181a      	adds	r2, r3, r0
   d9bc2:	9217      	str	r2, [sp, #92]	; 0x5c
   d9bc4:	9a04      	ldr	r2, [sp, #16]
   d9bc6:	5c1b      	ldrb	r3, [r3, r0]
   d9bc8:	2a00      	cmp	r2, #0
   d9bca:	d142      	bne.n	d9c52 <_strtod_r+0x22a>
   d9bcc:	4610      	mov	r0, r2
   d9bce:	2b30      	cmp	r3, #48	; 0x30
   d9bd0:	d105      	bne.n	d9bde <_strtod_r+0x1b6>
   d9bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9bd4:	1c5a      	adds	r2, r3, #1
   d9bd6:	9217      	str	r2, [sp, #92]	; 0x5c
   d9bd8:	3001      	adds	r0, #1
   d9bda:	785b      	ldrb	r3, [r3, #1]
   d9bdc:	e7f7      	b.n	d9bce <_strtod_r+0x1a6>
   d9bde:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9be2:	2a08      	cmp	r2, #8
   d9be4:	d843      	bhi.n	d9c6e <_strtod_r+0x246>
   d9be6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9be8:	9207      	str	r2, [sp, #28]
   d9bea:	4602      	mov	r2, r0
   d9bec:	2000      	movs	r0, #0
   d9bee:	4605      	mov	r5, r0
   d9bf0:	3b30      	subs	r3, #48	; 0x30
   d9bf2:	f100 0101 	add.w	r1, r0, #1
   d9bf6:	d026      	beq.n	d9c46 <_strtod_r+0x21e>
   d9bf8:	440a      	add	r2, r1
   d9bfa:	eb05 0c00 	add.w	ip, r5, r0
   d9bfe:	4629      	mov	r1, r5
   d9c00:	260a      	movs	r6, #10
   d9c02:	4561      	cmp	r1, ip
   d9c04:	d00e      	beq.n	d9c24 <_strtod_r+0x1fc>
   d9c06:	3101      	adds	r1, #1
   d9c08:	f101 3eff 	add.w	lr, r1, #4294967295
   d9c0c:	f1be 0f08 	cmp.w	lr, #8
   d9c10:	dc03      	bgt.n	d9c1a <_strtod_r+0x1f2>
   d9c12:	9f05      	ldr	r7, [sp, #20]
   d9c14:	4377      	muls	r7, r6
   d9c16:	9705      	str	r7, [sp, #20]
   d9c18:	e7f3      	b.n	d9c02 <_strtod_r+0x1da>
   d9c1a:	2910      	cmp	r1, #16
   d9c1c:	bfd8      	it	le
   d9c1e:	fb06 f808 	mulle.w	r8, r6, r8
   d9c22:	e7ee      	b.n	d9c02 <_strtod_r+0x1da>
   d9c24:	4428      	add	r0, r5
   d9c26:	2808      	cmp	r0, #8
   d9c28:	f100 0501 	add.w	r5, r0, #1
   d9c2c:	dc05      	bgt.n	d9c3a <_strtod_r+0x212>
   d9c2e:	9805      	ldr	r0, [sp, #20]
   d9c30:	210a      	movs	r1, #10
   d9c32:	fb01 3300 	mla	r3, r1, r0, r3
   d9c36:	9305      	str	r3, [sp, #20]
   d9c38:	e004      	b.n	d9c44 <_strtod_r+0x21c>
   d9c3a:	2d10      	cmp	r5, #16
   d9c3c:	bfdc      	itt	le
   d9c3e:	210a      	movle	r1, #10
   d9c40:	fb01 3808 	mlale	r8, r1, r8, r3
   d9c44:	2100      	movs	r1, #0
   d9c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9c48:	1c58      	adds	r0, r3, #1
   d9c4a:	9017      	str	r0, [sp, #92]	; 0x5c
   d9c4c:	785b      	ldrb	r3, [r3, #1]
   d9c4e:	4608      	mov	r0, r1
   d9c50:	e002      	b.n	d9c58 <_strtod_r+0x230>
   d9c52:	9d04      	ldr	r5, [sp, #16]
   d9c54:	4638      	mov	r0, r7
   d9c56:	463a      	mov	r2, r7
   d9c58:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9c5c:	2909      	cmp	r1, #9
   d9c5e:	d9c7      	bls.n	d9bf0 <_strtod_r+0x1c8>
   d9c60:	2101      	movs	r1, #1
   d9c62:	2b65      	cmp	r3, #101	; 0x65
   d9c64:	d001      	beq.n	d9c6a <_strtod_r+0x242>
   d9c66:	2b45      	cmp	r3, #69	; 0x45
   d9c68:	d151      	bne.n	d9d0e <_strtod_r+0x2e6>
   d9c6a:	b96d      	cbnz	r5, d9c88 <_strtod_r+0x260>
   d9c6c:	e004      	b.n	d9c78 <_strtod_r+0x250>
   d9c6e:	2b65      	cmp	r3, #101	; 0x65
   d9c70:	f040 84b3 	bne.w	da5da <_strtod_r+0xbb2>
   d9c74:	2200      	movs	r2, #0
   d9c76:	2101      	movs	r1, #1
   d9c78:	b928      	cbnz	r0, d9c86 <_strtod_r+0x25e>
   d9c7a:	9b06      	ldr	r3, [sp, #24]
   d9c7c:	2b00      	cmp	r3, #0
   d9c7e:	f000 8095 	beq.w	d9dac <_strtod_r+0x384>
   d9c82:	4605      	mov	r5, r0
   d9c84:	e000      	b.n	d9c88 <_strtod_r+0x260>
   d9c86:	2500      	movs	r5, #0
   d9c88:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d9c8a:	1c63      	adds	r3, r4, #1
   d9c8c:	9317      	str	r3, [sp, #92]	; 0x5c
   d9c8e:	7863      	ldrb	r3, [r4, #1]
   d9c90:	2b2b      	cmp	r3, #43	; 0x2b
   d9c92:	d006      	beq.n	d9ca2 <_strtod_r+0x27a>
   d9c94:	2b2d      	cmp	r3, #45	; 0x2d
   d9c96:	d002      	beq.n	d9c9e <_strtod_r+0x276>
   d9c98:	2600      	movs	r6, #0
   d9c9a:	9603      	str	r6, [sp, #12]
   d9c9c:	e006      	b.n	d9cac <_strtod_r+0x284>
   d9c9e:	2301      	movs	r3, #1
   d9ca0:	e000      	b.n	d9ca4 <_strtod_r+0x27c>
   d9ca2:	2300      	movs	r3, #0
   d9ca4:	9303      	str	r3, [sp, #12]
   d9ca6:	1ca3      	adds	r3, r4, #2
   d9ca8:	9317      	str	r3, [sp, #92]	; 0x5c
   d9caa:	78a3      	ldrb	r3, [r4, #2]
   d9cac:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9cb0:	2e09      	cmp	r6, #9
   d9cb2:	d82b      	bhi.n	d9d0c <_strtod_r+0x2e4>
   d9cb4:	2b30      	cmp	r3, #48	; 0x30
   d9cb6:	d104      	bne.n	d9cc2 <_strtod_r+0x29a>
   d9cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9cba:	1c5e      	adds	r6, r3, #1
   d9cbc:	9617      	str	r6, [sp, #92]	; 0x5c
   d9cbe:	785b      	ldrb	r3, [r3, #1]
   d9cc0:	e7f8      	b.n	d9cb4 <_strtod_r+0x28c>
   d9cc2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d9cc6:	2e08      	cmp	r6, #8
   d9cc8:	d821      	bhi.n	d9d0e <_strtod_r+0x2e6>
   d9cca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9cd0:	f04f 0c0a 	mov.w	ip, #10
   d9cd4:	461f      	mov	r7, r3
   d9cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9cd8:	1c5e      	adds	r6, r3, #1
   d9cda:	9617      	str	r6, [sp, #92]	; 0x5c
   d9cdc:	785b      	ldrb	r3, [r3, #1]
   d9cde:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d9ce2:	f1b9 0f09 	cmp.w	r9, #9
   d9ce6:	d804      	bhi.n	d9cf2 <_strtod_r+0x2ca>
   d9ce8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d9cec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9cf0:	e7f1      	b.n	d9cd6 <_strtod_r+0x2ae>
   d9cf2:	1bf6      	subs	r6, r6, r7
   d9cf4:	2e08      	cmp	r6, #8
   d9cf6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d9cfa:	dc02      	bgt.n	d9d02 <_strtod_r+0x2da>
   d9cfc:	45f1      	cmp	r9, lr
   d9cfe:	bfa8      	it	ge
   d9d00:	46f1      	movge	r9, lr
   d9d02:	9e03      	ldr	r6, [sp, #12]
   d9d04:	b12e      	cbz	r6, d9d12 <_strtod_r+0x2ea>
   d9d06:	f1c9 0900 	rsb	r9, r9, #0
   d9d0a:	e002      	b.n	d9d12 <_strtod_r+0x2ea>
   d9d0c:	9417      	str	r4, [sp, #92]	; 0x5c
   d9d0e:	f04f 0900 	mov.w	r9, #0
   d9d12:	2d00      	cmp	r5, #0
   d9d14:	d153      	bne.n	d9dbe <_strtod_r+0x396>
   d9d16:	2800      	cmp	r0, #0
   d9d18:	f040 8451 	bne.w	da5be <_strtod_r+0xb96>
   d9d1c:	9a06      	ldr	r2, [sp, #24]
   d9d1e:	2a00      	cmp	r2, #0
   d9d20:	f040 844d 	bne.w	da5be <_strtod_r+0xb96>
   d9d24:	2900      	cmp	r1, #0
   d9d26:	d141      	bne.n	d9dac <_strtod_r+0x384>
   d9d28:	2b4e      	cmp	r3, #78	; 0x4e
   d9d2a:	d020      	beq.n	d9d6e <_strtod_r+0x346>
   d9d2c:	dc02      	bgt.n	d9d34 <_strtod_r+0x30c>
   d9d2e:	2b49      	cmp	r3, #73	; 0x49
   d9d30:	d00a      	beq.n	d9d48 <_strtod_r+0x320>
   d9d32:	e03b      	b.n	d9dac <_strtod_r+0x384>
   d9d34:	2b69      	cmp	r3, #105	; 0x69
   d9d36:	d007      	beq.n	d9d48 <_strtod_r+0x320>
   d9d38:	2b6e      	cmp	r3, #110	; 0x6e
   d9d3a:	d018      	beq.n	d9d6e <_strtod_r+0x346>
   d9d3c:	e036      	b.n	d9dac <_strtod_r+0x384>
   d9d3e:	bf00      	nop
   d9d40:	000dc9c8 	.word	0x000dc9c8
   d9d44:	7ff00000 	.word	0x7ff00000
   d9d48:	49a8      	ldr	r1, [pc, #672]	; (d9fec <_strtod_r+0x5c4>)
   d9d4a:	a817      	add	r0, sp, #92	; 0x5c
   d9d4c:	f001 f9a8 	bl	db0a0 <__match>
   d9d50:	b360      	cbz	r0, d9dac <_strtod_r+0x384>
   d9d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d54:	49a6      	ldr	r1, [pc, #664]	; (d9ff0 <_strtod_r+0x5c8>)
   d9d56:	3b01      	subs	r3, #1
   d9d58:	a817      	add	r0, sp, #92	; 0x5c
   d9d5a:	9317      	str	r3, [sp, #92]	; 0x5c
   d9d5c:	f001 f9a0 	bl	db0a0 <__match>
   d9d60:	b910      	cbnz	r0, d9d68 <_strtod_r+0x340>
   d9d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d64:	3301      	adds	r3, #1
   d9d66:	9317      	str	r3, [sp, #92]	; 0x5c
   d9d68:	f8df b2a0 	ldr.w	fp, [pc, #672]	; da00c <_strtod_r+0x5e4>
   d9d6c:	e01a      	b.n	d9da4 <_strtod_r+0x37c>
   d9d6e:	49a1      	ldr	r1, [pc, #644]	; (d9ff4 <_strtod_r+0x5cc>)
   d9d70:	a817      	add	r0, sp, #92	; 0x5c
   d9d72:	f001 f995 	bl	db0a0 <__match>
   d9d76:	b1c8      	cbz	r0, d9dac <_strtod_r+0x384>
   d9d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d7a:	781b      	ldrb	r3, [r3, #0]
   d9d7c:	2b28      	cmp	r3, #40	; 0x28
   d9d7e:	d10f      	bne.n	d9da0 <_strtod_r+0x378>
   d9d80:	aa1a      	add	r2, sp, #104	; 0x68
   d9d82:	499d      	ldr	r1, [pc, #628]	; (d9ff8 <_strtod_r+0x5d0>)
   d9d84:	a817      	add	r0, sp, #92	; 0x5c
   d9d86:	f001 f99e 	bl	db0c6 <__hexnan>
   d9d8a:	2805      	cmp	r0, #5
   d9d8c:	d108      	bne.n	d9da0 <_strtod_r+0x378>
   d9d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9d90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9d94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9d98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9d9c:	f000 bc0f 	b.w	da5be <_strtod_r+0xb96>
   d9da0:	f8df b26c 	ldr.w	fp, [pc, #620]	; da010 <_strtod_r+0x5e8>
   d9da4:	f04f 0a00 	mov.w	sl, #0
   d9da8:	f000 bc09 	b.w	da5be <_strtod_r+0xb96>
   d9dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9dae:	9417      	str	r4, [sp, #92]	; 0x5c
   d9db0:	2b00      	cmp	r3, #0
   d9db2:	f000 840f 	beq.w	da5d4 <_strtod_r+0xbac>
   d9db6:	2300      	movs	r3, #0
   d9db8:	930c      	str	r3, [sp, #48]	; 0x30
   d9dba:	f000 bc02 	b.w	da5c2 <_strtod_r+0xb9a>
   d9dbe:	9b04      	ldr	r3, [sp, #16]
   d9dc0:	9805      	ldr	r0, [sp, #20]
   d9dc2:	2b00      	cmp	r3, #0
   d9dc4:	bf08      	it	eq
   d9dc6:	462b      	moveq	r3, r5
   d9dc8:	2d10      	cmp	r5, #16
   d9dca:	462c      	mov	r4, r5
   d9dcc:	ebc2 0909 	rsb	r9, r2, r9
   d9dd0:	bfa8      	it	ge
   d9dd2:	2410      	movge	r4, #16
   d9dd4:	9304      	str	r3, [sp, #16]
   d9dd6:	f7ff f891 	bl	d8efc <__aeabi_ui2d>
   d9dda:	2c09      	cmp	r4, #9
   d9ddc:	4682      	mov	sl, r0
   d9dde:	468b      	mov	fp, r1
   d9de0:	dd13      	ble.n	d9e0a <_strtod_r+0x3e2>
   d9de2:	4b86      	ldr	r3, [pc, #536]	; (d9ffc <_strtod_r+0x5d4>)
   d9de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d9de8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9dec:	f7ff f8fc 	bl	d8fe8 <__aeabi_dmul>
   d9df0:	4606      	mov	r6, r0
   d9df2:	4640      	mov	r0, r8
   d9df4:	460f      	mov	r7, r1
   d9df6:	f7ff f881 	bl	d8efc <__aeabi_ui2d>
   d9dfa:	4602      	mov	r2, r0
   d9dfc:	460b      	mov	r3, r1
   d9dfe:	4630      	mov	r0, r6
   d9e00:	4639      	mov	r1, r7
   d9e02:	f7fe ff3f 	bl	d8c84 <__adddf3>
   d9e06:	4682      	mov	sl, r0
   d9e08:	468b      	mov	fp, r1
   d9e0a:	2d0f      	cmp	r5, #15
   d9e0c:	dc36      	bgt.n	d9e7c <_strtod_r+0x454>
   d9e0e:	f1b9 0f00 	cmp.w	r9, #0
   d9e12:	f000 83d4 	beq.w	da5be <_strtod_r+0xb96>
   d9e16:	dd24      	ble.n	d9e62 <_strtod_r+0x43a>
   d9e18:	f1b9 0f16 	cmp.w	r9, #22
   d9e1c:	dc07      	bgt.n	d9e2e <_strtod_r+0x406>
   d9e1e:	4d77      	ldr	r5, [pc, #476]	; (d9ffc <_strtod_r+0x5d4>)
   d9e20:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d9e24:	4652      	mov	r2, sl
   d9e26:	465b      	mov	r3, fp
   d9e28:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9e2c:	e014      	b.n	d9e58 <_strtod_r+0x430>
   d9e2e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9e32:	4599      	cmp	r9, r3
   d9e34:	dc22      	bgt.n	d9e7c <_strtod_r+0x454>
   d9e36:	4c71      	ldr	r4, [pc, #452]	; (d9ffc <_strtod_r+0x5d4>)
   d9e38:	f1c5 050f 	rsb	r5, r5, #15
   d9e3c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9e40:	ebc5 0509 	rsb	r5, r5, r9
   d9e44:	4652      	mov	r2, sl
   d9e46:	465b      	mov	r3, fp
   d9e48:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9e4c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9e50:	f7ff f8ca 	bl	d8fe8 <__aeabi_dmul>
   d9e54:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9e58:	f7ff f8c6 	bl	d8fe8 <__aeabi_dmul>
   d9e5c:	4682      	mov	sl, r0
   d9e5e:	468b      	mov	fp, r1
   d9e60:	e3ad      	b.n	da5be <_strtod_r+0xb96>
   d9e62:	f119 0f16 	cmn.w	r9, #22
   d9e66:	db09      	blt.n	d9e7c <_strtod_r+0x454>
   d9e68:	4d64      	ldr	r5, [pc, #400]	; (d9ffc <_strtod_r+0x5d4>)
   d9e6a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d9e6e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9e72:	4650      	mov	r0, sl
   d9e74:	4659      	mov	r1, fp
   d9e76:	f7ff f9e1 	bl	d923c <__aeabi_ddiv>
   d9e7a:	e7ef      	b.n	d9e5c <_strtod_r+0x434>
   d9e7c:	1b2c      	subs	r4, r5, r4
   d9e7e:	444c      	add	r4, r9
   d9e80:	2c00      	cmp	r4, #0
   d9e82:	dd57      	ble.n	d9f34 <_strtod_r+0x50c>
   d9e84:	f014 010f 	ands.w	r1, r4, #15
   d9e88:	d00a      	beq.n	d9ea0 <_strtod_r+0x478>
   d9e8a:	4b5c      	ldr	r3, [pc, #368]	; (d9ffc <_strtod_r+0x5d4>)
   d9e8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9e90:	4652      	mov	r2, sl
   d9e92:	465b      	mov	r3, fp
   d9e94:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9e98:	f7ff f8a6 	bl	d8fe8 <__aeabi_dmul>
   d9e9c:	4682      	mov	sl, r0
   d9e9e:	468b      	mov	fp, r1
   d9ea0:	f034 040f 	bics.w	r4, r4, #15
   d9ea4:	f000 80b8 	beq.w	da018 <_strtod_r+0x5f0>
   d9ea8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d9eac:	dd0b      	ble.n	d9ec6 <_strtod_r+0x49e>
   d9eae:	2400      	movs	r4, #0
   d9eb0:	4625      	mov	r5, r4
   d9eb2:	9405      	str	r4, [sp, #20]
   d9eb4:	9404      	str	r4, [sp, #16]
   d9eb6:	9a02      	ldr	r2, [sp, #8]
   d9eb8:	f8df b150 	ldr.w	fp, [pc, #336]	; da00c <_strtod_r+0x5e4>
   d9ebc:	2322      	movs	r3, #34	; 0x22
   d9ebe:	6013      	str	r3, [r2, #0]
   d9ec0:	f04f 0a00 	mov.w	sl, #0
   d9ec4:	e187      	b.n	da1d6 <_strtod_r+0x7ae>
   d9ec6:	4e4e      	ldr	r6, [pc, #312]	; (da000 <_strtod_r+0x5d8>)
   d9ec8:	2300      	movs	r3, #0
   d9eca:	1124      	asrs	r4, r4, #4
   d9ecc:	4650      	mov	r0, sl
   d9ece:	4659      	mov	r1, fp
   d9ed0:	4698      	mov	r8, r3
   d9ed2:	4637      	mov	r7, r6
   d9ed4:	2c01      	cmp	r4, #1
   d9ed6:	dd0b      	ble.n	d9ef0 <_strtod_r+0x4c8>
   d9ed8:	07e2      	lsls	r2, r4, #31
   d9eda:	d504      	bpl.n	d9ee6 <_strtod_r+0x4be>
   d9edc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9ee0:	f7ff f882 	bl	d8fe8 <__aeabi_dmul>
   d9ee4:	2301      	movs	r3, #1
   d9ee6:	f108 0801 	add.w	r8, r8, #1
   d9eea:	1064      	asrs	r4, r4, #1
   d9eec:	3608      	adds	r6, #8
   d9eee:	e7f1      	b.n	d9ed4 <_strtod_r+0x4ac>
   d9ef0:	b10b      	cbz	r3, d9ef6 <_strtod_r+0x4ce>
   d9ef2:	4682      	mov	sl, r0
   d9ef4:	468b      	mov	fp, r1
   d9ef6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9efa:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d9efe:	4652      	mov	r2, sl
   d9f00:	465b      	mov	r3, fp
   d9f02:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9f06:	f7ff f86f 	bl	d8fe8 <__aeabi_dmul>
   d9f0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9f0e:	468b      	mov	fp, r1
   d9f10:	460a      	mov	r2, r1
   d9f12:	0d1b      	lsrs	r3, r3, #20
   d9f14:	493b      	ldr	r1, [pc, #236]	; (da004 <_strtod_r+0x5dc>)
   d9f16:	051b      	lsls	r3, r3, #20
   d9f18:	428b      	cmp	r3, r1
   d9f1a:	4682      	mov	sl, r0
   d9f1c:	d8c7      	bhi.n	d9eae <_strtod_r+0x486>
   d9f1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9f22:	428b      	cmp	r3, r1
   d9f24:	bf86      	itte	hi
   d9f26:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; da014 <_strtod_r+0x5ec>
   d9f2a:	f04f 3aff 	movhi.w	sl, #4294967295
   d9f2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9f32:	e071      	b.n	da018 <_strtod_r+0x5f0>
   d9f34:	d070      	beq.n	da018 <_strtod_r+0x5f0>
   d9f36:	4264      	negs	r4, r4
   d9f38:	f014 020f 	ands.w	r2, r4, #15
   d9f3c:	d00a      	beq.n	d9f54 <_strtod_r+0x52c>
   d9f3e:	4b2f      	ldr	r3, [pc, #188]	; (d9ffc <_strtod_r+0x5d4>)
   d9f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9f44:	4650      	mov	r0, sl
   d9f46:	4659      	mov	r1, fp
   d9f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f4c:	f7ff f976 	bl	d923c <__aeabi_ddiv>
   d9f50:	4682      	mov	sl, r0
   d9f52:	468b      	mov	fp, r1
   d9f54:	1124      	asrs	r4, r4, #4
   d9f56:	d05f      	beq.n	da018 <_strtod_r+0x5f0>
   d9f58:	2c1f      	cmp	r4, #31
   d9f5a:	dd04      	ble.n	d9f66 <_strtod_r+0x53e>
   d9f5c:	2400      	movs	r4, #0
   d9f5e:	4625      	mov	r5, r4
   d9f60:	9405      	str	r4, [sp, #20]
   d9f62:	9404      	str	r4, [sp, #16]
   d9f64:	e130      	b.n	da1c8 <_strtod_r+0x7a0>
   d9f66:	f014 0f10 	tst.w	r4, #16
   d9f6a:	bf0c      	ite	eq
   d9f6c:	2300      	moveq	r3, #0
   d9f6e:	236a      	movne	r3, #106	; 0x6a
   d9f70:	4e25      	ldr	r6, [pc, #148]	; (da008 <_strtod_r+0x5e0>)
   d9f72:	9303      	str	r3, [sp, #12]
   d9f74:	4650      	mov	r0, sl
   d9f76:	4659      	mov	r1, fp
   d9f78:	2300      	movs	r3, #0
   d9f7a:	2c00      	cmp	r4, #0
   d9f7c:	dd09      	ble.n	d9f92 <_strtod_r+0x56a>
   d9f7e:	07e2      	lsls	r2, r4, #31
   d9f80:	d504      	bpl.n	d9f8c <_strtod_r+0x564>
   d9f82:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9f86:	f7ff f82f 	bl	d8fe8 <__aeabi_dmul>
   d9f8a:	2301      	movs	r3, #1
   d9f8c:	1064      	asrs	r4, r4, #1
   d9f8e:	3608      	adds	r6, #8
   d9f90:	e7f3      	b.n	d9f7a <_strtod_r+0x552>
   d9f92:	b10b      	cbz	r3, d9f98 <_strtod_r+0x570>
   d9f94:	4682      	mov	sl, r0
   d9f96:	468b      	mov	fp, r1
   d9f98:	9b03      	ldr	r3, [sp, #12]
   d9f9a:	b1eb      	cbz	r3, d9fd8 <_strtod_r+0x5b0>
   d9f9c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9fa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9fa4:	2b00      	cmp	r3, #0
   d9fa6:	4659      	mov	r1, fp
   d9fa8:	dd16      	ble.n	d9fd8 <_strtod_r+0x5b0>
   d9faa:	2b1f      	cmp	r3, #31
   d9fac:	dd0e      	ble.n	d9fcc <_strtod_r+0x5a4>
   d9fae:	2b34      	cmp	r3, #52	; 0x34
   d9fb0:	bfde      	ittt	le
   d9fb2:	3b20      	suble	r3, #32
   d9fb4:	f04f 32ff 	movle.w	r2, #4294967295
   d9fb8:	fa02 f303 	lslle.w	r3, r2, r3
   d9fbc:	f04f 0a00 	mov.w	sl, #0
   d9fc0:	bfcc      	ite	gt
   d9fc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9fc6:	ea03 0b01 	andle.w	fp, r3, r1
   d9fca:	e005      	b.n	d9fd8 <_strtod_r+0x5b0>
   d9fcc:	f04f 32ff 	mov.w	r2, #4294967295
   d9fd0:	fa02 f303 	lsl.w	r3, r2, r3
   d9fd4:	ea03 0a0a 	and.w	sl, r3, sl
   d9fd8:	2200      	movs	r2, #0
   d9fda:	2300      	movs	r3, #0
   d9fdc:	4650      	mov	r0, sl
   d9fde:	4659      	mov	r1, fp
   d9fe0:	f7ff fa6a 	bl	d94b8 <__aeabi_dcmpeq>
   d9fe4:	2800      	cmp	r0, #0
   d9fe6:	d1b9      	bne.n	d9f5c <_strtod_r+0x534>
   d9fe8:	e018      	b.n	da01c <_strtod_r+0x5f4>
   d9fea:	bf00      	nop
   d9fec:	000dc9f0 	.word	0x000dc9f0
   d9ff0:	000dc9f3 	.word	0x000dc9f3
   d9ff4:	000dc9f9 	.word	0x000dc9f9
   d9ff8:	000dc9dc 	.word	0x000dc9dc
   d9ffc:	000dca68 	.word	0x000dca68
   da000:	000dcb30 	.word	0x000dcb30
   da004:	7ca00000 	.word	0x7ca00000
   da008:	000dca00 	.word	0x000dca00
   da00c:	7ff00000 	.word	0x7ff00000
   da010:	fff80000 	.word	0xfff80000
   da014:	7fefffff 	.word	0x7fefffff
   da018:	2300      	movs	r3, #0
   da01a:	9303      	str	r3, [sp, #12]
   da01c:	9b05      	ldr	r3, [sp, #20]
   da01e:	9300      	str	r3, [sp, #0]
   da020:	9a04      	ldr	r2, [sp, #16]
   da022:	9907      	ldr	r1, [sp, #28]
   da024:	9802      	ldr	r0, [sp, #8]
   da026:	462b      	mov	r3, r5
   da028:	f001 fa43 	bl	db4b2 <__s2b>
   da02c:	9005      	str	r0, [sp, #20]
   da02e:	2800      	cmp	r0, #0
   da030:	f43f af3d 	beq.w	d9eae <_strtod_r+0x486>
   da034:	f1b9 0f00 	cmp.w	r9, #0
   da038:	f1c9 0300 	rsb	r3, r9, #0
   da03c:	bfa8      	it	ge
   da03e:	2300      	movge	r3, #0
   da040:	930d      	str	r3, [sp, #52]	; 0x34
   da042:	2400      	movs	r4, #0
   da044:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   da048:	9312      	str	r3, [sp, #72]	; 0x48
   da04a:	4625      	mov	r5, r4
   da04c:	9b05      	ldr	r3, [sp, #20]
   da04e:	9802      	ldr	r0, [sp, #8]
   da050:	6859      	ldr	r1, [r3, #4]
   da052:	f001 f9a7 	bl	db3a4 <_Balloc>
   da056:	9004      	str	r0, [sp, #16]
   da058:	2800      	cmp	r0, #0
   da05a:	f43f af2c 	beq.w	d9eb6 <_strtod_r+0x48e>
   da05e:	9b05      	ldr	r3, [sp, #20]
   da060:	691a      	ldr	r2, [r3, #16]
   da062:	3202      	adds	r2, #2
   da064:	f103 010c 	add.w	r1, r3, #12
   da068:	0092      	lsls	r2, r2, #2
   da06a:	300c      	adds	r0, #12
   da06c:	f7ff fbfc 	bl	d9868 <memcpy>
   da070:	aa1a      	add	r2, sp, #104	; 0x68
   da072:	a919      	add	r1, sp, #100	; 0x64
   da074:	ec4b ab10 	vmov	d0, sl, fp
   da078:	9802      	ldr	r0, [sp, #8]
   da07a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da07e:	f001 fccc 	bl	dba1a <__d2b>
   da082:	9018      	str	r0, [sp, #96]	; 0x60
   da084:	2800      	cmp	r0, #0
   da086:	f43f af16 	beq.w	d9eb6 <_strtod_r+0x48e>
   da08a:	2101      	movs	r1, #1
   da08c:	9802      	ldr	r0, [sp, #8]
   da08e:	f001 fa9b 	bl	db5c8 <__i2b>
   da092:	4605      	mov	r5, r0
   da094:	2800      	cmp	r0, #0
   da096:	f43f af0e 	beq.w	d9eb6 <_strtod_r+0x48e>
   da09a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da09c:	9903      	ldr	r1, [sp, #12]
   da09e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   da0a0:	2b00      	cmp	r3, #0
   da0a2:	bfad      	iteet	ge
   da0a4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   da0a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   da0a8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   da0ac:	eb02 0803 	addge.w	r8, r2, r3
   da0b0:	bfb8      	it	lt
   da0b2:	1ad2      	sublt	r2, r2, r3
   da0b4:	eba3 0301 	sub.w	r3, r3, r1
   da0b8:	4433      	add	r3, r6
   da0ba:	49b5      	ldr	r1, [pc, #724]	; (da390 <_strtod_r+0x968>)
   da0bc:	bfa8      	it	ge
   da0be:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   da0c0:	3b01      	subs	r3, #1
   da0c2:	428b      	cmp	r3, r1
   da0c4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   da0c8:	f280 808a 	bge.w	da1e0 <_strtod_r+0x7b8>
   da0cc:	1ac9      	subs	r1, r1, r3
   da0ce:	291f      	cmp	r1, #31
   da0d0:	bfc8      	it	gt
   da0d2:	4fb0      	ldrgt	r7, [pc, #704]	; (da394 <_strtod_r+0x96c>)
   da0d4:	f04f 0901 	mov.w	r9, #1
   da0d8:	bfd4      	ite	le
   da0da:	fa09 f301 	lslle.w	r3, r9, r1
   da0de:	1aff      	subgt	r7, r7, r3
   da0e0:	eba6 0601 	sub.w	r6, r6, r1
   da0e4:	bfd9      	ittee	le
   da0e6:	9306      	strle	r3, [sp, #24]
   da0e8:	2700      	movle	r7, #0
   da0ea:	fa09 f707 	lslgt.w	r7, r9, r7
   da0ee:	f8cd 9018 	strgt.w	r9, [sp, #24]
   da0f2:	eb08 0906 	add.w	r9, r8, r6
   da0f6:	9b03      	ldr	r3, [sp, #12]
   da0f8:	45c8      	cmp	r8, r9
   da0fa:	4416      	add	r6, r2
   da0fc:	441e      	add	r6, r3
   da0fe:	4643      	mov	r3, r8
   da100:	bfa8      	it	ge
   da102:	464b      	movge	r3, r9
   da104:	42b3      	cmp	r3, r6
   da106:	bfa8      	it	ge
   da108:	4633      	movge	r3, r6
   da10a:	2b00      	cmp	r3, #0
   da10c:	bfc2      	ittt	gt
   da10e:	ebc3 0909 	rsbgt	r9, r3, r9
   da112:	1af6      	subgt	r6, r6, r3
   da114:	ebc3 0808 	rsbgt	r8, r3, r8
   da118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da11a:	2b00      	cmp	r3, #0
   da11c:	d164      	bne.n	da1e8 <_strtod_r+0x7c0>
   da11e:	f1b9 0f00 	cmp.w	r9, #0
   da122:	dc7a      	bgt.n	da21a <_strtod_r+0x7f2>
   da124:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da126:	2b00      	cmp	r3, #0
   da128:	f040 8081 	bne.w	da22e <_strtod_r+0x806>
   da12c:	2e00      	cmp	r6, #0
   da12e:	f300 8088 	bgt.w	da242 <_strtod_r+0x81a>
   da132:	f1b8 0f00 	cmp.w	r8, #0
   da136:	f300 808e 	bgt.w	da256 <_strtod_r+0x82e>
   da13a:	9a04      	ldr	r2, [sp, #16]
   da13c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da13e:	9802      	ldr	r0, [sp, #8]
   da140:	f001 fb97 	bl	db872 <__mdiff>
   da144:	4604      	mov	r4, r0
   da146:	2800      	cmp	r0, #0
   da148:	f43f aeb5 	beq.w	d9eb6 <_strtod_r+0x48e>
   da14c:	68c3      	ldr	r3, [r0, #12]
   da14e:	9307      	str	r3, [sp, #28]
   da150:	2300      	movs	r3, #0
   da152:	60c3      	str	r3, [r0, #12]
   da154:	4629      	mov	r1, r5
   da156:	f001 fb70 	bl	db83a <__mcmp>
   da15a:	2800      	cmp	r0, #0
   da15c:	f280 8089 	bge.w	da272 <_strtod_r+0x84a>
   da160:	9b07      	ldr	r3, [sp, #28]
   da162:	2b00      	cmp	r3, #0
   da164:	f040 8204 	bne.w	da570 <_strtod_r+0xb48>
   da168:	f1ba 0f00 	cmp.w	sl, #0
   da16c:	f040 8200 	bne.w	da570 <_strtod_r+0xb48>
   da170:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da174:	2b00      	cmp	r3, #0
   da176:	f040 81fb 	bne.w	da570 <_strtod_r+0xb48>
   da17a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da17e:	0d1b      	lsrs	r3, r3, #20
   da180:	051b      	lsls	r3, r3, #20
   da182:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da186:	f240 81f3 	bls.w	da570 <_strtod_r+0xb48>
   da18a:	6963      	ldr	r3, [r4, #20]
   da18c:	2b00      	cmp	r3, #0
   da18e:	d06c      	beq.n	da26a <_strtod_r+0x842>
   da190:	4621      	mov	r1, r4
   da192:	2201      	movs	r2, #1
   da194:	9802      	ldr	r0, [sp, #8]
   da196:	f001 faff 	bl	db798 <__lshift>
   da19a:	4629      	mov	r1, r5
   da19c:	4604      	mov	r4, r0
   da19e:	f001 fb4c 	bl	db83a <__mcmp>
   da1a2:	2800      	cmp	r0, #0
   da1a4:	f340 81e4 	ble.w	da570 <_strtod_r+0xb48>
   da1a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da1ac:	9a03      	ldr	r2, [sp, #12]
   da1ae:	0d1b      	lsrs	r3, r3, #20
   da1b0:	051b      	lsls	r3, r3, #20
   da1b2:	2a00      	cmp	r2, #0
   da1b4:	f000 808c 	beq.w	da2d0 <_strtod_r+0x8a8>
   da1b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da1bc:	f300 8088 	bgt.w	da2d0 <_strtod_r+0x8a8>
   da1c0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   da1c4:	f300 81d6 	bgt.w	da574 <_strtod_r+0xb4c>
   da1c8:	9a02      	ldr	r2, [sp, #8]
   da1ca:	2322      	movs	r3, #34	; 0x22
   da1cc:	f04f 0a00 	mov.w	sl, #0
   da1d0:	f04f 0b00 	mov.w	fp, #0
   da1d4:	6013      	str	r3, [r2, #0]
   da1d6:	9b05      	ldr	r3, [sp, #20]
   da1d8:	2b00      	cmp	r3, #0
   da1da:	f040 81dc 	bne.w	da596 <_strtod_r+0xb6e>
   da1de:	e1ee      	b.n	da5be <_strtod_r+0xb96>
   da1e0:	2301      	movs	r3, #1
   da1e2:	2700      	movs	r7, #0
   da1e4:	9306      	str	r3, [sp, #24]
   da1e6:	e784      	b.n	da0f2 <_strtod_r+0x6ca>
   da1e8:	4629      	mov	r1, r5
   da1ea:	461a      	mov	r2, r3
   da1ec:	9802      	ldr	r0, [sp, #8]
   da1ee:	f001 fa85 	bl	db6fc <__pow5mult>
   da1f2:	4605      	mov	r5, r0
   da1f4:	2800      	cmp	r0, #0
   da1f6:	f43f ae5e 	beq.w	d9eb6 <_strtod_r+0x48e>
   da1fa:	4601      	mov	r1, r0
   da1fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da1fe:	9802      	ldr	r0, [sp, #8]
   da200:	f001 f9eb 	bl	db5da <__multiply>
   da204:	9007      	str	r0, [sp, #28]
   da206:	2800      	cmp	r0, #0
   da208:	f43f ae55 	beq.w	d9eb6 <_strtod_r+0x48e>
   da20c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da20e:	9802      	ldr	r0, [sp, #8]
   da210:	f001 f8fd 	bl	db40e <_Bfree>
   da214:	9b07      	ldr	r3, [sp, #28]
   da216:	9318      	str	r3, [sp, #96]	; 0x60
   da218:	e781      	b.n	da11e <_strtod_r+0x6f6>
   da21a:	464a      	mov	r2, r9
   da21c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da21e:	9802      	ldr	r0, [sp, #8]
   da220:	f001 faba 	bl	db798 <__lshift>
   da224:	9018      	str	r0, [sp, #96]	; 0x60
   da226:	2800      	cmp	r0, #0
   da228:	f47f af7c 	bne.w	da124 <_strtod_r+0x6fc>
   da22c:	e643      	b.n	d9eb6 <_strtod_r+0x48e>
   da22e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da230:	9904      	ldr	r1, [sp, #16]
   da232:	9802      	ldr	r0, [sp, #8]
   da234:	f001 fa62 	bl	db6fc <__pow5mult>
   da238:	9004      	str	r0, [sp, #16]
   da23a:	2800      	cmp	r0, #0
   da23c:	f47f af76 	bne.w	da12c <_strtod_r+0x704>
   da240:	e639      	b.n	d9eb6 <_strtod_r+0x48e>
   da242:	4632      	mov	r2, r6
   da244:	9904      	ldr	r1, [sp, #16]
   da246:	9802      	ldr	r0, [sp, #8]
   da248:	f001 faa6 	bl	db798 <__lshift>
   da24c:	9004      	str	r0, [sp, #16]
   da24e:	2800      	cmp	r0, #0
   da250:	f47f af6f 	bne.w	da132 <_strtod_r+0x70a>
   da254:	e62f      	b.n	d9eb6 <_strtod_r+0x48e>
   da256:	4629      	mov	r1, r5
   da258:	4642      	mov	r2, r8
   da25a:	9802      	ldr	r0, [sp, #8]
   da25c:	f001 fa9c 	bl	db798 <__lshift>
   da260:	4605      	mov	r5, r0
   da262:	2800      	cmp	r0, #0
   da264:	f47f af69 	bne.w	da13a <_strtod_r+0x712>
   da268:	e625      	b.n	d9eb6 <_strtod_r+0x48e>
   da26a:	6923      	ldr	r3, [r4, #16]
   da26c:	2b01      	cmp	r3, #1
   da26e:	dc8f      	bgt.n	da190 <_strtod_r+0x768>
   da270:	e17e      	b.n	da570 <_strtod_r+0xb48>
   da272:	d161      	bne.n	da338 <_strtod_r+0x910>
   da274:	9a07      	ldr	r2, [sp, #28]
   da276:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da27a:	b322      	cbz	r2, da2c6 <_strtod_r+0x89e>
   da27c:	4946      	ldr	r1, [pc, #280]	; (da398 <_strtod_r+0x970>)
   da27e:	428b      	cmp	r3, r1
   da280:	465a      	mov	r2, fp
   da282:	d12e      	bne.n	da2e2 <_strtod_r+0x8ba>
   da284:	9b03      	ldr	r3, [sp, #12]
   da286:	4651      	mov	r1, sl
   da288:	b163      	cbz	r3, da2a4 <_strtod_r+0x87c>
   da28a:	4b44      	ldr	r3, [pc, #272]	; (da39c <_strtod_r+0x974>)
   da28c:	4013      	ands	r3, r2
   da28e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da292:	d807      	bhi.n	da2a4 <_strtod_r+0x87c>
   da294:	0d1b      	lsrs	r3, r3, #20
   da296:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da29a:	f04f 30ff 	mov.w	r0, #4294967295
   da29e:	fa00 f303 	lsl.w	r3, r0, r3
   da2a2:	e001      	b.n	da2a8 <_strtod_r+0x880>
   da2a4:	f04f 33ff 	mov.w	r3, #4294967295
   da2a8:	428b      	cmp	r3, r1
   da2aa:	d11a      	bne.n	da2e2 <_strtod_r+0x8ba>
   da2ac:	493c      	ldr	r1, [pc, #240]	; (da3a0 <_strtod_r+0x978>)
   da2ae:	428a      	cmp	r2, r1
   da2b0:	d102      	bne.n	da2b8 <_strtod_r+0x890>
   da2b2:	3301      	adds	r3, #1
   da2b4:	f43f adff 	beq.w	d9eb6 <_strtod_r+0x48e>
   da2b8:	4b38      	ldr	r3, [pc, #224]	; (da39c <_strtod_r+0x974>)
   da2ba:	4013      	ands	r3, r2
   da2bc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da2c0:	f04f 0a00 	mov.w	sl, #0
   da2c4:	e154      	b.n	da570 <_strtod_r+0xb48>
   da2c6:	b963      	cbnz	r3, da2e2 <_strtod_r+0x8ba>
   da2c8:	f1ba 0f00 	cmp.w	sl, #0
   da2cc:	d109      	bne.n	da2e2 <_strtod_r+0x8ba>
   da2ce:	e76b      	b.n	da1a8 <_strtod_r+0x780>
   da2d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da2d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da2d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da2dc:	f04f 3aff 	mov.w	sl, #4294967295
   da2e0:	e146      	b.n	da570 <_strtod_r+0xb48>
   da2e2:	b117      	cbz	r7, da2ea <_strtod_r+0x8c2>
   da2e4:	ea17 0f0b 	tst.w	r7, fp
   da2e8:	e002      	b.n	da2f0 <_strtod_r+0x8c8>
   da2ea:	9b06      	ldr	r3, [sp, #24]
   da2ec:	ea13 0f0a 	tst.w	r3, sl
   da2f0:	f000 813e 	beq.w	da570 <_strtod_r+0xb48>
   da2f4:	9b07      	ldr	r3, [sp, #28]
   da2f6:	9a03      	ldr	r2, [sp, #12]
   da2f8:	4650      	mov	r0, sl
   da2fa:	4659      	mov	r1, fp
   da2fc:	b153      	cbz	r3, da314 <_strtod_r+0x8ec>
   da2fe:	f7ff fb74 	bl	d99ea <sulp>
   da302:	4602      	mov	r2, r0
   da304:	460b      	mov	r3, r1
   da306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da30a:	f7fe fcbb 	bl	d8c84 <__adddf3>
   da30e:	4682      	mov	sl, r0
   da310:	468b      	mov	fp, r1
   da312:	e12d      	b.n	da570 <_strtod_r+0xb48>
   da314:	f7ff fb69 	bl	d99ea <sulp>
   da318:	4602      	mov	r2, r0
   da31a:	460b      	mov	r3, r1
   da31c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da320:	f7fe fcae 	bl	d8c80 <__aeabi_dsub>
   da324:	2200      	movs	r2, #0
   da326:	2300      	movs	r3, #0
   da328:	4682      	mov	sl, r0
   da32a:	468b      	mov	fp, r1
   da32c:	f7ff f8c4 	bl	d94b8 <__aeabi_dcmpeq>
   da330:	2800      	cmp	r0, #0
   da332:	f47f af49 	bne.w	da1c8 <_strtod_r+0x7a0>
   da336:	e11b      	b.n	da570 <_strtod_r+0xb48>
   da338:	4629      	mov	r1, r5
   da33a:	4620      	mov	r0, r4
   da33c:	f001 fbbb 	bl	dbab6 <__ratio>
   da340:	ec57 6b10 	vmov	r6, r7, d0
   da344:	2200      	movs	r2, #0
   da346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da34a:	ee10 0a10 	vmov	r0, s0
   da34e:	4639      	mov	r1, r7
   da350:	f7ff f8c6 	bl	d94e0 <__aeabi_dcmple>
   da354:	2800      	cmp	r0, #0
   da356:	d042      	beq.n	da3de <_strtod_r+0x9b6>
   da358:	9b07      	ldr	r3, [sp, #28]
   da35a:	b123      	cbz	r3, da366 <_strtod_r+0x93e>
   da35c:	f04f 0800 	mov.w	r8, #0
   da360:	f8df 9040 	ldr.w	r9, [pc, #64]	; da3a4 <_strtod_r+0x97c>
   da364:	e011      	b.n	da38a <_strtod_r+0x962>
   da366:	f1ba 0f00 	cmp.w	sl, #0
   da36a:	d103      	bne.n	da374 <_strtod_r+0x94c>
   da36c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da370:	b93b      	cbnz	r3, da382 <_strtod_r+0x95a>
   da372:	e01b      	b.n	da3ac <_strtod_r+0x984>
   da374:	f1ba 0f01 	cmp.w	sl, #1
   da378:	d103      	bne.n	da382 <_strtod_r+0x95a>
   da37a:	f1bb 0f00 	cmp.w	fp, #0
   da37e:	f43f af23 	beq.w	da1c8 <_strtod_r+0x7a0>
   da382:	f8df 9024 	ldr.w	r9, [pc, #36]	; da3a8 <_strtod_r+0x980>
   da386:	f04f 0800 	mov.w	r8, #0
   da38a:	2600      	movs	r6, #0
   da38c:	4f05      	ldr	r7, [pc, #20]	; (da3a4 <_strtod_r+0x97c>)
   da38e:	e039      	b.n	da404 <_strtod_r+0x9dc>
   da390:	fffffc02 	.word	0xfffffc02
   da394:	fffffbe2 	.word	0xfffffbe2
   da398:	000fffff 	.word	0x000fffff
   da39c:	7ff00000 	.word	0x7ff00000
   da3a0:	7fefffff 	.word	0x7fefffff
   da3a4:	3ff00000 	.word	0x3ff00000
   da3a8:	bff00000 	.word	0xbff00000
   da3ac:	2200      	movs	r2, #0
   da3ae:	4b98      	ldr	r3, [pc, #608]	; (da610 <_strtod_r+0xbe8>)
   da3b0:	4630      	mov	r0, r6
   da3b2:	4639      	mov	r1, r7
   da3b4:	f7ff f88a 	bl	d94cc <__aeabi_dcmplt>
   da3b8:	b940      	cbnz	r0, da3cc <_strtod_r+0x9a4>
   da3ba:	4630      	mov	r0, r6
   da3bc:	4639      	mov	r1, r7
   da3be:	2200      	movs	r2, #0
   da3c0:	4b94      	ldr	r3, [pc, #592]	; (da614 <_strtod_r+0xbec>)
   da3c2:	f7fe fe11 	bl	d8fe8 <__aeabi_dmul>
   da3c6:	4606      	mov	r6, r0
   da3c8:	460f      	mov	r7, r1
   da3ca:	e001      	b.n	da3d0 <_strtod_r+0x9a8>
   da3cc:	4f91      	ldr	r7, [pc, #580]	; (da614 <_strtod_r+0xbec>)
   da3ce:	2600      	movs	r6, #0
   da3d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da3d4:	9614      	str	r6, [sp, #80]	; 0x50
   da3d6:	9315      	str	r3, [sp, #84]	; 0x54
   da3d8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   da3dc:	e012      	b.n	da404 <_strtod_r+0x9dc>
   da3de:	4b8d      	ldr	r3, [pc, #564]	; (da614 <_strtod_r+0xbec>)
   da3e0:	4630      	mov	r0, r6
   da3e2:	4639      	mov	r1, r7
   da3e4:	2200      	movs	r2, #0
   da3e6:	f7fe fdff 	bl	d8fe8 <__aeabi_dmul>
   da3ea:	9b07      	ldr	r3, [sp, #28]
   da3ec:	4606      	mov	r6, r0
   da3ee:	460f      	mov	r7, r1
   da3f0:	b923      	cbnz	r3, da3fc <_strtod_r+0x9d4>
   da3f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da3f6:	900e      	str	r0, [sp, #56]	; 0x38
   da3f8:	930f      	str	r3, [sp, #60]	; 0x3c
   da3fa:	e001      	b.n	da400 <_strtod_r+0x9d8>
   da3fc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   da400:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   da404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da408:	0d1b      	lsrs	r3, r3, #20
   da40a:	051b      	lsls	r3, r3, #20
   da40c:	9306      	str	r3, [sp, #24]
   da40e:	9a06      	ldr	r2, [sp, #24]
   da410:	4b81      	ldr	r3, [pc, #516]	; (da618 <_strtod_r+0xbf0>)
   da412:	429a      	cmp	r2, r3
   da414:	d12b      	bne.n	da46e <_strtod_r+0xa46>
   da416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da41a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da41e:	ec4b ab10 	vmov	d0, sl, fp
   da422:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da426:	f001 fa83 	bl	db930 <__ulp>
   da42a:	4640      	mov	r0, r8
   da42c:	ec53 2b10 	vmov	r2, r3, d0
   da430:	4649      	mov	r1, r9
   da432:	f7fe fdd9 	bl	d8fe8 <__aeabi_dmul>
   da436:	4652      	mov	r2, sl
   da438:	465b      	mov	r3, fp
   da43a:	f7fe fc23 	bl	d8c84 <__adddf3>
   da43e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da442:	0d1b      	lsrs	r3, r3, #20
   da444:	4a75      	ldr	r2, [pc, #468]	; (da61c <_strtod_r+0xbf4>)
   da446:	051b      	lsls	r3, r3, #20
   da448:	4293      	cmp	r3, r2
   da44a:	4682      	mov	sl, r0
   da44c:	d90c      	bls.n	da468 <_strtod_r+0xa40>
   da44e:	4b74      	ldr	r3, [pc, #464]	; (da620 <_strtod_r+0xbf8>)
   da450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da452:	429a      	cmp	r2, r3
   da454:	d103      	bne.n	da45e <_strtod_r+0xa36>
   da456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da458:	3301      	adds	r3, #1
   da45a:	f43f ad2c 	beq.w	d9eb6 <_strtod_r+0x48e>
   da45e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; da620 <_strtod_r+0xbf8>
   da462:	f04f 3aff 	mov.w	sl, #4294967295
   da466:	e072      	b.n	da54e <_strtod_r+0xb26>
   da468:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da46c:	e038      	b.n	da4e0 <_strtod_r+0xab8>
   da46e:	9b03      	ldr	r3, [sp, #12]
   da470:	b333      	cbz	r3, da4c0 <_strtod_r+0xa98>
   da472:	9b06      	ldr	r3, [sp, #24]
   da474:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da478:	d822      	bhi.n	da4c0 <_strtod_r+0xa98>
   da47a:	a35d      	add	r3, pc, #372	; (adr r3, da5f0 <_strtod_r+0xbc8>)
   da47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da480:	4630      	mov	r0, r6
   da482:	4639      	mov	r1, r7
   da484:	f7ff f82c 	bl	d94e0 <__aeabi_dcmple>
   da488:	b1a8      	cbz	r0, da4b6 <_strtod_r+0xa8e>
   da48a:	4639      	mov	r1, r7
   da48c:	4630      	mov	r0, r6
   da48e:	f7ff f86d 	bl	d956c <__aeabi_d2uiz>
   da492:	2800      	cmp	r0, #0
   da494:	bf08      	it	eq
   da496:	2001      	moveq	r0, #1
   da498:	f7fe fd30 	bl	d8efc <__aeabi_ui2d>
   da49c:	9b07      	ldr	r3, [sp, #28]
   da49e:	4606      	mov	r6, r0
   da4a0:	460f      	mov	r7, r1
   da4a2:	b923      	cbnz	r3, da4ae <_strtod_r+0xa86>
   da4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da4a8:	9010      	str	r0, [sp, #64]	; 0x40
   da4aa:	9311      	str	r3, [sp, #68]	; 0x44
   da4ac:	e001      	b.n	da4b2 <_strtod_r+0xa8a>
   da4ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da4b2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da4b6:	9a06      	ldr	r2, [sp, #24]
   da4b8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da4bc:	ebc2 0903 	rsb	r9, r2, r3
   da4c0:	ed9d 0b08 	vldr	d0, [sp, #32]
   da4c4:	f001 fa34 	bl	db930 <__ulp>
   da4c8:	4640      	mov	r0, r8
   da4ca:	ec53 2b10 	vmov	r2, r3, d0
   da4ce:	4649      	mov	r1, r9
   da4d0:	f7fe fd8a 	bl	d8fe8 <__aeabi_dmul>
   da4d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da4d8:	f7fe fbd4 	bl	d8c84 <__adddf3>
   da4dc:	4682      	mov	sl, r0
   da4de:	468b      	mov	fp, r1
   da4e0:	9b03      	ldr	r3, [sp, #12]
   da4e2:	bba3      	cbnz	r3, da54e <_strtod_r+0xb26>
   da4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da4e8:	0d1b      	lsrs	r3, r3, #20
   da4ea:	9a06      	ldr	r2, [sp, #24]
   da4ec:	051b      	lsls	r3, r3, #20
   da4ee:	429a      	cmp	r2, r3
   da4f0:	46d8      	mov	r8, fp
   da4f2:	d12c      	bne.n	da54e <_strtod_r+0xb26>
   da4f4:	4639      	mov	r1, r7
   da4f6:	4630      	mov	r0, r6
   da4f8:	f7ff f810 	bl	d951c <__aeabi_d2iz>
   da4fc:	f7fe fd0e 	bl	d8f1c <__aeabi_i2d>
   da500:	460b      	mov	r3, r1
   da502:	4602      	mov	r2, r0
   da504:	4639      	mov	r1, r7
   da506:	4630      	mov	r0, r6
   da508:	f7fe fbba 	bl	d8c80 <__aeabi_dsub>
   da50c:	9b07      	ldr	r3, [sp, #28]
   da50e:	4606      	mov	r6, r0
   da510:	460f      	mov	r7, r1
   da512:	b92b      	cbnz	r3, da520 <_strtod_r+0xaf8>
   da514:	f1ba 0f00 	cmp.w	sl, #0
   da518:	d102      	bne.n	da520 <_strtod_r+0xaf8>
   da51a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da51e:	b183      	cbz	r3, da542 <_strtod_r+0xb1a>
   da520:	a335      	add	r3, pc, #212	; (adr r3, da5f8 <_strtod_r+0xbd0>)
   da522:	e9d3 2300 	ldrd	r2, r3, [r3]
   da526:	4630      	mov	r0, r6
   da528:	4639      	mov	r1, r7
   da52a:	f7fe ffcf 	bl	d94cc <__aeabi_dcmplt>
   da52e:	2800      	cmp	r0, #0
   da530:	d131      	bne.n	da596 <_strtod_r+0xb6e>
   da532:	a333      	add	r3, pc, #204	; (adr r3, da600 <_strtod_r+0xbd8>)
   da534:	e9d3 2300 	ldrd	r2, r3, [r3]
   da538:	4630      	mov	r0, r6
   da53a:	4639      	mov	r1, r7
   da53c:	f7fe ffe4 	bl	d9508 <__aeabi_dcmpgt>
   da540:	e004      	b.n	da54c <_strtod_r+0xb24>
   da542:	a331      	add	r3, pc, #196	; (adr r3, da608 <_strtod_r+0xbe0>)
   da544:	e9d3 2300 	ldrd	r2, r3, [r3]
   da548:	f7fe ffc0 	bl	d94cc <__aeabi_dcmplt>
   da54c:	bb18      	cbnz	r0, da596 <_strtod_r+0xb6e>
   da54e:	9918      	ldr	r1, [sp, #96]	; 0x60
   da550:	9802      	ldr	r0, [sp, #8]
   da552:	f000 ff5c 	bl	db40e <_Bfree>
   da556:	9904      	ldr	r1, [sp, #16]
   da558:	9802      	ldr	r0, [sp, #8]
   da55a:	f000 ff58 	bl	db40e <_Bfree>
   da55e:	4629      	mov	r1, r5
   da560:	9802      	ldr	r0, [sp, #8]
   da562:	f000 ff54 	bl	db40e <_Bfree>
   da566:	4621      	mov	r1, r4
   da568:	9802      	ldr	r0, [sp, #8]
   da56a:	f000 ff50 	bl	db40e <_Bfree>
   da56e:	e56d      	b.n	da04c <_strtod_r+0x624>
   da570:	9b03      	ldr	r3, [sp, #12]
   da572:	b183      	cbz	r3, da596 <_strtod_r+0xb6e>
   da574:	4b2b      	ldr	r3, [pc, #172]	; (da624 <_strtod_r+0xbfc>)
   da576:	930b      	str	r3, [sp, #44]	; 0x2c
   da578:	2300      	movs	r3, #0
   da57a:	930a      	str	r3, [sp, #40]	; 0x28
   da57c:	4650      	mov	r0, sl
   da57e:	4659      	mov	r1, fp
   da580:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da584:	f7fe fd30 	bl	d8fe8 <__aeabi_dmul>
   da588:	4682      	mov	sl, r0
   da58a:	468b      	mov	fp, r1
   da58c:	b919      	cbnz	r1, da596 <_strtod_r+0xb6e>
   da58e:	b910      	cbnz	r0, da596 <_strtod_r+0xb6e>
   da590:	9a02      	ldr	r2, [sp, #8]
   da592:	2322      	movs	r3, #34	; 0x22
   da594:	6013      	str	r3, [r2, #0]
   da596:	9918      	ldr	r1, [sp, #96]	; 0x60
   da598:	9802      	ldr	r0, [sp, #8]
   da59a:	f000 ff38 	bl	db40e <_Bfree>
   da59e:	9904      	ldr	r1, [sp, #16]
   da5a0:	9802      	ldr	r0, [sp, #8]
   da5a2:	f000 ff34 	bl	db40e <_Bfree>
   da5a6:	4629      	mov	r1, r5
   da5a8:	9802      	ldr	r0, [sp, #8]
   da5aa:	f000 ff30 	bl	db40e <_Bfree>
   da5ae:	9905      	ldr	r1, [sp, #20]
   da5b0:	9802      	ldr	r0, [sp, #8]
   da5b2:	f000 ff2c 	bl	db40e <_Bfree>
   da5b6:	4621      	mov	r1, r4
   da5b8:	9802      	ldr	r0, [sp, #8]
   da5ba:	f000 ff28 	bl	db40e <_Bfree>
   da5be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da5c0:	b113      	cbz	r3, da5c8 <_strtod_r+0xba0>
   da5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da5c6:	6013      	str	r3, [r2, #0]
   da5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da5ca:	b11b      	cbz	r3, da5d4 <_strtod_r+0xbac>
   da5cc:	4652      	mov	r2, sl
   da5ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da5d2:	e007      	b.n	da5e4 <_strtod_r+0xbbc>
   da5d4:	4652      	mov	r2, sl
   da5d6:	465b      	mov	r3, fp
   da5d8:	e004      	b.n	da5e4 <_strtod_r+0xbbc>
   da5da:	2500      	movs	r5, #0
   da5dc:	462a      	mov	r2, r5
   da5de:	2101      	movs	r1, #1
   da5e0:	f7ff bb41 	b.w	d9c66 <_strtod_r+0x23e>
   da5e4:	ec43 2b10 	vmov	d0, r2, r3
   da5e8:	b01d      	add	sp, #116	; 0x74
   da5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5ee:	bf00      	nop
   da5f0:	ffc00000 	.word	0xffc00000
   da5f4:	41dfffff 	.word	0x41dfffff
   da5f8:	94a03595 	.word	0x94a03595
   da5fc:	3fdfffff 	.word	0x3fdfffff
   da600:	35afe535 	.word	0x35afe535
   da604:	3fe00000 	.word	0x3fe00000
   da608:	94a03595 	.word	0x94a03595
   da60c:	3fcfffff 	.word	0x3fcfffff
   da610:	3ff00000 	.word	0x3ff00000
   da614:	3fe00000 	.word	0x3fe00000
   da618:	7fe00000 	.word	0x7fe00000
   da61c:	7c9fffff 	.word	0x7c9fffff
   da620:	7fefffff 	.word	0x7fefffff
   da624:	39500000 	.word	0x39500000

000da628 <strtod>:
   da628:	4b02      	ldr	r3, [pc, #8]	; (da634 <strtod+0xc>)
   da62a:	460a      	mov	r2, r1
   da62c:	4601      	mov	r1, r0
   da62e:	6818      	ldr	r0, [r3, #0]
   da630:	f7ff b9fa 	b.w	d9a28 <_strtod_r>
   da634:	2003e094 	.word	0x2003e094

000da638 <_strtoul_r>:
   da638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da63c:	4680      	mov	r8, r0
   da63e:	483c      	ldr	r0, [pc, #240]	; (da730 <_strtoul_r+0xf8>)
   da640:	f8d0 9000 	ldr.w	r9, [r0]
   da644:	460e      	mov	r6, r1
   da646:	4635      	mov	r5, r6
   da648:	f815 4b01 	ldrb.w	r4, [r5], #1
   da64c:	eb09 0004 	add.w	r0, r9, r4
   da650:	7840      	ldrb	r0, [r0, #1]
   da652:	f000 0008 	and.w	r0, r0, #8
   da656:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da65a:	b108      	cbz	r0, da660 <_strtoul_r+0x28>
   da65c:	462e      	mov	r6, r5
   da65e:	e7f2      	b.n	da646 <_strtoul_r+0xe>
   da660:	2c2d      	cmp	r4, #45	; 0x2d
   da662:	d103      	bne.n	da66c <_strtoul_r+0x34>
   da664:	1cb5      	adds	r5, r6, #2
   da666:	7874      	ldrb	r4, [r6, #1]
   da668:	2701      	movs	r7, #1
   da66a:	e003      	b.n	da674 <_strtoul_r+0x3c>
   da66c:	2c2b      	cmp	r4, #43	; 0x2b
   da66e:	bf04      	itt	eq
   da670:	7874      	ldrbeq	r4, [r6, #1]
   da672:	1cb5      	addeq	r5, r6, #2
   da674:	b113      	cbz	r3, da67c <_strtoul_r+0x44>
   da676:	2b10      	cmp	r3, #16
   da678:	d10a      	bne.n	da690 <_strtoul_r+0x58>
   da67a:	e053      	b.n	da724 <_strtoul_r+0xec>
   da67c:	2c30      	cmp	r4, #48	; 0x30
   da67e:	d14f      	bne.n	da720 <_strtoul_r+0xe8>
   da680:	7828      	ldrb	r0, [r5, #0]
   da682:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da686:	2858      	cmp	r0, #88	; 0x58
   da688:	d145      	bne.n	da716 <_strtoul_r+0xde>
   da68a:	786c      	ldrb	r4, [r5, #1]
   da68c:	2310      	movs	r3, #16
   da68e:	3502      	adds	r5, #2
   da690:	f04f 3cff 	mov.w	ip, #4294967295
   da694:	2600      	movs	r6, #0
   da696:	fbbc fcf3 	udiv	ip, ip, r3
   da69a:	fb03 fa0c 	mul.w	sl, r3, ip
   da69e:	ea6f 0a0a 	mvn.w	sl, sl
   da6a2:	4630      	mov	r0, r6
   da6a4:	eb09 0e04 	add.w	lr, r9, r4
   da6a8:	f89e e001 	ldrb.w	lr, [lr, #1]
   da6ac:	f01e 0f04 	tst.w	lr, #4
   da6b0:	d001      	beq.n	da6b6 <_strtoul_r+0x7e>
   da6b2:	3c30      	subs	r4, #48	; 0x30
   da6b4:	e00b      	b.n	da6ce <_strtoul_r+0x96>
   da6b6:	f01e 0e03 	ands.w	lr, lr, #3
   da6ba:	d01a      	beq.n	da6f2 <_strtoul_r+0xba>
   da6bc:	f1be 0f01 	cmp.w	lr, #1
   da6c0:	bf0c      	ite	eq
   da6c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da6c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da6ca:	ebce 0404 	rsb	r4, lr, r4
   da6ce:	42a3      	cmp	r3, r4
   da6d0:	dd0f      	ble.n	da6f2 <_strtoul_r+0xba>
   da6d2:	2e00      	cmp	r6, #0
   da6d4:	db08      	blt.n	da6e8 <_strtoul_r+0xb0>
   da6d6:	4560      	cmp	r0, ip
   da6d8:	d806      	bhi.n	da6e8 <_strtoul_r+0xb0>
   da6da:	d101      	bne.n	da6e0 <_strtoul_r+0xa8>
   da6dc:	4554      	cmp	r4, sl
   da6de:	dc03      	bgt.n	da6e8 <_strtoul_r+0xb0>
   da6e0:	fb03 4000 	mla	r0, r3, r0, r4
   da6e4:	2601      	movs	r6, #1
   da6e6:	e001      	b.n	da6ec <_strtoul_r+0xb4>
   da6e8:	f04f 36ff 	mov.w	r6, #4294967295
   da6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
   da6f0:	e7d8      	b.n	da6a4 <_strtoul_r+0x6c>
   da6f2:	2e00      	cmp	r6, #0
   da6f4:	da07      	bge.n	da706 <_strtoul_r+0xce>
   da6f6:	2322      	movs	r3, #34	; 0x22
   da6f8:	f8c8 3000 	str.w	r3, [r8]
   da6fc:	f04f 30ff 	mov.w	r0, #4294967295
   da700:	b92a      	cbnz	r2, da70e <_strtoul_r+0xd6>
   da702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da706:	b107      	cbz	r7, da70a <_strtoul_r+0xd2>
   da708:	4240      	negs	r0, r0
   da70a:	b172      	cbz	r2, da72a <_strtoul_r+0xf2>
   da70c:	b106      	cbz	r6, da710 <_strtoul_r+0xd8>
   da70e:	1e69      	subs	r1, r5, #1
   da710:	6011      	str	r1, [r2, #0]
   da712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da716:	2430      	movs	r4, #48	; 0x30
   da718:	2b00      	cmp	r3, #0
   da71a:	d1b9      	bne.n	da690 <_strtoul_r+0x58>
   da71c:	2308      	movs	r3, #8
   da71e:	e7b7      	b.n	da690 <_strtoul_r+0x58>
   da720:	230a      	movs	r3, #10
   da722:	e7b5      	b.n	da690 <_strtoul_r+0x58>
   da724:	2c30      	cmp	r4, #48	; 0x30
   da726:	d0ab      	beq.n	da680 <_strtoul_r+0x48>
   da728:	e7b2      	b.n	da690 <_strtoul_r+0x58>
   da72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da72e:	bf00      	nop
   da730:	2003e030 	.word	0x2003e030

000da734 <strtoul>:
   da734:	4613      	mov	r3, r2
   da736:	460a      	mov	r2, r1
   da738:	4601      	mov	r1, r0
   da73a:	4802      	ldr	r0, [pc, #8]	; (da744 <strtoul+0x10>)
   da73c:	6800      	ldr	r0, [r0, #0]
   da73e:	f7ff bf7b 	b.w	da638 <_strtoul_r>
   da742:	bf00      	nop
   da744:	2003e094 	.word	0x2003e094

000da748 <__tzcalc_limits>:
   da748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da74c:	4604      	mov	r4, r0
   da74e:	f000 fd8d 	bl	db26c <__gettzinfo>
   da752:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da756:	429c      	cmp	r4, r3
   da758:	f340 8096 	ble.w	da888 <__tzcalc_limits+0x140>
   da75c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da760:	18e3      	adds	r3, r4, r3
   da762:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da766:	109b      	asrs	r3, r3, #2
   da768:	f240 156d 	movw	r5, #365	; 0x16d
   da76c:	fb05 3502 	mla	r5, r5, r2, r3
   da770:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da774:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da778:	fb92 f3f3 	sdiv	r3, r2, r3
   da77c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da780:	442b      	add	r3, r5
   da782:	18a5      	adds	r5, r4, r2
   da784:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da788:	fb95 f5f2 	sdiv	r5, r5, r2
   da78c:	441d      	add	r5, r3
   da78e:	2364      	movs	r3, #100	; 0x64
   da790:	fb94 f7f2 	sdiv	r7, r4, r2
   da794:	fb94 f6f3 	sdiv	r6, r4, r3
   da798:	fb02 4717 	mls	r7, r2, r7, r4
   da79c:	fb03 4616 	mls	r6, r3, r6, r4
   da7a0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da7a4:	fab7 fe87 	clz	lr, r7
   da7a8:	9301      	str	r3, [sp, #4]
   da7aa:	f004 0303 	and.w	r3, r4, #3
   da7ae:	6044      	str	r4, [r0, #4]
   da7b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da7b4:	4601      	mov	r1, r0
   da7b6:	9300      	str	r3, [sp, #0]
   da7b8:	f04f 0c07 	mov.w	ip, #7
   da7bc:	7a0b      	ldrb	r3, [r1, #8]
   da7be:	2b4a      	cmp	r3, #74	; 0x4a
   da7c0:	d10e      	bne.n	da7e0 <__tzcalc_limits+0x98>
   da7c2:	694b      	ldr	r3, [r1, #20]
   da7c4:	9a00      	ldr	r2, [sp, #0]
   da7c6:	18ec      	adds	r4, r5, r3
   da7c8:	b902      	cbnz	r2, da7cc <__tzcalc_limits+0x84>
   da7ca:	b906      	cbnz	r6, da7ce <__tzcalc_limits+0x86>
   da7cc:	b927      	cbnz	r7, da7d8 <__tzcalc_limits+0x90>
   da7ce:	2b3b      	cmp	r3, #59	; 0x3b
   da7d0:	bfd4      	ite	le
   da7d2:	2300      	movle	r3, #0
   da7d4:	2301      	movgt	r3, #1
   da7d6:	e000      	b.n	da7da <__tzcalc_limits+0x92>
   da7d8:	2300      	movs	r3, #0
   da7da:	4423      	add	r3, r4
   da7dc:	3b01      	subs	r3, #1
   da7de:	e03f      	b.n	da860 <__tzcalc_limits+0x118>
   da7e0:	2b44      	cmp	r3, #68	; 0x44
   da7e2:	d102      	bne.n	da7ea <__tzcalc_limits+0xa2>
   da7e4:	694b      	ldr	r3, [r1, #20]
   da7e6:	442b      	add	r3, r5
   da7e8:	e03a      	b.n	da860 <__tzcalc_limits+0x118>
   da7ea:	9b00      	ldr	r3, [sp, #0]
   da7ec:	b92b      	cbnz	r3, da7fa <__tzcalc_limits+0xb2>
   da7ee:	2e00      	cmp	r6, #0
   da7f0:	bf0c      	ite	eq
   da7f2:	46f0      	moveq	r8, lr
   da7f4:	f04f 0801 	movne.w	r8, #1
   da7f8:	e000      	b.n	da7fc <__tzcalc_limits+0xb4>
   da7fa:	46f0      	mov	r8, lr
   da7fc:	4b24      	ldr	r3, [pc, #144]	; (da890 <__tzcalc_limits+0x148>)
   da7fe:	68cc      	ldr	r4, [r1, #12]
   da800:	2230      	movs	r2, #48	; 0x30
   da802:	fb02 3808 	mla	r8, r2, r8, r3
   da806:	f1a8 0a04 	sub.w	sl, r8, #4
   da80a:	46a9      	mov	r9, r5
   da80c:	2301      	movs	r3, #1
   da80e:	42a3      	cmp	r3, r4
   da810:	da04      	bge.n	da81c <__tzcalc_limits+0xd4>
   da812:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da816:	3301      	adds	r3, #1
   da818:	44d9      	add	r9, fp
   da81a:	e7f8      	b.n	da80e <__tzcalc_limits+0xc6>
   da81c:	f109 0304 	add.w	r3, r9, #4
   da820:	fb93 fbfc 	sdiv	fp, r3, ip
   da824:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da828:	2c01      	cmp	r4, #1
   da82a:	ebca 0a03 	rsb	sl, sl, r3
   da82e:	694b      	ldr	r3, [r1, #20]
   da830:	bfb8      	it	lt
   da832:	2401      	movlt	r4, #1
   da834:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da838:	ebb3 0a0a 	subs.w	sl, r3, sl
   da83c:	690b      	ldr	r3, [r1, #16]
   da83e:	f104 34ff 	add.w	r4, r4, #4294967295
   da842:	f103 33ff 	add.w	r3, r3, #4294967295
   da846:	bf48      	it	mi
   da848:	f10a 0a07 	addmi.w	sl, sl, #7
   da84c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da850:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da854:	4453      	add	r3, sl
   da856:	42a3      	cmp	r3, r4
   da858:	db01      	blt.n	da85e <__tzcalc_limits+0x116>
   da85a:	3b07      	subs	r3, #7
   da85c:	e7fb      	b.n	da856 <__tzcalc_limits+0x10e>
   da85e:	444b      	add	r3, r9
   da860:	698c      	ldr	r4, [r1, #24]
   da862:	4a0c      	ldr	r2, [pc, #48]	; (da894 <__tzcalc_limits+0x14c>)
   da864:	fb02 4303 	mla	r3, r2, r3, r4
   da868:	6a0c      	ldr	r4, [r1, #32]
   da86a:	4423      	add	r3, r4
   da86c:	f841 3f1c 	str.w	r3, [r1, #28]!
   da870:	9b01      	ldr	r3, [sp, #4]
   da872:	4299      	cmp	r1, r3
   da874:	d1a2      	bne.n	da7bc <__tzcalc_limits+0x74>
   da876:	69c3      	ldr	r3, [r0, #28]
   da878:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da87a:	4293      	cmp	r3, r2
   da87c:	bfac      	ite	ge
   da87e:	2300      	movge	r3, #0
   da880:	2301      	movlt	r3, #1
   da882:	6003      	str	r3, [r0, #0]
   da884:	2001      	movs	r0, #1
   da886:	e000      	b.n	da88a <__tzcalc_limits+0x142>
   da888:	2000      	movs	r0, #0
   da88a:	b003      	add	sp, #12
   da88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da890:	000dc968 	.word	0x000dc968
   da894:	00015180 	.word	0x00015180

000da898 <__tz_lock>:
   da898:	4770      	bx	lr

000da89a <__tz_unlock>:
   da89a:	4770      	bx	lr

000da89c <_tzset_unlocked>:
   da89c:	4b01      	ldr	r3, [pc, #4]	; (da8a4 <_tzset_unlocked+0x8>)
   da89e:	6818      	ldr	r0, [r3, #0]
   da8a0:	f000 b802 	b.w	da8a8 <_tzset_unlocked_r>
   da8a4:	2003e094 	.word	0x2003e094

000da8a8 <_tzset_unlocked_r>:
   da8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8ac:	b08d      	sub	sp, #52	; 0x34
   da8ae:	4607      	mov	r7, r0
   da8b0:	f000 fcdc 	bl	db26c <__gettzinfo>
   da8b4:	49b0      	ldr	r1, [pc, #704]	; (dab78 <_tzset_unlocked_r+0x2d0>)
   da8b6:	4eb1      	ldr	r6, [pc, #708]	; (dab7c <_tzset_unlocked_r+0x2d4>)
   da8b8:	4604      	mov	r4, r0
   da8ba:	4638      	mov	r0, r7
   da8bc:	f000 fcce 	bl	db25c <_getenv_r>
   da8c0:	4605      	mov	r5, r0
   da8c2:	b960      	cbnz	r0, da8de <_tzset_unlocked_r+0x36>
   da8c4:	4bae      	ldr	r3, [pc, #696]	; (dab80 <_tzset_unlocked_r+0x2d8>)
   da8c6:	4aaf      	ldr	r2, [pc, #700]	; (dab84 <_tzset_unlocked_r+0x2dc>)
   da8c8:	6018      	str	r0, [r3, #0]
   da8ca:	4baf      	ldr	r3, [pc, #700]	; (dab88 <_tzset_unlocked_r+0x2e0>)
   da8cc:	6018      	str	r0, [r3, #0]
   da8ce:	4baf      	ldr	r3, [pc, #700]	; (dab8c <_tzset_unlocked_r+0x2e4>)
   da8d0:	6830      	ldr	r0, [r6, #0]
   da8d2:	601a      	str	r2, [r3, #0]
   da8d4:	605a      	str	r2, [r3, #4]
   da8d6:	f7fc f81f 	bl	d6918 <free>
   da8da:	6035      	str	r5, [r6, #0]
   da8dc:	e148      	b.n	dab70 <_tzset_unlocked_r+0x2c8>
   da8de:	6831      	ldr	r1, [r6, #0]
   da8e0:	b979      	cbnz	r1, da902 <_tzset_unlocked_r+0x5a>
   da8e2:	6830      	ldr	r0, [r6, #0]
   da8e4:	f7fc f818 	bl	d6918 <free>
   da8e8:	4628      	mov	r0, r5
   da8ea:	f7ff f834 	bl	d9956 <strlen>
   da8ee:	1c41      	adds	r1, r0, #1
   da8f0:	4638      	mov	r0, r7
   da8f2:	f7fc f839 	bl	d6968 <_malloc_r>
   da8f6:	6030      	str	r0, [r6, #0]
   da8f8:	b148      	cbz	r0, da90e <_tzset_unlocked_r+0x66>
   da8fa:	4629      	mov	r1, r5
   da8fc:	f7ff f808 	bl	d9910 <strcpy>
   da900:	e005      	b.n	da90e <_tzset_unlocked_r+0x66>
   da902:	f7fe fffb 	bl	d98fc <strcmp>
   da906:	2800      	cmp	r0, #0
   da908:	f000 8132 	beq.w	dab70 <_tzset_unlocked_r+0x2c8>
   da90c:	e7e9      	b.n	da8e2 <_tzset_unlocked_r+0x3a>
   da90e:	782b      	ldrb	r3, [r5, #0]
   da910:	4a9f      	ldr	r2, [pc, #636]	; (dab90 <_tzset_unlocked_r+0x2e8>)
   da912:	49a0      	ldr	r1, [pc, #640]	; (dab94 <_tzset_unlocked_r+0x2ec>)
   da914:	2b3a      	cmp	r3, #58	; 0x3a
   da916:	bf08      	it	eq
   da918:	3501      	addeq	r5, #1
   da91a:	ae0a      	add	r6, sp, #40	; 0x28
   da91c:	4633      	mov	r3, r6
   da91e:	4628      	mov	r0, r5
   da920:	f7fc f80a 	bl	d6938 <siscanf>
   da924:	2800      	cmp	r0, #0
   da926:	f340 8123 	ble.w	dab70 <_tzset_unlocked_r+0x2c8>
   da92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da92c:	18ef      	adds	r7, r5, r3
   da92e:	5ceb      	ldrb	r3, [r5, r3]
   da930:	2b2d      	cmp	r3, #45	; 0x2d
   da932:	d103      	bne.n	da93c <_tzset_unlocked_r+0x94>
   da934:	3701      	adds	r7, #1
   da936:	f04f 35ff 	mov.w	r5, #4294967295
   da93a:	e003      	b.n	da944 <_tzset_unlocked_r+0x9c>
   da93c:	2b2b      	cmp	r3, #43	; 0x2b
   da93e:	bf08      	it	eq
   da940:	3701      	addeq	r7, #1
   da942:	2501      	movs	r5, #1
   da944:	f10d 0a20 	add.w	sl, sp, #32
   da948:	f10d 0b1e 	add.w	fp, sp, #30
   da94c:	f04f 0800 	mov.w	r8, #0
   da950:	9603      	str	r6, [sp, #12]
   da952:	f8cd a008 	str.w	sl, [sp, #8]
   da956:	9601      	str	r6, [sp, #4]
   da958:	f8cd b000 	str.w	fp, [sp]
   da95c:	4633      	mov	r3, r6
   da95e:	aa07      	add	r2, sp, #28
   da960:	498d      	ldr	r1, [pc, #564]	; (dab98 <_tzset_unlocked_r+0x2f0>)
   da962:	f8ad 801e 	strh.w	r8, [sp, #30]
   da966:	4638      	mov	r0, r7
   da968:	f8ad 8020 	strh.w	r8, [sp, #32]
   da96c:	f7fb ffe4 	bl	d6938 <siscanf>
   da970:	4540      	cmp	r0, r8
   da972:	f340 80fd 	ble.w	dab70 <_tzset_unlocked_r+0x2c8>
   da976:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da97a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da97e:	f8df 9224 	ldr.w	r9, [pc, #548]	; daba4 <_tzset_unlocked_r+0x2fc>
   da982:	213c      	movs	r1, #60	; 0x3c
   da984:	fb01 3302 	mla	r3, r1, r2, r3
   da988:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da98c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da990:	fb01 3302 	mla	r3, r1, r2, r3
   da994:	435d      	muls	r5, r3
   da996:	6225      	str	r5, [r4, #32]
   da998:	4d7c      	ldr	r5, [pc, #496]	; (dab8c <_tzset_unlocked_r+0x2e4>)
   da99a:	4b7d      	ldr	r3, [pc, #500]	; (dab90 <_tzset_unlocked_r+0x2e8>)
   da99c:	602b      	str	r3, [r5, #0]
   da99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da9a0:	497c      	ldr	r1, [pc, #496]	; (dab94 <_tzset_unlocked_r+0x2ec>)
   da9a2:	441f      	add	r7, r3
   da9a4:	464a      	mov	r2, r9
   da9a6:	4633      	mov	r3, r6
   da9a8:	4638      	mov	r0, r7
   da9aa:	f7fb ffc5 	bl	d6938 <siscanf>
   da9ae:	4540      	cmp	r0, r8
   da9b0:	dc08      	bgt.n	da9c4 <_tzset_unlocked_r+0x11c>
   da9b2:	682b      	ldr	r3, [r5, #0]
   da9b4:	606b      	str	r3, [r5, #4]
   da9b6:	4b72      	ldr	r3, [pc, #456]	; (dab80 <_tzset_unlocked_r+0x2d8>)
   da9b8:	6a22      	ldr	r2, [r4, #32]
   da9ba:	601a      	str	r2, [r3, #0]
   da9bc:	4b72      	ldr	r3, [pc, #456]	; (dab88 <_tzset_unlocked_r+0x2e0>)
   da9be:	f8c3 8000 	str.w	r8, [r3]
   da9c2:	e0d5      	b.n	dab70 <_tzset_unlocked_r+0x2c8>
   da9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da9c6:	f8c5 9004 	str.w	r9, [r5, #4]
   da9ca:	18fd      	adds	r5, r7, r3
   da9cc:	5cfb      	ldrb	r3, [r7, r3]
   da9ce:	2b2d      	cmp	r3, #45	; 0x2d
   da9d0:	d103      	bne.n	da9da <_tzset_unlocked_r+0x132>
   da9d2:	3501      	adds	r5, #1
   da9d4:	f04f 37ff 	mov.w	r7, #4294967295
   da9d8:	e003      	b.n	da9e2 <_tzset_unlocked_r+0x13a>
   da9da:	2b2b      	cmp	r3, #43	; 0x2b
   da9dc:	bf08      	it	eq
   da9de:	3501      	addeq	r5, #1
   da9e0:	2701      	movs	r7, #1
   da9e2:	2300      	movs	r3, #0
   da9e4:	f8ad 301c 	strh.w	r3, [sp, #28]
   da9e8:	f8ad 301e 	strh.w	r3, [sp, #30]
   da9ec:	f8ad 3020 	strh.w	r3, [sp, #32]
   da9f0:	930a      	str	r3, [sp, #40]	; 0x28
   da9f2:	9603      	str	r6, [sp, #12]
   da9f4:	f8cd a008 	str.w	sl, [sp, #8]
   da9f8:	9601      	str	r6, [sp, #4]
   da9fa:	f8cd b000 	str.w	fp, [sp]
   da9fe:	4633      	mov	r3, r6
   daa00:	aa07      	add	r2, sp, #28
   daa02:	4965      	ldr	r1, [pc, #404]	; (dab98 <_tzset_unlocked_r+0x2f0>)
   daa04:	4628      	mov	r0, r5
   daa06:	f7fb ff97 	bl	d6938 <siscanf>
   daa0a:	2800      	cmp	r0, #0
   daa0c:	dc04      	bgt.n	daa18 <_tzset_unlocked_r+0x170>
   daa0e:	6a23      	ldr	r3, [r4, #32]
   daa10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   daa14:	63e3      	str	r3, [r4, #60]	; 0x3c
   daa16:	e00e      	b.n	daa36 <_tzset_unlocked_r+0x18e>
   daa18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   daa1c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   daa20:	213c      	movs	r1, #60	; 0x3c
   daa22:	fb01 3302 	mla	r3, r1, r2, r3
   daa26:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   daa2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   daa2e:	fb01 3302 	mla	r3, r1, r2, r3
   daa32:	435f      	muls	r7, r3
   daa34:	63e7      	str	r7, [r4, #60]	; 0x3c
   daa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daa38:	4627      	mov	r7, r4
   daa3a:	441d      	add	r5, r3
   daa3c:	f04f 0900 	mov.w	r9, #0
   daa40:	782b      	ldrb	r3, [r5, #0]
   daa42:	2b2c      	cmp	r3, #44	; 0x2c
   daa44:	bf08      	it	eq
   daa46:	3501      	addeq	r5, #1
   daa48:	f895 8000 	ldrb.w	r8, [r5]
   daa4c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   daa50:	d126      	bne.n	daaa0 <_tzset_unlocked_r+0x1f8>
   daa52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   daa56:	9302      	str	r3, [sp, #8]
   daa58:	ab09      	add	r3, sp, #36	; 0x24
   daa5a:	9300      	str	r3, [sp, #0]
   daa5c:	9603      	str	r6, [sp, #12]
   daa5e:	9601      	str	r6, [sp, #4]
   daa60:	4633      	mov	r3, r6
   daa62:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   daa66:	494d      	ldr	r1, [pc, #308]	; (dab9c <_tzset_unlocked_r+0x2f4>)
   daa68:	4628      	mov	r0, r5
   daa6a:	f7fb ff65 	bl	d6938 <siscanf>
   daa6e:	2803      	cmp	r0, #3
   daa70:	d17e      	bne.n	dab70 <_tzset_unlocked_r+0x2c8>
   daa72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   daa76:	1e4b      	subs	r3, r1, #1
   daa78:	2b0b      	cmp	r3, #11
   daa7a:	d879      	bhi.n	dab70 <_tzset_unlocked_r+0x2c8>
   daa7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   daa80:	1e53      	subs	r3, r2, #1
   daa82:	2b04      	cmp	r3, #4
   daa84:	d874      	bhi.n	dab70 <_tzset_unlocked_r+0x2c8>
   daa86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   daa8a:	2b06      	cmp	r3, #6
   daa8c:	d870      	bhi.n	dab70 <_tzset_unlocked_r+0x2c8>
   daa8e:	f887 8008 	strb.w	r8, [r7, #8]
   daa92:	60f9      	str	r1, [r7, #12]
   daa94:	613a      	str	r2, [r7, #16]
   daa96:	617b      	str	r3, [r7, #20]
   daa98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daa9a:	eb05 0803 	add.w	r8, r5, r3
   daa9e:	e02a      	b.n	daaf6 <_tzset_unlocked_r+0x24e>
   daaa0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   daaa4:	bf06      	itte	eq
   daaa6:	3501      	addeq	r5, #1
   daaa8:	4643      	moveq	r3, r8
   daaaa:	2344      	movne	r3, #68	; 0x44
   daaac:	220a      	movs	r2, #10
   daaae:	a90b      	add	r1, sp, #44	; 0x2c
   daab0:	4628      	mov	r0, r5
   daab2:	9305      	str	r3, [sp, #20]
   daab4:	f7ff fe3e 	bl	da734 <strtoul>
   daab8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   daabc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   daac0:	4545      	cmp	r5, r8
   daac2:	9b05      	ldr	r3, [sp, #20]
   daac4:	d114      	bne.n	daaf0 <_tzset_unlocked_r+0x248>
   daac6:	234d      	movs	r3, #77	; 0x4d
   daac8:	f1b9 0f00 	cmp.w	r9, #0
   daacc:	d107      	bne.n	daade <_tzset_unlocked_r+0x236>
   daace:	7223      	strb	r3, [r4, #8]
   daad0:	2303      	movs	r3, #3
   daad2:	60e3      	str	r3, [r4, #12]
   daad4:	2302      	movs	r3, #2
   daad6:	6123      	str	r3, [r4, #16]
   daad8:	f8c4 9014 	str.w	r9, [r4, #20]
   daadc:	e00b      	b.n	daaf6 <_tzset_unlocked_r+0x24e>
   daade:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   daae2:	230b      	movs	r3, #11
   daae4:	62a3      	str	r3, [r4, #40]	; 0x28
   daae6:	2301      	movs	r3, #1
   daae8:	62e3      	str	r3, [r4, #44]	; 0x2c
   daaea:	2300      	movs	r3, #0
   daaec:	6323      	str	r3, [r4, #48]	; 0x30
   daaee:	e002      	b.n	daaf6 <_tzset_unlocked_r+0x24e>
   daaf0:	b280      	uxth	r0, r0
   daaf2:	723b      	strb	r3, [r7, #8]
   daaf4:	6178      	str	r0, [r7, #20]
   daaf6:	2302      	movs	r3, #2
   daaf8:	f8ad 301c 	strh.w	r3, [sp, #28]
   daafc:	2300      	movs	r3, #0
   daafe:	f8ad 301e 	strh.w	r3, [sp, #30]
   dab02:	f8ad 3020 	strh.w	r3, [sp, #32]
   dab06:	930a      	str	r3, [sp, #40]	; 0x28
   dab08:	f898 3000 	ldrb.w	r3, [r8]
   dab0c:	2b2f      	cmp	r3, #47	; 0x2f
   dab0e:	d10b      	bne.n	dab28 <_tzset_unlocked_r+0x280>
   dab10:	9603      	str	r6, [sp, #12]
   dab12:	f8cd a008 	str.w	sl, [sp, #8]
   dab16:	9601      	str	r6, [sp, #4]
   dab18:	f8cd b000 	str.w	fp, [sp]
   dab1c:	4633      	mov	r3, r6
   dab1e:	aa07      	add	r2, sp, #28
   dab20:	491f      	ldr	r1, [pc, #124]	; (daba0 <_tzset_unlocked_r+0x2f8>)
   dab22:	4640      	mov	r0, r8
   dab24:	f7fb ff08 	bl	d6938 <siscanf>
   dab28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dab2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dab30:	213c      	movs	r1, #60	; 0x3c
   dab32:	fb01 3302 	mla	r3, r1, r2, r3
   dab36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dab3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dab3e:	fb01 3302 	mla	r3, r1, r2, r3
   dab42:	61bb      	str	r3, [r7, #24]
   dab44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dab46:	f109 0901 	add.w	r9, r9, #1
   dab4a:	f1b9 0f02 	cmp.w	r9, #2
   dab4e:	4445      	add	r5, r8
   dab50:	f107 071c 	add.w	r7, r7, #28
   dab54:	f47f af74 	bne.w	daa40 <_tzset_unlocked_r+0x198>
   dab58:	6860      	ldr	r0, [r4, #4]
   dab5a:	f7ff fdf5 	bl	da748 <__tzcalc_limits>
   dab5e:	4b08      	ldr	r3, [pc, #32]	; (dab80 <_tzset_unlocked_r+0x2d8>)
   dab60:	6a22      	ldr	r2, [r4, #32]
   dab62:	601a      	str	r2, [r3, #0]
   dab64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dab66:	1a9b      	subs	r3, r3, r2
   dab68:	4a07      	ldr	r2, [pc, #28]	; (dab88 <_tzset_unlocked_r+0x2e0>)
   dab6a:	bf18      	it	ne
   dab6c:	2301      	movne	r3, #1
   dab6e:	6013      	str	r3, [r2, #0]
   dab70:	b00d      	add	sp, #52	; 0x34
   dab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dab76:	bf00      	nop
   dab78:	000dca28 	.word	0x000dca28
   dab7c:	2003e7e0 	.word	0x2003e7e0
   dab80:	2003e7e8 	.word	0x2003e7e8
   dab84:	000dca2b 	.word	0x000dca2b
   dab88:	2003e7e4 	.word	0x2003e7e4
   dab8c:	2003e0d0 	.word	0x2003e0d0
   dab90:	2003e7d3 	.word	0x2003e7d3
   dab94:	000dca2f 	.word	0x000dca2f
   dab98:	000dca52 	.word	0x000dca52
   dab9c:	000dca3e 	.word	0x000dca3e
   daba0:	000dca51 	.word	0x000dca51
   daba4:	2003e7c8 	.word	0x2003e7c8

000daba8 <rshift>:
   daba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabaa:	6906      	ldr	r6, [r0, #16]
   dabac:	114b      	asrs	r3, r1, #5
   dabae:	42b3      	cmp	r3, r6
   dabb0:	f100 0514 	add.w	r5, r0, #20
   dabb4:	da27      	bge.n	dac06 <rshift+0x5e>
   dabb6:	f011 011f 	ands.w	r1, r1, #31
   dabba:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dabbe:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dabc2:	d101      	bne.n	dabc8 <rshift+0x20>
   dabc4:	4629      	mov	r1, r5
   dabc6:	e016      	b.n	dabf6 <rshift+0x4e>
   dabc8:	1d14      	adds	r4, r2, #4
   dabca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dabce:	f1c1 0e20 	rsb	lr, r1, #32
   dabd2:	40ca      	lsrs	r2, r1
   dabd4:	462b      	mov	r3, r5
   dabd6:	42b4      	cmp	r4, r6
   dabd8:	d209      	bcs.n	dabee <rshift+0x46>
   dabda:	6827      	ldr	r7, [r4, #0]
   dabdc:	fa07 f70e 	lsl.w	r7, r7, lr
   dabe0:	433a      	orrs	r2, r7
   dabe2:	f843 2b04 	str.w	r2, [r3], #4
   dabe6:	f854 2b04 	ldr.w	r2, [r4], #4
   dabea:	40ca      	lsrs	r2, r1
   dabec:	e7f3      	b.n	dabd6 <rshift+0x2e>
   dabee:	601a      	str	r2, [r3, #0]
   dabf0:	b152      	cbz	r2, dac08 <rshift+0x60>
   dabf2:	3304      	adds	r3, #4
   dabf4:	e008      	b.n	dac08 <rshift+0x60>
   dabf6:	42b2      	cmp	r2, r6
   dabf8:	460b      	mov	r3, r1
   dabfa:	d205      	bcs.n	dac08 <rshift+0x60>
   dabfc:	f852 3b04 	ldr.w	r3, [r2], #4
   dac00:	f841 3b04 	str.w	r3, [r1], #4
   dac04:	e7f7      	b.n	dabf6 <rshift+0x4e>
   dac06:	462b      	mov	r3, r5
   dac08:	1b5b      	subs	r3, r3, r5
   dac0a:	109b      	asrs	r3, r3, #2
   dac0c:	6103      	str	r3, [r0, #16]
   dac0e:	b903      	cbnz	r3, dac12 <rshift+0x6a>
   dac10:	6143      	str	r3, [r0, #20]
   dac12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dac14 <__hexdig_fun>:
   dac14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dac18:	2b09      	cmp	r3, #9
   dac1a:	d801      	bhi.n	dac20 <__hexdig_fun+0xc>
   dac1c:	3820      	subs	r0, #32
   dac1e:	e00a      	b.n	dac36 <__hexdig_fun+0x22>
   dac20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dac24:	2b05      	cmp	r3, #5
   dac26:	d801      	bhi.n	dac2c <__hexdig_fun+0x18>
   dac28:	3847      	subs	r0, #71	; 0x47
   dac2a:	e004      	b.n	dac36 <__hexdig_fun+0x22>
   dac2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dac30:	2b05      	cmp	r3, #5
   dac32:	d802      	bhi.n	dac3a <__hexdig_fun+0x26>
   dac34:	3827      	subs	r0, #39	; 0x27
   dac36:	b2c0      	uxtb	r0, r0
   dac38:	4770      	bx	lr
   dac3a:	2000      	movs	r0, #0
   dac3c:	4770      	bx	lr

000dac3e <__gethex>:
   dac3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac42:	b08b      	sub	sp, #44	; 0x2c
   dac44:	468a      	mov	sl, r1
   dac46:	4690      	mov	r8, r2
   dac48:	9306      	str	r3, [sp, #24]
   dac4a:	9002      	str	r0, [sp, #8]
   dac4c:	f7fe fe08 	bl	d9860 <_localeconv_r>
   dac50:	6803      	ldr	r3, [r0, #0]
   dac52:	9303      	str	r3, [sp, #12]
   dac54:	4618      	mov	r0, r3
   dac56:	f7fe fe7e 	bl	d9956 <strlen>
   dac5a:	9b03      	ldr	r3, [sp, #12]
   dac5c:	9001      	str	r0, [sp, #4]
   dac5e:	4403      	add	r3, r0
   dac60:	f04f 0b00 	mov.w	fp, #0
   dac64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dac68:	9307      	str	r3, [sp, #28]
   dac6a:	f8da 3000 	ldr.w	r3, [sl]
   dac6e:	3302      	adds	r3, #2
   dac70:	461f      	mov	r7, r3
   dac72:	f813 0b01 	ldrb.w	r0, [r3], #1
   dac76:	2830      	cmp	r0, #48	; 0x30
   dac78:	d102      	bne.n	dac80 <__gethex+0x42>
   dac7a:	f10b 0b01 	add.w	fp, fp, #1
   dac7e:	e7f7      	b.n	dac70 <__gethex+0x32>
   dac80:	f7ff ffc8 	bl	dac14 <__hexdig_fun>
   dac84:	4604      	mov	r4, r0
   dac86:	b9e0      	cbnz	r0, dacc2 <__gethex+0x84>
   dac88:	9a01      	ldr	r2, [sp, #4]
   dac8a:	9903      	ldr	r1, [sp, #12]
   dac8c:	4638      	mov	r0, r7
   dac8e:	f7fe fe6a 	bl	d9966 <strncmp>
   dac92:	2800      	cmp	r0, #0
   dac94:	d134      	bne.n	dad00 <__gethex+0xc2>
   dac96:	9b01      	ldr	r3, [sp, #4]
   dac98:	5cf8      	ldrb	r0, [r7, r3]
   dac9a:	18fe      	adds	r6, r7, r3
   dac9c:	f7ff ffba 	bl	dac14 <__hexdig_fun>
   daca0:	b380      	cbz	r0, dad04 <__gethex+0xc6>
   daca2:	4633      	mov	r3, r6
   daca4:	7818      	ldrb	r0, [r3, #0]
   daca6:	2830      	cmp	r0, #48	; 0x30
   daca8:	461f      	mov	r7, r3
   dacaa:	f103 0301 	add.w	r3, r3, #1
   dacae:	d0f9      	beq.n	daca4 <__gethex+0x66>
   dacb0:	f7ff ffb0 	bl	dac14 <__hexdig_fun>
   dacb4:	fab0 f580 	clz	r5, r0
   dacb8:	096d      	lsrs	r5, r5, #5
   dacba:	4634      	mov	r4, r6
   dacbc:	f04f 0b01 	mov.w	fp, #1
   dacc0:	e001      	b.n	dacc6 <__gethex+0x88>
   dacc2:	2500      	movs	r5, #0
   dacc4:	462c      	mov	r4, r5
   dacc6:	463a      	mov	r2, r7
   dacc8:	4616      	mov	r6, r2
   dacca:	3201      	adds	r2, #1
   daccc:	7830      	ldrb	r0, [r6, #0]
   dacce:	f7ff ffa1 	bl	dac14 <__hexdig_fun>
   dacd2:	2800      	cmp	r0, #0
   dacd4:	d1f8      	bne.n	dacc8 <__gethex+0x8a>
   dacd6:	9a01      	ldr	r2, [sp, #4]
   dacd8:	9903      	ldr	r1, [sp, #12]
   dacda:	4630      	mov	r0, r6
   dacdc:	f7fe fe43 	bl	d9966 <strncmp>
   dace0:	b950      	cbnz	r0, dacf8 <__gethex+0xba>
   dace2:	b954      	cbnz	r4, dacfa <__gethex+0xbc>
   dace4:	9b01      	ldr	r3, [sp, #4]
   dace6:	18f4      	adds	r4, r6, r3
   dace8:	4622      	mov	r2, r4
   dacea:	4616      	mov	r6, r2
   dacec:	3201      	adds	r2, #1
   dacee:	7830      	ldrb	r0, [r6, #0]
   dacf0:	f7ff ff90 	bl	dac14 <__hexdig_fun>
   dacf4:	2800      	cmp	r0, #0
   dacf6:	d1f8      	bne.n	dacea <__gethex+0xac>
   dacf8:	b134      	cbz	r4, dad08 <__gethex+0xca>
   dacfa:	1ba4      	subs	r4, r4, r6
   dacfc:	00a4      	lsls	r4, r4, #2
   dacfe:	e003      	b.n	dad08 <__gethex+0xca>
   dad00:	463e      	mov	r6, r7
   dad02:	e000      	b.n	dad06 <__gethex+0xc8>
   dad04:	4604      	mov	r4, r0
   dad06:	2501      	movs	r5, #1
   dad08:	7833      	ldrb	r3, [r6, #0]
   dad0a:	2b50      	cmp	r3, #80	; 0x50
   dad0c:	d001      	beq.n	dad12 <__gethex+0xd4>
   dad0e:	2b70      	cmp	r3, #112	; 0x70
   dad10:	d12a      	bne.n	dad68 <__gethex+0x12a>
   dad12:	7873      	ldrb	r3, [r6, #1]
   dad14:	2b2b      	cmp	r3, #43	; 0x2b
   dad16:	d008      	beq.n	dad2a <__gethex+0xec>
   dad18:	2b2d      	cmp	r3, #45	; 0x2d
   dad1a:	d003      	beq.n	dad24 <__gethex+0xe6>
   dad1c:	1c71      	adds	r1, r6, #1
   dad1e:	f04f 0900 	mov.w	r9, #0
   dad22:	e005      	b.n	dad30 <__gethex+0xf2>
   dad24:	f04f 0901 	mov.w	r9, #1
   dad28:	e001      	b.n	dad2e <__gethex+0xf0>
   dad2a:	f04f 0900 	mov.w	r9, #0
   dad2e:	1cb1      	adds	r1, r6, #2
   dad30:	7808      	ldrb	r0, [r1, #0]
   dad32:	f7ff ff6f 	bl	dac14 <__hexdig_fun>
   dad36:	1e43      	subs	r3, r0, #1
   dad38:	b2db      	uxtb	r3, r3
   dad3a:	2b18      	cmp	r3, #24
   dad3c:	d814      	bhi.n	dad68 <__gethex+0x12a>
   dad3e:	f1a0 0210 	sub.w	r2, r0, #16
   dad42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dad46:	f7ff ff65 	bl	dac14 <__hexdig_fun>
   dad4a:	1e43      	subs	r3, r0, #1
   dad4c:	b2db      	uxtb	r3, r3
   dad4e:	2b18      	cmp	r3, #24
   dad50:	d804      	bhi.n	dad5c <__gethex+0x11e>
   dad52:	230a      	movs	r3, #10
   dad54:	fb03 0202 	mla	r2, r3, r2, r0
   dad58:	3a10      	subs	r2, #16
   dad5a:	e7f2      	b.n	dad42 <__gethex+0x104>
   dad5c:	f1b9 0f00 	cmp.w	r9, #0
   dad60:	d000      	beq.n	dad64 <__gethex+0x126>
   dad62:	4252      	negs	r2, r2
   dad64:	4414      	add	r4, r2
   dad66:	e000      	b.n	dad6a <__gethex+0x12c>
   dad68:	4631      	mov	r1, r6
   dad6a:	f8ca 1000 	str.w	r1, [sl]
   dad6e:	b12d      	cbz	r5, dad7c <__gethex+0x13e>
   dad70:	f1bb 0f00 	cmp.w	fp, #0
   dad74:	bf14      	ite	ne
   dad76:	2000      	movne	r0, #0
   dad78:	2006      	moveq	r0, #6
   dad7a:	e17c      	b.n	db076 <__gethex+0x438>
   dad7c:	1bf3      	subs	r3, r6, r7
   dad7e:	3b01      	subs	r3, #1
   dad80:	4629      	mov	r1, r5
   dad82:	2b07      	cmp	r3, #7
   dad84:	dd02      	ble.n	dad8c <__gethex+0x14e>
   dad86:	3101      	adds	r1, #1
   dad88:	105b      	asrs	r3, r3, #1
   dad8a:	e7fa      	b.n	dad82 <__gethex+0x144>
   dad8c:	9802      	ldr	r0, [sp, #8]
   dad8e:	f000 fb09 	bl	db3a4 <_Balloc>
   dad92:	9b01      	ldr	r3, [sp, #4]
   dad94:	f100 0a14 	add.w	sl, r0, #20
   dad98:	f04f 0900 	mov.w	r9, #0
   dad9c:	f1c3 0301 	rsb	r3, r3, #1
   dada0:	4605      	mov	r5, r0
   dada2:	f8cd a010 	str.w	sl, [sp, #16]
   dada6:	46cb      	mov	fp, r9
   dada8:	9308      	str	r3, [sp, #32]
   dadaa:	42b7      	cmp	r7, r6
   dadac:	d22f      	bcs.n	dae0e <__gethex+0x1d0>
   dadae:	1e73      	subs	r3, r6, #1
   dadb0:	9305      	str	r3, [sp, #20]
   dadb2:	9a07      	ldr	r2, [sp, #28]
   dadb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dadb8:	4293      	cmp	r3, r2
   dadba:	d00b      	beq.n	dadd4 <__gethex+0x196>
   dadbc:	f1bb 0f20 	cmp.w	fp, #32
   dadc0:	d116      	bne.n	dadf0 <__gethex+0x1b2>
   dadc2:	9b04      	ldr	r3, [sp, #16]
   dadc4:	f8c3 9000 	str.w	r9, [r3]
   dadc8:	3304      	adds	r3, #4
   dadca:	f04f 0900 	mov.w	r9, #0
   dadce:	9304      	str	r3, [sp, #16]
   dadd0:	46cb      	mov	fp, r9
   dadd2:	e00d      	b.n	dadf0 <__gethex+0x1b2>
   dadd4:	9b05      	ldr	r3, [sp, #20]
   dadd6:	9a08      	ldr	r2, [sp, #32]
   dadd8:	4413      	add	r3, r2
   dadda:	429f      	cmp	r7, r3
   daddc:	d8ee      	bhi.n	dadbc <__gethex+0x17e>
   dadde:	4618      	mov	r0, r3
   dade0:	9a01      	ldr	r2, [sp, #4]
   dade2:	9903      	ldr	r1, [sp, #12]
   dade4:	9309      	str	r3, [sp, #36]	; 0x24
   dade6:	f7fe fdbe 	bl	d9966 <strncmp>
   dadea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dadec:	b168      	cbz	r0, dae0a <__gethex+0x1cc>
   dadee:	e7e5      	b.n	dadbc <__gethex+0x17e>
   dadf0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dadf4:	f7ff ff0e 	bl	dac14 <__hexdig_fun>
   dadf8:	f000 000f 	and.w	r0, r0, #15
   dadfc:	fa00 f00b 	lsl.w	r0, r0, fp
   dae00:	9b05      	ldr	r3, [sp, #20]
   dae02:	ea49 0900 	orr.w	r9, r9, r0
   dae06:	f10b 0b04 	add.w	fp, fp, #4
   dae0a:	461e      	mov	r6, r3
   dae0c:	e7cd      	b.n	dadaa <__gethex+0x16c>
   dae0e:	9804      	ldr	r0, [sp, #16]
   dae10:	f840 9b04 	str.w	r9, [r0], #4
   dae14:	ebca 0000 	rsb	r0, sl, r0
   dae18:	1080      	asrs	r0, r0, #2
   dae1a:	6128      	str	r0, [r5, #16]
   dae1c:	0147      	lsls	r7, r0, #5
   dae1e:	4648      	mov	r0, r9
   dae20:	f000 fb85 	bl	db52e <__hi0bits>
   dae24:	f8d8 6000 	ldr.w	r6, [r8]
   dae28:	1a38      	subs	r0, r7, r0
   dae2a:	42b0      	cmp	r0, r6
   dae2c:	dd26      	ble.n	dae7c <__gethex+0x23e>
   dae2e:	1b87      	subs	r7, r0, r6
   dae30:	4639      	mov	r1, r7
   dae32:	4628      	mov	r0, r5
   dae34:	f000 fe83 	bl	dbb3e <__any_on>
   dae38:	b1c8      	cbz	r0, dae6e <__gethex+0x230>
   dae3a:	1e7b      	subs	r3, r7, #1
   dae3c:	1159      	asrs	r1, r3, #5
   dae3e:	f003 021f 	and.w	r2, r3, #31
   dae42:	f04f 0901 	mov.w	r9, #1
   dae46:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dae4a:	fa09 f202 	lsl.w	r2, r9, r2
   dae4e:	420a      	tst	r2, r1
   dae50:	d00e      	beq.n	dae70 <__gethex+0x232>
   dae52:	454b      	cmp	r3, r9
   dae54:	dc02      	bgt.n	dae5c <__gethex+0x21e>
   dae56:	f04f 0902 	mov.w	r9, #2
   dae5a:	e009      	b.n	dae70 <__gethex+0x232>
   dae5c:	1eb9      	subs	r1, r7, #2
   dae5e:	4628      	mov	r0, r5
   dae60:	f000 fe6d 	bl	dbb3e <__any_on>
   dae64:	2800      	cmp	r0, #0
   dae66:	d0f6      	beq.n	dae56 <__gethex+0x218>
   dae68:	f04f 0903 	mov.w	r9, #3
   dae6c:	e000      	b.n	dae70 <__gethex+0x232>
   dae6e:	4681      	mov	r9, r0
   dae70:	4639      	mov	r1, r7
   dae72:	4628      	mov	r0, r5
   dae74:	f7ff fe98 	bl	daba8 <rshift>
   dae78:	443c      	add	r4, r7
   dae7a:	e00c      	b.n	dae96 <__gethex+0x258>
   dae7c:	da09      	bge.n	dae92 <__gethex+0x254>
   dae7e:	1a37      	subs	r7, r6, r0
   dae80:	4629      	mov	r1, r5
   dae82:	463a      	mov	r2, r7
   dae84:	9802      	ldr	r0, [sp, #8]
   dae86:	f000 fc87 	bl	db798 <__lshift>
   dae8a:	1be4      	subs	r4, r4, r7
   dae8c:	4605      	mov	r5, r0
   dae8e:	f100 0a14 	add.w	sl, r0, #20
   dae92:	f04f 0900 	mov.w	r9, #0
   dae96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dae9a:	429c      	cmp	r4, r3
   dae9c:	dd08      	ble.n	daeb0 <__gethex+0x272>
   dae9e:	9802      	ldr	r0, [sp, #8]
   daea0:	4629      	mov	r1, r5
   daea2:	f000 fab4 	bl	db40e <_Bfree>
   daea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daea8:	2300      	movs	r3, #0
   daeaa:	6013      	str	r3, [r2, #0]
   daeac:	20a3      	movs	r0, #163	; 0xa3
   daeae:	e0e2      	b.n	db076 <__gethex+0x438>
   daeb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daeb4:	4284      	cmp	r4, r0
   daeb6:	da53      	bge.n	daf60 <__gethex+0x322>
   daeb8:	1b04      	subs	r4, r0, r4
   daeba:	42a6      	cmp	r6, r4
   daebc:	dc2e      	bgt.n	daf1c <__gethex+0x2de>
   daebe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daec2:	2b02      	cmp	r3, #2
   daec4:	d01a      	beq.n	daefc <__gethex+0x2be>
   daec6:	2b03      	cmp	r3, #3
   daec8:	d01c      	beq.n	daf04 <__gethex+0x2c6>
   daeca:	2b01      	cmp	r3, #1
   daecc:	d11d      	bne.n	daf0a <__gethex+0x2cc>
   daece:	42a6      	cmp	r6, r4
   daed0:	d11b      	bne.n	daf0a <__gethex+0x2cc>
   daed2:	2e01      	cmp	r6, #1
   daed4:	dc0b      	bgt.n	daeee <__gethex+0x2b0>
   daed6:	9a06      	ldr	r2, [sp, #24]
   daed8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daedc:	6013      	str	r3, [r2, #0]
   daede:	2301      	movs	r3, #1
   daee0:	612b      	str	r3, [r5, #16]
   daee2:	f8ca 3000 	str.w	r3, [sl]
   daee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daee8:	2062      	movs	r0, #98	; 0x62
   daeea:	601d      	str	r5, [r3, #0]
   daeec:	e0c3      	b.n	db076 <__gethex+0x438>
   daeee:	1e71      	subs	r1, r6, #1
   daef0:	4628      	mov	r0, r5
   daef2:	f000 fe24 	bl	dbb3e <__any_on>
   daef6:	2800      	cmp	r0, #0
   daef8:	d1ed      	bne.n	daed6 <__gethex+0x298>
   daefa:	e006      	b.n	daf0a <__gethex+0x2cc>
   daefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daefe:	2b00      	cmp	r3, #0
   daf00:	d0e9      	beq.n	daed6 <__gethex+0x298>
   daf02:	e002      	b.n	daf0a <__gethex+0x2cc>
   daf04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daf06:	2b00      	cmp	r3, #0
   daf08:	d1e5      	bne.n	daed6 <__gethex+0x298>
   daf0a:	9802      	ldr	r0, [sp, #8]
   daf0c:	4629      	mov	r1, r5
   daf0e:	f000 fa7e 	bl	db40e <_Bfree>
   daf12:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daf14:	2300      	movs	r3, #0
   daf16:	6013      	str	r3, [r2, #0]
   daf18:	2050      	movs	r0, #80	; 0x50
   daf1a:	e0ac      	b.n	db076 <__gethex+0x438>
   daf1c:	1e67      	subs	r7, r4, #1
   daf1e:	f1b9 0f00 	cmp.w	r9, #0
   daf22:	d106      	bne.n	daf32 <__gethex+0x2f4>
   daf24:	b13f      	cbz	r7, daf36 <__gethex+0x2f8>
   daf26:	4639      	mov	r1, r7
   daf28:	4628      	mov	r0, r5
   daf2a:	f000 fe08 	bl	dbb3e <__any_on>
   daf2e:	4681      	mov	r9, r0
   daf30:	e001      	b.n	daf36 <__gethex+0x2f8>
   daf32:	f04f 0901 	mov.w	r9, #1
   daf36:	117a      	asrs	r2, r7, #5
   daf38:	2301      	movs	r3, #1
   daf3a:	f007 071f 	and.w	r7, r7, #31
   daf3e:	fa03 f707 	lsl.w	r7, r3, r7
   daf42:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   daf46:	4621      	mov	r1, r4
   daf48:	421f      	tst	r7, r3
   daf4a:	4628      	mov	r0, r5
   daf4c:	bf18      	it	ne
   daf4e:	f049 0902 	orrne.w	r9, r9, #2
   daf52:	1b36      	subs	r6, r6, r4
   daf54:	f7ff fe28 	bl	daba8 <rshift>
   daf58:	2702      	movs	r7, #2
   daf5a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   daf5e:	e000      	b.n	daf62 <__gethex+0x324>
   daf60:	2701      	movs	r7, #1
   daf62:	f1b9 0f00 	cmp.w	r9, #0
   daf66:	f000 8081 	beq.w	db06c <__gethex+0x42e>
   daf6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daf6e:	2b02      	cmp	r3, #2
   daf70:	d00e      	beq.n	daf90 <__gethex+0x352>
   daf72:	2b03      	cmp	r3, #3
   daf74:	d010      	beq.n	daf98 <__gethex+0x35a>
   daf76:	2b01      	cmp	r3, #1
   daf78:	d176      	bne.n	db068 <__gethex+0x42a>
   daf7a:	f019 0f02 	tst.w	r9, #2
   daf7e:	d073      	beq.n	db068 <__gethex+0x42a>
   daf80:	f8da 0000 	ldr.w	r0, [sl]
   daf84:	ea49 0900 	orr.w	r9, r9, r0
   daf88:	f019 0f01 	tst.w	r9, #1
   daf8c:	d107      	bne.n	daf9e <__gethex+0x360>
   daf8e:	e06b      	b.n	db068 <__gethex+0x42a>
   daf90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daf92:	f1c3 0301 	rsb	r3, r3, #1
   daf96:	9315      	str	r3, [sp, #84]	; 0x54
   daf98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   daf9a:	2b00      	cmp	r3, #0
   daf9c:	d064      	beq.n	db068 <__gethex+0x42a>
   daf9e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dafa2:	f105 0314 	add.w	r3, r5, #20
   dafa6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dafaa:	eb03 0109 	add.w	r1, r3, r9
   dafae:	2000      	movs	r0, #0
   dafb0:	681a      	ldr	r2, [r3, #0]
   dafb2:	f1b2 3fff 	cmp.w	r2, #4294967295
   dafb6:	d002      	beq.n	dafbe <__gethex+0x380>
   dafb8:	3201      	adds	r2, #1
   dafba:	601a      	str	r2, [r3, #0]
   dafbc:	e020      	b.n	db000 <__gethex+0x3c2>
   dafbe:	f843 0b04 	str.w	r0, [r3], #4
   dafc2:	4299      	cmp	r1, r3
   dafc4:	d8f4      	bhi.n	dafb0 <__gethex+0x372>
   dafc6:	68ab      	ldr	r3, [r5, #8]
   dafc8:	459a      	cmp	sl, r3
   dafca:	db12      	blt.n	daff2 <__gethex+0x3b4>
   dafcc:	6869      	ldr	r1, [r5, #4]
   dafce:	9802      	ldr	r0, [sp, #8]
   dafd0:	3101      	adds	r1, #1
   dafd2:	f000 f9e7 	bl	db3a4 <_Balloc>
   dafd6:	692a      	ldr	r2, [r5, #16]
   dafd8:	3202      	adds	r2, #2
   dafda:	f105 010c 	add.w	r1, r5, #12
   dafde:	4683      	mov	fp, r0
   dafe0:	0092      	lsls	r2, r2, #2
   dafe2:	300c      	adds	r0, #12
   dafe4:	f7fe fc40 	bl	d9868 <memcpy>
   dafe8:	4629      	mov	r1, r5
   dafea:	9802      	ldr	r0, [sp, #8]
   dafec:	f000 fa0f 	bl	db40e <_Bfree>
   daff0:	465d      	mov	r5, fp
   daff2:	692b      	ldr	r3, [r5, #16]
   daff4:	1c5a      	adds	r2, r3, #1
   daff6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   daffa:	612a      	str	r2, [r5, #16]
   daffc:	2201      	movs	r2, #1
   daffe:	615a      	str	r2, [r3, #20]
   db000:	2f02      	cmp	r7, #2
   db002:	f105 0214 	add.w	r2, r5, #20
   db006:	d111      	bne.n	db02c <__gethex+0x3ee>
   db008:	f8d8 3000 	ldr.w	r3, [r8]
   db00c:	3b01      	subs	r3, #1
   db00e:	429e      	cmp	r6, r3
   db010:	d127      	bne.n	db062 <__gethex+0x424>
   db012:	1171      	asrs	r1, r6, #5
   db014:	2301      	movs	r3, #1
   db016:	f006 061f 	and.w	r6, r6, #31
   db01a:	fa03 f606 	lsl.w	r6, r3, r6
   db01e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   db022:	421e      	tst	r6, r3
   db024:	bf0c      	ite	eq
   db026:	2702      	moveq	r7, #2
   db028:	2701      	movne	r7, #1
   db02a:	e01a      	b.n	db062 <__gethex+0x424>
   db02c:	692b      	ldr	r3, [r5, #16]
   db02e:	459a      	cmp	sl, r3
   db030:	da0a      	bge.n	db048 <__gethex+0x40a>
   db032:	2101      	movs	r1, #1
   db034:	4628      	mov	r0, r5
   db036:	f7ff fdb7 	bl	daba8 <rshift>
   db03a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db03e:	3401      	adds	r4, #1
   db040:	429c      	cmp	r4, r3
   db042:	f73f af2c 	bgt.w	dae9e <__gethex+0x260>
   db046:	e00b      	b.n	db060 <__gethex+0x422>
   db048:	f016 061f 	ands.w	r6, r6, #31
   db04c:	d008      	beq.n	db060 <__gethex+0x422>
   db04e:	4491      	add	r9, r2
   db050:	f1c6 0620 	rsb	r6, r6, #32
   db054:	f859 0c04 	ldr.w	r0, [r9, #-4]
   db058:	f000 fa69 	bl	db52e <__hi0bits>
   db05c:	42b0      	cmp	r0, r6
   db05e:	dbe8      	blt.n	db032 <__gethex+0x3f4>
   db060:	2701      	movs	r7, #1
   db062:	f047 0720 	orr.w	r7, r7, #32
   db066:	e001      	b.n	db06c <__gethex+0x42e>
   db068:	f047 0710 	orr.w	r7, r7, #16
   db06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db06e:	601d      	str	r5, [r3, #0]
   db070:	9b06      	ldr	r3, [sp, #24]
   db072:	4638      	mov	r0, r7
   db074:	601c      	str	r4, [r3, #0]
   db076:	b00b      	add	sp, #44	; 0x2c
   db078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db07c <L_shift>:
   db07c:	f1c2 0208 	rsb	r2, r2, #8
   db080:	0092      	lsls	r2, r2, #2
   db082:	b570      	push	{r4, r5, r6, lr}
   db084:	f1c2 0620 	rsb	r6, r2, #32
   db088:	6843      	ldr	r3, [r0, #4]
   db08a:	6805      	ldr	r5, [r0, #0]
   db08c:	fa03 f406 	lsl.w	r4, r3, r6
   db090:	432c      	orrs	r4, r5
   db092:	40d3      	lsrs	r3, r2
   db094:	6004      	str	r4, [r0, #0]
   db096:	f840 3f04 	str.w	r3, [r0, #4]!
   db09a:	4288      	cmp	r0, r1
   db09c:	d3f4      	bcc.n	db088 <L_shift+0xc>
   db09e:	bd70      	pop	{r4, r5, r6, pc}

000db0a0 <__match>:
   db0a0:	b530      	push	{r4, r5, lr}
   db0a2:	6803      	ldr	r3, [r0, #0]
   db0a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   db0a8:	3301      	adds	r3, #1
   db0aa:	b14c      	cbz	r4, db0c0 <__match+0x20>
   db0ac:	781a      	ldrb	r2, [r3, #0]
   db0ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   db0b2:	2d19      	cmp	r5, #25
   db0b4:	bf98      	it	ls
   db0b6:	3220      	addls	r2, #32
   db0b8:	42a2      	cmp	r2, r4
   db0ba:	d0f3      	beq.n	db0a4 <__match+0x4>
   db0bc:	2000      	movs	r0, #0
   db0be:	bd30      	pop	{r4, r5, pc}
   db0c0:	6003      	str	r3, [r0, #0]
   db0c2:	2001      	movs	r0, #1
   db0c4:	bd30      	pop	{r4, r5, pc}

000db0c6 <__hexnan>:
   db0c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0ca:	680b      	ldr	r3, [r1, #0]
   db0cc:	f8d0 b000 	ldr.w	fp, [r0]
   db0d0:	115e      	asrs	r6, r3, #5
   db0d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   db0d6:	f013 031f 	ands.w	r3, r3, #31
   db0da:	b085      	sub	sp, #20
   db0dc:	bf18      	it	ne
   db0de:	3604      	addne	r6, #4
   db0e0:	1f35      	subs	r5, r6, #4
   db0e2:	4617      	mov	r7, r2
   db0e4:	2200      	movs	r2, #0
   db0e6:	4682      	mov	sl, r0
   db0e8:	9301      	str	r3, [sp, #4]
   db0ea:	f846 2c04 	str.w	r2, [r6, #-4]
   db0ee:	46a8      	mov	r8, r5
   db0f0:	462c      	mov	r4, r5
   db0f2:	9200      	str	r2, [sp, #0]
   db0f4:	4691      	mov	r9, r2
   db0f6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   db0fa:	2900      	cmp	r1, #0
   db0fc:	d03c      	beq.n	db178 <__hexnan+0xb2>
   db0fe:	4608      	mov	r0, r1
   db100:	9203      	str	r2, [sp, #12]
   db102:	9102      	str	r1, [sp, #8]
   db104:	f7ff fd86 	bl	dac14 <__hexdig_fun>
   db108:	9a03      	ldr	r2, [sp, #12]
   db10a:	bb00      	cbnz	r0, db14e <__hexnan+0x88>
   db10c:	9902      	ldr	r1, [sp, #8]
   db10e:	2920      	cmp	r1, #32
   db110:	d816      	bhi.n	db140 <__hexnan+0x7a>
   db112:	9b00      	ldr	r3, [sp, #0]
   db114:	4599      	cmp	r9, r3
   db116:	ddee      	ble.n	db0f6 <__hexnan+0x30>
   db118:	4544      	cmp	r4, r8
   db11a:	d205      	bcs.n	db128 <__hexnan+0x62>
   db11c:	2a07      	cmp	r2, #7
   db11e:	dc03      	bgt.n	db128 <__hexnan+0x62>
   db120:	4641      	mov	r1, r8
   db122:	4620      	mov	r0, r4
   db124:	f7ff ffaa 	bl	db07c <L_shift>
   db128:	42bc      	cmp	r4, r7
   db12a:	d923      	bls.n	db174 <__hexnan+0xae>
   db12c:	2300      	movs	r3, #0
   db12e:	f1a4 0804 	sub.w	r8, r4, #4
   db132:	f844 3c04 	str.w	r3, [r4, #-4]
   db136:	f8cd 9000 	str.w	r9, [sp]
   db13a:	4644      	mov	r4, r8
   db13c:	461a      	mov	r2, r3
   db13e:	e7da      	b.n	db0f6 <__hexnan+0x30>
   db140:	2929      	cmp	r1, #41	; 0x29
   db142:	d148      	bne.n	db1d6 <__hexnan+0x110>
   db144:	f10b 0301 	add.w	r3, fp, #1
   db148:	f8ca 3000 	str.w	r3, [sl]
   db14c:	e014      	b.n	db178 <__hexnan+0xb2>
   db14e:	3201      	adds	r2, #1
   db150:	2a08      	cmp	r2, #8
   db152:	f109 0901 	add.w	r9, r9, #1
   db156:	dd06      	ble.n	db166 <__hexnan+0xa0>
   db158:	42bc      	cmp	r4, r7
   db15a:	d9cc      	bls.n	db0f6 <__hexnan+0x30>
   db15c:	2300      	movs	r3, #0
   db15e:	f844 3c04 	str.w	r3, [r4, #-4]
   db162:	2201      	movs	r2, #1
   db164:	3c04      	subs	r4, #4
   db166:	6821      	ldr	r1, [r4, #0]
   db168:	f000 000f 	and.w	r0, r0, #15
   db16c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   db170:	6020      	str	r0, [r4, #0]
   db172:	e7c0      	b.n	db0f6 <__hexnan+0x30>
   db174:	2208      	movs	r2, #8
   db176:	e7be      	b.n	db0f6 <__hexnan+0x30>
   db178:	f1b9 0f00 	cmp.w	r9, #0
   db17c:	d02b      	beq.n	db1d6 <__hexnan+0x110>
   db17e:	4544      	cmp	r4, r8
   db180:	d205      	bcs.n	db18e <__hexnan+0xc8>
   db182:	2a07      	cmp	r2, #7
   db184:	dc03      	bgt.n	db18e <__hexnan+0xc8>
   db186:	4641      	mov	r1, r8
   db188:	4620      	mov	r0, r4
   db18a:	f7ff ff77 	bl	db07c <L_shift>
   db18e:	42bc      	cmp	r4, r7
   db190:	d90c      	bls.n	db1ac <__hexnan+0xe6>
   db192:	463b      	mov	r3, r7
   db194:	f854 2b04 	ldr.w	r2, [r4], #4
   db198:	f843 2b04 	str.w	r2, [r3], #4
   db19c:	42a5      	cmp	r5, r4
   db19e:	d2f9      	bcs.n	db194 <__hexnan+0xce>
   db1a0:	2200      	movs	r2, #0
   db1a2:	f843 2b04 	str.w	r2, [r3], #4
   db1a6:	429d      	cmp	r5, r3
   db1a8:	d2fb      	bcs.n	db1a2 <__hexnan+0xdc>
   db1aa:	e00b      	b.n	db1c4 <__hexnan+0xfe>
   db1ac:	9b01      	ldr	r3, [sp, #4]
   db1ae:	b14b      	cbz	r3, db1c4 <__hexnan+0xfe>
   db1b0:	f1c3 0220 	rsb	r2, r3, #32
   db1b4:	f04f 33ff 	mov.w	r3, #4294967295
   db1b8:	40d3      	lsrs	r3, r2
   db1ba:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db1be:	4013      	ands	r3, r2
   db1c0:	f846 3c04 	str.w	r3, [r6, #-4]
   db1c4:	682b      	ldr	r3, [r5, #0]
   db1c6:	b943      	cbnz	r3, db1da <__hexnan+0x114>
   db1c8:	42bd      	cmp	r5, r7
   db1ca:	d102      	bne.n	db1d2 <__hexnan+0x10c>
   db1cc:	2301      	movs	r3, #1
   db1ce:	602b      	str	r3, [r5, #0]
   db1d0:	e003      	b.n	db1da <__hexnan+0x114>
   db1d2:	3d04      	subs	r5, #4
   db1d4:	e7f6      	b.n	db1c4 <__hexnan+0xfe>
   db1d6:	2004      	movs	r0, #4
   db1d8:	e000      	b.n	db1dc <__hexnan+0x116>
   db1da:	2005      	movs	r0, #5
   db1dc:	b005      	add	sp, #20
   db1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db1e4 <_findenv_r>:
   db1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1e8:	4607      	mov	r7, r0
   db1ea:	468b      	mov	fp, r1
   db1ec:	4690      	mov	r8, r2
   db1ee:	f000 fcd6 	bl	dbb9e <__env_lock>
   db1f2:	4b19      	ldr	r3, [pc, #100]	; (db258 <_findenv_r+0x74>)
   db1f4:	681d      	ldr	r5, [r3, #0]
   db1f6:	469a      	mov	sl, r3
   db1f8:	b13d      	cbz	r5, db20a <_findenv_r+0x26>
   db1fa:	465c      	mov	r4, fp
   db1fc:	4623      	mov	r3, r4
   db1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   db202:	b142      	cbz	r2, db216 <_findenv_r+0x32>
   db204:	2a3d      	cmp	r2, #61	; 0x3d
   db206:	461c      	mov	r4, r3
   db208:	d1f8      	bne.n	db1fc <_findenv_r+0x18>
   db20a:	4638      	mov	r0, r7
   db20c:	f000 fcc8 	bl	dbba0 <__env_unlock>
   db210:	2000      	movs	r0, #0
   db212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db216:	ebcb 0404 	rsb	r4, fp, r4
   db21a:	46a9      	mov	r9, r5
   db21c:	f859 0b04 	ldr.w	r0, [r9], #4
   db220:	2800      	cmp	r0, #0
   db222:	d0f2      	beq.n	db20a <_findenv_r+0x26>
   db224:	4622      	mov	r2, r4
   db226:	4659      	mov	r1, fp
   db228:	f7fe fb9d 	bl	d9966 <strncmp>
   db22c:	b988      	cbnz	r0, db252 <_findenv_r+0x6e>
   db22e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db232:	191e      	adds	r6, r3, r4
   db234:	5d1b      	ldrb	r3, [r3, r4]
   db236:	2b3d      	cmp	r3, #61	; 0x3d
   db238:	d10b      	bne.n	db252 <_findenv_r+0x6e>
   db23a:	f8da 3000 	ldr.w	r3, [sl]
   db23e:	1aed      	subs	r5, r5, r3
   db240:	10ad      	asrs	r5, r5, #2
   db242:	4638      	mov	r0, r7
   db244:	f8c8 5000 	str.w	r5, [r8]
   db248:	f000 fcaa 	bl	dbba0 <__env_unlock>
   db24c:	1c70      	adds	r0, r6, #1
   db24e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db252:	464d      	mov	r5, r9
   db254:	e7e1      	b.n	db21a <_findenv_r+0x36>
   db256:	bf00      	nop
   db258:	2003e118 	.word	0x2003e118

000db25c <_getenv_r>:
   db25c:	b507      	push	{r0, r1, r2, lr}
   db25e:	aa01      	add	r2, sp, #4
   db260:	f7ff ffc0 	bl	db1e4 <_findenv_r>
   db264:	b003      	add	sp, #12
   db266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db26c <__gettzinfo>:
   db26c:	4800      	ldr	r0, [pc, #0]	; (db270 <__gettzinfo+0x4>)
   db26e:	4770      	bx	lr
   db270:	2003e0d8 	.word	0x2003e0d8

000db274 <gmtime_r>:
   db274:	6802      	ldr	r2, [r0, #0]
   db276:	4b47      	ldr	r3, [pc, #284]	; (db394 <gmtime_r+0x120>)
   db278:	b5f0      	push	{r4, r5, r6, r7, lr}
   db27a:	fb92 f4f3 	sdiv	r4, r2, r3
   db27e:	fb03 2214 	mls	r2, r3, r4, r2
   db282:	2a00      	cmp	r2, #0
   db284:	bfbc      	itt	lt
   db286:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db28a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db28e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db292:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db296:	fb92 f3f0 	sdiv	r3, r2, r0
   db29a:	fb00 2213 	mls	r2, r0, r3, r2
   db29e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db2a2:	bfac      	ite	ge
   db2a4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db2a8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db2ac:	608b      	str	r3, [r1, #8]
   db2ae:	fb92 f3f0 	sdiv	r3, r2, r0
   db2b2:	fb00 2213 	mls	r2, r0, r3, r2
   db2b6:	604b      	str	r3, [r1, #4]
   db2b8:	600a      	str	r2, [r1, #0]
   db2ba:	2307      	movs	r3, #7
   db2bc:	1ce2      	adds	r2, r4, #3
   db2be:	fb92 f3f3 	sdiv	r3, r2, r3
   db2c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db2c6:	1ad3      	subs	r3, r2, r3
   db2c8:	618b      	str	r3, [r1, #24]
   db2ca:	4b33      	ldr	r3, [pc, #204]	; (db398 <gmtime_r+0x124>)
   db2cc:	4d33      	ldr	r5, [pc, #204]	; (db39c <gmtime_r+0x128>)
   db2ce:	fb94 f5f5 	sdiv	r5, r4, r5
   db2d2:	fb03 4405 	mla	r4, r3, r5, r4
   db2d6:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db2da:	fbb4 f2f2 	udiv	r2, r4, r2
   db2de:	4422      	add	r2, r4
   db2e0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db2e4:	fbb4 f3f7 	udiv	r3, r4, r7
   db2e8:	1ad2      	subs	r2, r2, r3
   db2ea:	482d      	ldr	r0, [pc, #180]	; (db3a0 <gmtime_r+0x12c>)
   db2ec:	fbb4 f0f0 	udiv	r0, r4, r0
   db2f0:	f648 6694 	movw	r6, #36500	; 0x8e94
   db2f4:	1a13      	subs	r3, r2, r0
   db2f6:	fbb3 f6f6 	udiv	r6, r3, r6
   db2fa:	4434      	add	r4, r6
   db2fc:	f240 126d 	movw	r2, #365	; 0x16d
   db300:	fbb3 f0f2 	udiv	r0, r3, r2
   db304:	fbb3 f3f7 	udiv	r3, r3, r7
   db308:	1ae3      	subs	r3, r4, r3
   db30a:	fb02 3310 	mls	r3, r2, r0, r3
   db30e:	2499      	movs	r4, #153	; 0x99
   db310:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db314:	3202      	adds	r2, #2
   db316:	fbb2 f2f4 	udiv	r2, r2, r4
   db31a:	2a0a      	cmp	r2, #10
   db31c:	fb04 f402 	mul.w	r4, r4, r2
   db320:	f104 0602 	add.w	r6, r4, #2
   db324:	f04f 0405 	mov.w	r4, #5
   db328:	fbb6 f4f4 	udiv	r4, r6, r4
   db32c:	bf34      	ite	cc
   db32e:	2602      	movcc	r6, #2
   db330:	f06f 0609 	mvncs.w	r6, #9
   db334:	4416      	add	r6, r2
   db336:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db33a:	fb02 0505 	mla	r5, r2, r5, r0
   db33e:	1c5f      	adds	r7, r3, #1
   db340:	2e01      	cmp	r6, #1
   db342:	bf98      	it	ls
   db344:	3501      	addls	r5, #1
   db346:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db34a:	eba7 0704 	sub.w	r7, r7, r4
   db34e:	d302      	bcc.n	db356 <gmtime_r+0xe2>
   db350:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db354:	e014      	b.n	db380 <gmtime_r+0x10c>
   db356:	0782      	lsls	r2, r0, #30
   db358:	d105      	bne.n	db366 <gmtime_r+0xf2>
   db35a:	2464      	movs	r4, #100	; 0x64
   db35c:	fbb0 f2f4 	udiv	r2, r0, r4
   db360:	fb04 0212 	mls	r2, r4, r2, r0
   db364:	b94a      	cbnz	r2, db37a <gmtime_r+0x106>
   db366:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db36a:	fbb0 f4f2 	udiv	r4, r0, r2
   db36e:	fb02 0014 	mls	r0, r2, r4, r0
   db372:	fab0 f280 	clz	r2, r0
   db376:	0952      	lsrs	r2, r2, #5
   db378:	e000      	b.n	db37c <gmtime_r+0x108>
   db37a:	2201      	movs	r2, #1
   db37c:	333b      	adds	r3, #59	; 0x3b
   db37e:	441a      	add	r2, r3
   db380:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db384:	2300      	movs	r3, #0
   db386:	61ca      	str	r2, [r1, #28]
   db388:	614d      	str	r5, [r1, #20]
   db38a:	610e      	str	r6, [r1, #16]
   db38c:	60cf      	str	r7, [r1, #12]
   db38e:	620b      	str	r3, [r1, #32]
   db390:	4608      	mov	r0, r1
   db392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db394:	00015180 	.word	0x00015180
   db398:	fffdc54f 	.word	0xfffdc54f
   db39c:	00023ab1 	.word	0x00023ab1
   db3a0:	00023ab0 	.word	0x00023ab0

000db3a4 <_Balloc>:
   db3a4:	b570      	push	{r4, r5, r6, lr}
   db3a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db3a8:	4604      	mov	r4, r0
   db3aa:	460e      	mov	r6, r1
   db3ac:	b93d      	cbnz	r5, db3be <_Balloc+0x1a>
   db3ae:	2010      	movs	r0, #16
   db3b0:	f7fb faaa 	bl	d6908 <malloc>
   db3b4:	6260      	str	r0, [r4, #36]	; 0x24
   db3b6:	6045      	str	r5, [r0, #4]
   db3b8:	6085      	str	r5, [r0, #8]
   db3ba:	6005      	str	r5, [r0, #0]
   db3bc:	60c5      	str	r5, [r0, #12]
   db3be:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db3c0:	68eb      	ldr	r3, [r5, #12]
   db3c2:	b143      	cbz	r3, db3d6 <_Balloc+0x32>
   db3c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db3c6:	68db      	ldr	r3, [r3, #12]
   db3c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db3cc:	b178      	cbz	r0, db3ee <_Balloc+0x4a>
   db3ce:	6802      	ldr	r2, [r0, #0]
   db3d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db3d4:	e017      	b.n	db406 <_Balloc+0x62>
   db3d6:	2221      	movs	r2, #33	; 0x21
   db3d8:	2104      	movs	r1, #4
   db3da:	4620      	mov	r0, r4
   db3dc:	f000 fbd1 	bl	dbb82 <_calloc_r>
   db3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db3e2:	60e8      	str	r0, [r5, #12]
   db3e4:	68db      	ldr	r3, [r3, #12]
   db3e6:	2b00      	cmp	r3, #0
   db3e8:	d1ec      	bne.n	db3c4 <_Balloc+0x20>
   db3ea:	2000      	movs	r0, #0
   db3ec:	bd70      	pop	{r4, r5, r6, pc}
   db3ee:	2101      	movs	r1, #1
   db3f0:	fa01 f506 	lsl.w	r5, r1, r6
   db3f4:	1d6a      	adds	r2, r5, #5
   db3f6:	0092      	lsls	r2, r2, #2
   db3f8:	4620      	mov	r0, r4
   db3fa:	f000 fbc2 	bl	dbb82 <_calloc_r>
   db3fe:	2800      	cmp	r0, #0
   db400:	d0f3      	beq.n	db3ea <_Balloc+0x46>
   db402:	6046      	str	r6, [r0, #4]
   db404:	6085      	str	r5, [r0, #8]
   db406:	2300      	movs	r3, #0
   db408:	6103      	str	r3, [r0, #16]
   db40a:	60c3      	str	r3, [r0, #12]
   db40c:	bd70      	pop	{r4, r5, r6, pc}

000db40e <_Bfree>:
   db40e:	b570      	push	{r4, r5, r6, lr}
   db410:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db412:	4606      	mov	r6, r0
   db414:	460d      	mov	r5, r1
   db416:	b93c      	cbnz	r4, db428 <_Bfree+0x1a>
   db418:	2010      	movs	r0, #16
   db41a:	f7fb fa75 	bl	d6908 <malloc>
   db41e:	6270      	str	r0, [r6, #36]	; 0x24
   db420:	6044      	str	r4, [r0, #4]
   db422:	6084      	str	r4, [r0, #8]
   db424:	6004      	str	r4, [r0, #0]
   db426:	60c4      	str	r4, [r0, #12]
   db428:	b13d      	cbz	r5, db43a <_Bfree+0x2c>
   db42a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db42c:	686a      	ldr	r2, [r5, #4]
   db42e:	68db      	ldr	r3, [r3, #12]
   db430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db434:	6029      	str	r1, [r5, #0]
   db436:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db43a:	bd70      	pop	{r4, r5, r6, pc}

000db43c <__multadd>:
   db43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db440:	690d      	ldr	r5, [r1, #16]
   db442:	461f      	mov	r7, r3
   db444:	4606      	mov	r6, r0
   db446:	460c      	mov	r4, r1
   db448:	f101 0e14 	add.w	lr, r1, #20
   db44c:	2300      	movs	r3, #0
   db44e:	f8de 0000 	ldr.w	r0, [lr]
   db452:	b281      	uxth	r1, r0
   db454:	fb02 7101 	mla	r1, r2, r1, r7
   db458:	0c0f      	lsrs	r7, r1, #16
   db45a:	0c00      	lsrs	r0, r0, #16
   db45c:	fb02 7000 	mla	r0, r2, r0, r7
   db460:	b289      	uxth	r1, r1
   db462:	3301      	adds	r3, #1
   db464:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db468:	429d      	cmp	r5, r3
   db46a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db46e:	f84e 1b04 	str.w	r1, [lr], #4
   db472:	dcec      	bgt.n	db44e <__multadd+0x12>
   db474:	b1d7      	cbz	r7, db4ac <__multadd+0x70>
   db476:	68a3      	ldr	r3, [r4, #8]
   db478:	429d      	cmp	r5, r3
   db47a:	db12      	blt.n	db4a2 <__multadd+0x66>
   db47c:	6861      	ldr	r1, [r4, #4]
   db47e:	4630      	mov	r0, r6
   db480:	3101      	adds	r1, #1
   db482:	f7ff ff8f 	bl	db3a4 <_Balloc>
   db486:	6922      	ldr	r2, [r4, #16]
   db488:	3202      	adds	r2, #2
   db48a:	f104 010c 	add.w	r1, r4, #12
   db48e:	4680      	mov	r8, r0
   db490:	0092      	lsls	r2, r2, #2
   db492:	300c      	adds	r0, #12
   db494:	f7fe f9e8 	bl	d9868 <memcpy>
   db498:	4621      	mov	r1, r4
   db49a:	4630      	mov	r0, r6
   db49c:	f7ff ffb7 	bl	db40e <_Bfree>
   db4a0:	4644      	mov	r4, r8
   db4a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db4a6:	3501      	adds	r5, #1
   db4a8:	615f      	str	r7, [r3, #20]
   db4aa:	6125      	str	r5, [r4, #16]
   db4ac:	4620      	mov	r0, r4
   db4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db4b2 <__s2b>:
   db4b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db4b6:	460c      	mov	r4, r1
   db4b8:	4615      	mov	r5, r2
   db4ba:	461f      	mov	r7, r3
   db4bc:	2209      	movs	r2, #9
   db4be:	3308      	adds	r3, #8
   db4c0:	4606      	mov	r6, r0
   db4c2:	fb93 f3f2 	sdiv	r3, r3, r2
   db4c6:	2100      	movs	r1, #0
   db4c8:	2201      	movs	r2, #1
   db4ca:	429a      	cmp	r2, r3
   db4cc:	da02      	bge.n	db4d4 <__s2b+0x22>
   db4ce:	0052      	lsls	r2, r2, #1
   db4d0:	3101      	adds	r1, #1
   db4d2:	e7fa      	b.n	db4ca <__s2b+0x18>
   db4d4:	4630      	mov	r0, r6
   db4d6:	f7ff ff65 	bl	db3a4 <_Balloc>
   db4da:	9b08      	ldr	r3, [sp, #32]
   db4dc:	6143      	str	r3, [r0, #20]
   db4de:	2d09      	cmp	r5, #9
   db4e0:	f04f 0301 	mov.w	r3, #1
   db4e4:	6103      	str	r3, [r0, #16]
   db4e6:	dd11      	ble.n	db50c <__s2b+0x5a>
   db4e8:	f104 0809 	add.w	r8, r4, #9
   db4ec:	46c1      	mov	r9, r8
   db4ee:	442c      	add	r4, r5
   db4f0:	f819 3b01 	ldrb.w	r3, [r9], #1
   db4f4:	4601      	mov	r1, r0
   db4f6:	3b30      	subs	r3, #48	; 0x30
   db4f8:	220a      	movs	r2, #10
   db4fa:	4630      	mov	r0, r6
   db4fc:	f7ff ff9e 	bl	db43c <__multadd>
   db500:	45a1      	cmp	r9, r4
   db502:	d1f5      	bne.n	db4f0 <__s2b+0x3e>
   db504:	eb08 0405 	add.w	r4, r8, r5
   db508:	3c08      	subs	r4, #8
   db50a:	e001      	b.n	db510 <__s2b+0x5e>
   db50c:	340a      	adds	r4, #10
   db50e:	2509      	movs	r5, #9
   db510:	1b2d      	subs	r5, r5, r4
   db512:	1963      	adds	r3, r4, r5
   db514:	429f      	cmp	r7, r3
   db516:	dd08      	ble.n	db52a <__s2b+0x78>
   db518:	f814 3b01 	ldrb.w	r3, [r4], #1
   db51c:	4601      	mov	r1, r0
   db51e:	3b30      	subs	r3, #48	; 0x30
   db520:	220a      	movs	r2, #10
   db522:	4630      	mov	r0, r6
   db524:	f7ff ff8a 	bl	db43c <__multadd>
   db528:	e7f3      	b.n	db512 <__s2b+0x60>
   db52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db52e <__hi0bits>:
   db52e:	0c03      	lsrs	r3, r0, #16
   db530:	041b      	lsls	r3, r3, #16
   db532:	b913      	cbnz	r3, db53a <__hi0bits+0xc>
   db534:	0400      	lsls	r0, r0, #16
   db536:	2310      	movs	r3, #16
   db538:	e000      	b.n	db53c <__hi0bits+0xe>
   db53a:	2300      	movs	r3, #0
   db53c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db540:	bf04      	itt	eq
   db542:	0200      	lsleq	r0, r0, #8
   db544:	3308      	addeq	r3, #8
   db546:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db54a:	bf04      	itt	eq
   db54c:	0100      	lsleq	r0, r0, #4
   db54e:	3304      	addeq	r3, #4
   db550:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db554:	bf04      	itt	eq
   db556:	0080      	lsleq	r0, r0, #2
   db558:	3302      	addeq	r3, #2
   db55a:	2800      	cmp	r0, #0
   db55c:	db03      	blt.n	db566 <__hi0bits+0x38>
   db55e:	0042      	lsls	r2, r0, #1
   db560:	d503      	bpl.n	db56a <__hi0bits+0x3c>
   db562:	1c58      	adds	r0, r3, #1
   db564:	4770      	bx	lr
   db566:	4618      	mov	r0, r3
   db568:	4770      	bx	lr
   db56a:	2020      	movs	r0, #32
   db56c:	4770      	bx	lr

000db56e <__lo0bits>:
   db56e:	6803      	ldr	r3, [r0, #0]
   db570:	f013 0207 	ands.w	r2, r3, #7
   db574:	d00b      	beq.n	db58e <__lo0bits+0x20>
   db576:	07d9      	lsls	r1, r3, #31
   db578:	d422      	bmi.n	db5c0 <__lo0bits+0x52>
   db57a:	079a      	lsls	r2, r3, #30
   db57c:	bf4b      	itete	mi
   db57e:	085b      	lsrmi	r3, r3, #1
   db580:	089b      	lsrpl	r3, r3, #2
   db582:	6003      	strmi	r3, [r0, #0]
   db584:	6003      	strpl	r3, [r0, #0]
   db586:	bf4c      	ite	mi
   db588:	2001      	movmi	r0, #1
   db58a:	2002      	movpl	r0, #2
   db58c:	4770      	bx	lr
   db58e:	b299      	uxth	r1, r3
   db590:	b909      	cbnz	r1, db596 <__lo0bits+0x28>
   db592:	0c1b      	lsrs	r3, r3, #16
   db594:	2210      	movs	r2, #16
   db596:	f013 0fff 	tst.w	r3, #255	; 0xff
   db59a:	bf04      	itt	eq
   db59c:	0a1b      	lsreq	r3, r3, #8
   db59e:	3208      	addeq	r2, #8
   db5a0:	0719      	lsls	r1, r3, #28
   db5a2:	bf04      	itt	eq
   db5a4:	091b      	lsreq	r3, r3, #4
   db5a6:	3204      	addeq	r2, #4
   db5a8:	0799      	lsls	r1, r3, #30
   db5aa:	bf04      	itt	eq
   db5ac:	089b      	lsreq	r3, r3, #2
   db5ae:	3202      	addeq	r2, #2
   db5b0:	07d9      	lsls	r1, r3, #31
   db5b2:	d402      	bmi.n	db5ba <__lo0bits+0x4c>
   db5b4:	085b      	lsrs	r3, r3, #1
   db5b6:	d005      	beq.n	db5c4 <__lo0bits+0x56>
   db5b8:	3201      	adds	r2, #1
   db5ba:	6003      	str	r3, [r0, #0]
   db5bc:	4610      	mov	r0, r2
   db5be:	4770      	bx	lr
   db5c0:	2000      	movs	r0, #0
   db5c2:	4770      	bx	lr
   db5c4:	2020      	movs	r0, #32
   db5c6:	4770      	bx	lr

000db5c8 <__i2b>:
   db5c8:	b510      	push	{r4, lr}
   db5ca:	460c      	mov	r4, r1
   db5cc:	2101      	movs	r1, #1
   db5ce:	f7ff fee9 	bl	db3a4 <_Balloc>
   db5d2:	2201      	movs	r2, #1
   db5d4:	6144      	str	r4, [r0, #20]
   db5d6:	6102      	str	r2, [r0, #16]
   db5d8:	bd10      	pop	{r4, pc}

000db5da <__multiply>:
   db5da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db5de:	4614      	mov	r4, r2
   db5e0:	690a      	ldr	r2, [r1, #16]
   db5e2:	6923      	ldr	r3, [r4, #16]
   db5e4:	429a      	cmp	r2, r3
   db5e6:	bfb8      	it	lt
   db5e8:	460b      	movlt	r3, r1
   db5ea:	4688      	mov	r8, r1
   db5ec:	bfbc      	itt	lt
   db5ee:	46a0      	movlt	r8, r4
   db5f0:	461c      	movlt	r4, r3
   db5f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db5f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db5fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db602:	eb07 0609 	add.w	r6, r7, r9
   db606:	429e      	cmp	r6, r3
   db608:	bfc8      	it	gt
   db60a:	3101      	addgt	r1, #1
   db60c:	f7ff feca 	bl	db3a4 <_Balloc>
   db610:	f100 0514 	add.w	r5, r0, #20
   db614:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db618:	462b      	mov	r3, r5
   db61a:	2200      	movs	r2, #0
   db61c:	4563      	cmp	r3, ip
   db61e:	d202      	bcs.n	db626 <__multiply+0x4c>
   db620:	f843 2b04 	str.w	r2, [r3], #4
   db624:	e7fa      	b.n	db61c <__multiply+0x42>
   db626:	f104 0214 	add.w	r2, r4, #20
   db62a:	f108 0114 	add.w	r1, r8, #20
   db62e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db632:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db636:	9300      	str	r3, [sp, #0]
   db638:	9b00      	ldr	r3, [sp, #0]
   db63a:	9201      	str	r2, [sp, #4]
   db63c:	4293      	cmp	r3, r2
   db63e:	d957      	bls.n	db6f0 <__multiply+0x116>
   db640:	f8b2 b000 	ldrh.w	fp, [r2]
   db644:	f1bb 0f00 	cmp.w	fp, #0
   db648:	d023      	beq.n	db692 <__multiply+0xb8>
   db64a:	4689      	mov	r9, r1
   db64c:	46ae      	mov	lr, r5
   db64e:	f04f 0800 	mov.w	r8, #0
   db652:	f859 4b04 	ldr.w	r4, [r9], #4
   db656:	f8be a000 	ldrh.w	sl, [lr]
   db65a:	b2a3      	uxth	r3, r4
   db65c:	fb0b a303 	mla	r3, fp, r3, sl
   db660:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db664:	f8de 4000 	ldr.w	r4, [lr]
   db668:	4443      	add	r3, r8
   db66a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db66e:	fb0b 840a 	mla	r4, fp, sl, r8
   db672:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db676:	46f2      	mov	sl, lr
   db678:	b29b      	uxth	r3, r3
   db67a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db67e:	454f      	cmp	r7, r9
   db680:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db684:	f84a 3b04 	str.w	r3, [sl], #4
   db688:	d901      	bls.n	db68e <__multiply+0xb4>
   db68a:	46d6      	mov	lr, sl
   db68c:	e7e1      	b.n	db652 <__multiply+0x78>
   db68e:	f8ce 8004 	str.w	r8, [lr, #4]
   db692:	9b01      	ldr	r3, [sp, #4]
   db694:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db698:	3204      	adds	r2, #4
   db69a:	f1ba 0f00 	cmp.w	sl, #0
   db69e:	d021      	beq.n	db6e4 <__multiply+0x10a>
   db6a0:	682b      	ldr	r3, [r5, #0]
   db6a2:	462c      	mov	r4, r5
   db6a4:	4689      	mov	r9, r1
   db6a6:	f04f 0800 	mov.w	r8, #0
   db6aa:	f8b9 e000 	ldrh.w	lr, [r9]
   db6ae:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db6b2:	fb0a be0e 	mla	lr, sl, lr, fp
   db6b6:	44f0      	add	r8, lr
   db6b8:	46a3      	mov	fp, r4
   db6ba:	b29b      	uxth	r3, r3
   db6bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db6c0:	f84b 3b04 	str.w	r3, [fp], #4
   db6c4:	f859 3b04 	ldr.w	r3, [r9], #4
   db6c8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db6cc:	0c1b      	lsrs	r3, r3, #16
   db6ce:	fb0a e303 	mla	r3, sl, r3, lr
   db6d2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db6d6:	454f      	cmp	r7, r9
   db6d8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db6dc:	d901      	bls.n	db6e2 <__multiply+0x108>
   db6de:	465c      	mov	r4, fp
   db6e0:	e7e3      	b.n	db6aa <__multiply+0xd0>
   db6e2:	6063      	str	r3, [r4, #4]
   db6e4:	3504      	adds	r5, #4
   db6e6:	e7a7      	b.n	db638 <__multiply+0x5e>
   db6e8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db6ec:	b913      	cbnz	r3, db6f4 <__multiply+0x11a>
   db6ee:	3e01      	subs	r6, #1
   db6f0:	2e00      	cmp	r6, #0
   db6f2:	dcf9      	bgt.n	db6e8 <__multiply+0x10e>
   db6f4:	6106      	str	r6, [r0, #16]
   db6f6:	b003      	add	sp, #12
   db6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db6fc <__pow5mult>:
   db6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db700:	4615      	mov	r5, r2
   db702:	f012 0203 	ands.w	r2, r2, #3
   db706:	4606      	mov	r6, r0
   db708:	460f      	mov	r7, r1
   db70a:	d007      	beq.n	db71c <__pow5mult+0x20>
   db70c:	3a01      	subs	r2, #1
   db70e:	4c21      	ldr	r4, [pc, #132]	; (db794 <__pow5mult+0x98>)
   db710:	2300      	movs	r3, #0
   db712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db716:	f7ff fe91 	bl	db43c <__multadd>
   db71a:	4607      	mov	r7, r0
   db71c:	10ad      	asrs	r5, r5, #2
   db71e:	d036      	beq.n	db78e <__pow5mult+0x92>
   db720:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db722:	b93c      	cbnz	r4, db734 <__pow5mult+0x38>
   db724:	2010      	movs	r0, #16
   db726:	f7fb f8ef 	bl	d6908 <malloc>
   db72a:	6270      	str	r0, [r6, #36]	; 0x24
   db72c:	6044      	str	r4, [r0, #4]
   db72e:	6084      	str	r4, [r0, #8]
   db730:	6004      	str	r4, [r0, #0]
   db732:	60c4      	str	r4, [r0, #12]
   db734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db738:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db73c:	b94c      	cbnz	r4, db752 <__pow5mult+0x56>
   db73e:	f240 2171 	movw	r1, #625	; 0x271
   db742:	4630      	mov	r0, r6
   db744:	f7ff ff40 	bl	db5c8 <__i2b>
   db748:	2300      	movs	r3, #0
   db74a:	f8c8 0008 	str.w	r0, [r8, #8]
   db74e:	4604      	mov	r4, r0
   db750:	6003      	str	r3, [r0, #0]
   db752:	f04f 0800 	mov.w	r8, #0
   db756:	07eb      	lsls	r3, r5, #31
   db758:	d50a      	bpl.n	db770 <__pow5mult+0x74>
   db75a:	4639      	mov	r1, r7
   db75c:	4622      	mov	r2, r4
   db75e:	4630      	mov	r0, r6
   db760:	f7ff ff3b 	bl	db5da <__multiply>
   db764:	4639      	mov	r1, r7
   db766:	4681      	mov	r9, r0
   db768:	4630      	mov	r0, r6
   db76a:	f7ff fe50 	bl	db40e <_Bfree>
   db76e:	464f      	mov	r7, r9
   db770:	106d      	asrs	r5, r5, #1
   db772:	d00c      	beq.n	db78e <__pow5mult+0x92>
   db774:	6820      	ldr	r0, [r4, #0]
   db776:	b108      	cbz	r0, db77c <__pow5mult+0x80>
   db778:	4604      	mov	r4, r0
   db77a:	e7ec      	b.n	db756 <__pow5mult+0x5a>
   db77c:	4622      	mov	r2, r4
   db77e:	4621      	mov	r1, r4
   db780:	4630      	mov	r0, r6
   db782:	f7ff ff2a 	bl	db5da <__multiply>
   db786:	6020      	str	r0, [r4, #0]
   db788:	f8c0 8000 	str.w	r8, [r0]
   db78c:	e7f4      	b.n	db778 <__pow5mult+0x7c>
   db78e:	4638      	mov	r0, r7
   db790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db794:	000dcb58 	.word	0x000dcb58

000db798 <__lshift>:
   db798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db79c:	460c      	mov	r4, r1
   db79e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db7a2:	6926      	ldr	r6, [r4, #16]
   db7a4:	6849      	ldr	r1, [r1, #4]
   db7a6:	68a3      	ldr	r3, [r4, #8]
   db7a8:	4456      	add	r6, sl
   db7aa:	4607      	mov	r7, r0
   db7ac:	4691      	mov	r9, r2
   db7ae:	1c75      	adds	r5, r6, #1
   db7b0:	42ab      	cmp	r3, r5
   db7b2:	da02      	bge.n	db7ba <__lshift+0x22>
   db7b4:	3101      	adds	r1, #1
   db7b6:	005b      	lsls	r3, r3, #1
   db7b8:	e7fa      	b.n	db7b0 <__lshift+0x18>
   db7ba:	4638      	mov	r0, r7
   db7bc:	f7ff fdf2 	bl	db3a4 <_Balloc>
   db7c0:	2300      	movs	r3, #0
   db7c2:	4680      	mov	r8, r0
   db7c4:	f100 0114 	add.w	r1, r0, #20
   db7c8:	461a      	mov	r2, r3
   db7ca:	4553      	cmp	r3, sl
   db7cc:	da03      	bge.n	db7d6 <__lshift+0x3e>
   db7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db7d2:	3301      	adds	r3, #1
   db7d4:	e7f9      	b.n	db7ca <__lshift+0x32>
   db7d6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db7da:	6920      	ldr	r0, [r4, #16]
   db7dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db7e0:	f019 091f 	ands.w	r9, r9, #31
   db7e4:	f104 0114 	add.w	r1, r4, #20
   db7e8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db7ec:	d014      	beq.n	db818 <__lshift+0x80>
   db7ee:	f1c9 0c20 	rsb	ip, r9, #32
   db7f2:	2200      	movs	r2, #0
   db7f4:	6808      	ldr	r0, [r1, #0]
   db7f6:	fa00 f009 	lsl.w	r0, r0, r9
   db7fa:	4302      	orrs	r2, r0
   db7fc:	469a      	mov	sl, r3
   db7fe:	f843 2b04 	str.w	r2, [r3], #4
   db802:	f851 2b04 	ldr.w	r2, [r1], #4
   db806:	458e      	cmp	lr, r1
   db808:	fa22 f20c 	lsr.w	r2, r2, ip
   db80c:	d8f2      	bhi.n	db7f4 <__lshift+0x5c>
   db80e:	f8ca 2004 	str.w	r2, [sl, #4]
   db812:	b142      	cbz	r2, db826 <__lshift+0x8e>
   db814:	1cb5      	adds	r5, r6, #2
   db816:	e006      	b.n	db826 <__lshift+0x8e>
   db818:	3b04      	subs	r3, #4
   db81a:	f851 2b04 	ldr.w	r2, [r1], #4
   db81e:	f843 2f04 	str.w	r2, [r3, #4]!
   db822:	458e      	cmp	lr, r1
   db824:	d8f9      	bhi.n	db81a <__lshift+0x82>
   db826:	3d01      	subs	r5, #1
   db828:	4638      	mov	r0, r7
   db82a:	f8c8 5010 	str.w	r5, [r8, #16]
   db82e:	4621      	mov	r1, r4
   db830:	f7ff fded 	bl	db40e <_Bfree>
   db834:	4640      	mov	r0, r8
   db836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db83a <__mcmp>:
   db83a:	6903      	ldr	r3, [r0, #16]
   db83c:	690a      	ldr	r2, [r1, #16]
   db83e:	1a9b      	subs	r3, r3, r2
   db840:	b510      	push	{r4, lr}
   db842:	d111      	bne.n	db868 <__mcmp+0x2e>
   db844:	0092      	lsls	r2, r2, #2
   db846:	3014      	adds	r0, #20
   db848:	3114      	adds	r1, #20
   db84a:	1883      	adds	r3, r0, r2
   db84c:	440a      	add	r2, r1
   db84e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db852:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db856:	428c      	cmp	r4, r1
   db858:	d002      	beq.n	db860 <__mcmp+0x26>
   db85a:	d307      	bcc.n	db86c <__mcmp+0x32>
   db85c:	2001      	movs	r0, #1
   db85e:	bd10      	pop	{r4, pc}
   db860:	4298      	cmp	r0, r3
   db862:	d3f4      	bcc.n	db84e <__mcmp+0x14>
   db864:	2000      	movs	r0, #0
   db866:	bd10      	pop	{r4, pc}
   db868:	4618      	mov	r0, r3
   db86a:	bd10      	pop	{r4, pc}
   db86c:	f04f 30ff 	mov.w	r0, #4294967295
   db870:	bd10      	pop	{r4, pc}

000db872 <__mdiff>:
   db872:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db876:	460c      	mov	r4, r1
   db878:	4607      	mov	r7, r0
   db87a:	4611      	mov	r1, r2
   db87c:	4620      	mov	r0, r4
   db87e:	4615      	mov	r5, r2
   db880:	f7ff ffdb 	bl	db83a <__mcmp>
   db884:	1e06      	subs	r6, r0, #0
   db886:	d108      	bne.n	db89a <__mdiff+0x28>
   db888:	4631      	mov	r1, r6
   db88a:	4638      	mov	r0, r7
   db88c:	f7ff fd8a 	bl	db3a4 <_Balloc>
   db890:	2301      	movs	r3, #1
   db892:	6103      	str	r3, [r0, #16]
   db894:	6146      	str	r6, [r0, #20]
   db896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db89a:	bfbc      	itt	lt
   db89c:	4623      	movlt	r3, r4
   db89e:	462c      	movlt	r4, r5
   db8a0:	4638      	mov	r0, r7
   db8a2:	6861      	ldr	r1, [r4, #4]
   db8a4:	bfba      	itte	lt
   db8a6:	461d      	movlt	r5, r3
   db8a8:	2601      	movlt	r6, #1
   db8aa:	2600      	movge	r6, #0
   db8ac:	f7ff fd7a 	bl	db3a4 <_Balloc>
   db8b0:	692b      	ldr	r3, [r5, #16]
   db8b2:	60c6      	str	r6, [r0, #12]
   db8b4:	6926      	ldr	r6, [r4, #16]
   db8b6:	f105 0914 	add.w	r9, r5, #20
   db8ba:	3414      	adds	r4, #20
   db8bc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db8c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db8c4:	f100 0514 	add.w	r5, r0, #20
   db8c8:	f04f 0c00 	mov.w	ip, #0
   db8cc:	f854 3b04 	ldr.w	r3, [r4], #4
   db8d0:	f859 2b04 	ldr.w	r2, [r9], #4
   db8d4:	fa1c f183 	uxtah	r1, ip, r3
   db8d8:	fa1f fe82 	uxth.w	lr, r2
   db8dc:	0c12      	lsrs	r2, r2, #16
   db8de:	ebce 0101 	rsb	r1, lr, r1
   db8e2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db8e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db8ea:	b289      	uxth	r1, r1
   db8ec:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db8f0:	45c8      	cmp	r8, r9
   db8f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db8f6:	46a6      	mov	lr, r4
   db8f8:	f845 3b04 	str.w	r3, [r5], #4
   db8fc:	d8e6      	bhi.n	db8cc <__mdiff+0x5a>
   db8fe:	45be      	cmp	lr, r7
   db900:	d20e      	bcs.n	db920 <__mdiff+0xae>
   db902:	f85e 1b04 	ldr.w	r1, [lr], #4
   db906:	fa1c f281 	uxtah	r2, ip, r1
   db90a:	1413      	asrs	r3, r2, #16
   db90c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db910:	b292      	uxth	r2, r2
   db912:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db916:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db91a:	f845 2b04 	str.w	r2, [r5], #4
   db91e:	e7ee      	b.n	db8fe <__mdiff+0x8c>
   db920:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db924:	b90b      	cbnz	r3, db92a <__mdiff+0xb8>
   db926:	3e01      	subs	r6, #1
   db928:	e7fa      	b.n	db920 <__mdiff+0xae>
   db92a:	6106      	str	r6, [r0, #16]
   db92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db930 <__ulp>:
   db930:	4b12      	ldr	r3, [pc, #72]	; (db97c <__ulp+0x4c>)
   db932:	ee10 2a90 	vmov	r2, s1
   db936:	401a      	ands	r2, r3
   db938:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db93c:	2b00      	cmp	r3, #0
   db93e:	dd02      	ble.n	db946 <__ulp+0x16>
   db940:	2000      	movs	r0, #0
   db942:	4619      	mov	r1, r3
   db944:	e017      	b.n	db976 <__ulp+0x46>
   db946:	425b      	negs	r3, r3
   db948:	151b      	asrs	r3, r3, #20
   db94a:	2b13      	cmp	r3, #19
   db94c:	f04f 0000 	mov.w	r0, #0
   db950:	f04f 0100 	mov.w	r1, #0
   db954:	dc04      	bgt.n	db960 <__ulp+0x30>
   db956:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db95a:	fa42 f103 	asr.w	r1, r2, r3
   db95e:	e00a      	b.n	db976 <__ulp+0x46>
   db960:	3b14      	subs	r3, #20
   db962:	2b1e      	cmp	r3, #30
   db964:	f04f 0201 	mov.w	r2, #1
   db968:	bfda      	itte	le
   db96a:	f1c3 031f 	rsble	r3, r3, #31
   db96e:	fa02 f303 	lslle.w	r3, r2, r3
   db972:	4613      	movgt	r3, r2
   db974:	4618      	mov	r0, r3
   db976:	ec41 0b10 	vmov	d0, r0, r1
   db97a:	4770      	bx	lr
   db97c:	7ff00000 	.word	0x7ff00000

000db980 <__b2d>:
   db980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db982:	6905      	ldr	r5, [r0, #16]
   db984:	f100 0614 	add.w	r6, r0, #20
   db988:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db98c:	1f2f      	subs	r7, r5, #4
   db98e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db992:	4620      	mov	r0, r4
   db994:	f7ff fdcb 	bl	db52e <__hi0bits>
   db998:	f1c0 0320 	rsb	r3, r0, #32
   db99c:	280a      	cmp	r0, #10
   db99e:	600b      	str	r3, [r1, #0]
   db9a0:	dc14      	bgt.n	db9cc <__b2d+0x4c>
   db9a2:	f1c0 0e0b 	rsb	lr, r0, #11
   db9a6:	fa24 f10e 	lsr.w	r1, r4, lr
   db9aa:	42be      	cmp	r6, r7
   db9ac:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db9b0:	bf34      	ite	cc
   db9b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db9b6:	2100      	movcs	r1, #0
   db9b8:	3015      	adds	r0, #21
   db9ba:	fa04 f000 	lsl.w	r0, r4, r0
   db9be:	fa21 f10e 	lsr.w	r1, r1, lr
   db9c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db9c6:	ea40 0201 	orr.w	r2, r0, r1
   db9ca:	e023      	b.n	dba14 <__b2d+0x94>
   db9cc:	42be      	cmp	r6, r7
   db9ce:	bf3a      	itte	cc
   db9d0:	f1a5 0708 	subcc.w	r7, r5, #8
   db9d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db9d8:	2100      	movcs	r1, #0
   db9da:	380b      	subs	r0, #11
   db9dc:	d015      	beq.n	dba0a <__b2d+0x8a>
   db9de:	4084      	lsls	r4, r0
   db9e0:	f1c0 0520 	rsb	r5, r0, #32
   db9e4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db9e8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db9ec:	42b7      	cmp	r7, r6
   db9ee:	fa21 fe05 	lsr.w	lr, r1, r5
   db9f2:	ea44 030e 	orr.w	r3, r4, lr
   db9f6:	bf8c      	ite	hi
   db9f8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db9fc:	2400      	movls	r4, #0
   db9fe:	fa01 f000 	lsl.w	r0, r1, r0
   dba02:	40ec      	lsrs	r4, r5
   dba04:	ea40 0204 	orr.w	r2, r0, r4
   dba08:	e004      	b.n	dba14 <__b2d+0x94>
   dba0a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dba0e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dba12:	460a      	mov	r2, r1
   dba14:	ec43 2b10 	vmov	d0, r2, r3
   dba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dba1a <__d2b>:
   dba1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dba1e:	460e      	mov	r6, r1
   dba20:	2101      	movs	r1, #1
   dba22:	ec59 8b10 	vmov	r8, r9, d0
   dba26:	4615      	mov	r5, r2
   dba28:	f7ff fcbc 	bl	db3a4 <_Balloc>
   dba2c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dba30:	4607      	mov	r7, r0
   dba32:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dba36:	b10c      	cbz	r4, dba3c <__d2b+0x22>
   dba38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dba3c:	9301      	str	r3, [sp, #4]
   dba3e:	f1b8 0f00 	cmp.w	r8, #0
   dba42:	d019      	beq.n	dba78 <__d2b+0x5e>
   dba44:	a802      	add	r0, sp, #8
   dba46:	f840 8d08 	str.w	r8, [r0, #-8]!
   dba4a:	f7ff fd90 	bl	db56e <__lo0bits>
   dba4e:	9b00      	ldr	r3, [sp, #0]
   dba50:	b148      	cbz	r0, dba66 <__d2b+0x4c>
   dba52:	9a01      	ldr	r2, [sp, #4]
   dba54:	f1c0 0120 	rsb	r1, r0, #32
   dba58:	fa02 f101 	lsl.w	r1, r2, r1
   dba5c:	430b      	orrs	r3, r1
   dba5e:	40c2      	lsrs	r2, r0
   dba60:	617b      	str	r3, [r7, #20]
   dba62:	9201      	str	r2, [sp, #4]
   dba64:	e000      	b.n	dba68 <__d2b+0x4e>
   dba66:	617b      	str	r3, [r7, #20]
   dba68:	9b01      	ldr	r3, [sp, #4]
   dba6a:	61bb      	str	r3, [r7, #24]
   dba6c:	2b00      	cmp	r3, #0
   dba6e:	bf14      	ite	ne
   dba70:	2102      	movne	r1, #2
   dba72:	2101      	moveq	r1, #1
   dba74:	6139      	str	r1, [r7, #16]
   dba76:	e007      	b.n	dba88 <__d2b+0x6e>
   dba78:	a801      	add	r0, sp, #4
   dba7a:	f7ff fd78 	bl	db56e <__lo0bits>
   dba7e:	9b01      	ldr	r3, [sp, #4]
   dba80:	617b      	str	r3, [r7, #20]
   dba82:	2101      	movs	r1, #1
   dba84:	6139      	str	r1, [r7, #16]
   dba86:	3020      	adds	r0, #32
   dba88:	b134      	cbz	r4, dba98 <__d2b+0x7e>
   dba8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dba8e:	4404      	add	r4, r0
   dba90:	6034      	str	r4, [r6, #0]
   dba92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dba96:	e009      	b.n	dbaac <__d2b+0x92>
   dba98:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dba9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dbaa0:	6030      	str	r0, [r6, #0]
   dbaa2:	6918      	ldr	r0, [r3, #16]
   dbaa4:	f7ff fd43 	bl	db52e <__hi0bits>
   dbaa8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dbaac:	6028      	str	r0, [r5, #0]
   dbaae:	4638      	mov	r0, r7
   dbab0:	b003      	add	sp, #12
   dbab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbab6 <__ratio>:
   dbab6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dbaba:	4688      	mov	r8, r1
   dbabc:	4669      	mov	r1, sp
   dbabe:	4681      	mov	r9, r0
   dbac0:	f7ff ff5e 	bl	db980 <__b2d>
   dbac4:	a901      	add	r1, sp, #4
   dbac6:	4640      	mov	r0, r8
   dbac8:	ec55 4b10 	vmov	r4, r5, d0
   dbacc:	f7ff ff58 	bl	db980 <__b2d>
   dbad0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dbad4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dbad8:	1a9a      	subs	r2, r3, r2
   dbada:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dbade:	1ac9      	subs	r1, r1, r3
   dbae0:	ec57 6b10 	vmov	r6, r7, d0
   dbae4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dbae8:	2b00      	cmp	r3, #0
   dbaea:	bfcc      	ite	gt
   dbaec:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dbaf0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dbaf4:	4632      	mov	r2, r6
   dbaf6:	463b      	mov	r3, r7
   dbaf8:	4620      	mov	r0, r4
   dbafa:	4629      	mov	r1, r5
   dbafc:	f7fd fb9e 	bl	d923c <__aeabi_ddiv>
   dbb00:	ec41 0b10 	vmov	d0, r0, r1
   dbb04:	b003      	add	sp, #12
   dbb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbb0a <__copybits>:
   dbb0a:	3901      	subs	r1, #1
   dbb0c:	b510      	push	{r4, lr}
   dbb0e:	1149      	asrs	r1, r1, #5
   dbb10:	6914      	ldr	r4, [r2, #16]
   dbb12:	3101      	adds	r1, #1
   dbb14:	f102 0314 	add.w	r3, r2, #20
   dbb18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dbb1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dbb20:	42a3      	cmp	r3, r4
   dbb22:	4602      	mov	r2, r0
   dbb24:	d204      	bcs.n	dbb30 <__copybits+0x26>
   dbb26:	f853 2b04 	ldr.w	r2, [r3], #4
   dbb2a:	f840 2b04 	str.w	r2, [r0], #4
   dbb2e:	e7f7      	b.n	dbb20 <__copybits+0x16>
   dbb30:	2300      	movs	r3, #0
   dbb32:	428a      	cmp	r2, r1
   dbb34:	d202      	bcs.n	dbb3c <__copybits+0x32>
   dbb36:	f842 3b04 	str.w	r3, [r2], #4
   dbb3a:	e7fa      	b.n	dbb32 <__copybits+0x28>
   dbb3c:	bd10      	pop	{r4, pc}

000dbb3e <__any_on>:
   dbb3e:	f100 0214 	add.w	r2, r0, #20
   dbb42:	6900      	ldr	r0, [r0, #16]
   dbb44:	114b      	asrs	r3, r1, #5
   dbb46:	4298      	cmp	r0, r3
   dbb48:	b510      	push	{r4, lr}
   dbb4a:	db0c      	blt.n	dbb66 <__any_on+0x28>
   dbb4c:	dd0c      	ble.n	dbb68 <__any_on+0x2a>
   dbb4e:	f011 011f 	ands.w	r1, r1, #31
   dbb52:	d009      	beq.n	dbb68 <__any_on+0x2a>
   dbb54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dbb58:	fa24 f001 	lsr.w	r0, r4, r1
   dbb5c:	fa00 f101 	lsl.w	r1, r0, r1
   dbb60:	428c      	cmp	r4, r1
   dbb62:	d10c      	bne.n	dbb7e <__any_on+0x40>
   dbb64:	e000      	b.n	dbb68 <__any_on+0x2a>
   dbb66:	4603      	mov	r3, r0
   dbb68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbb6c:	4293      	cmp	r3, r2
   dbb6e:	d904      	bls.n	dbb7a <__any_on+0x3c>
   dbb70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dbb74:	2900      	cmp	r1, #0
   dbb76:	d0f9      	beq.n	dbb6c <__any_on+0x2e>
   dbb78:	e001      	b.n	dbb7e <__any_on+0x40>
   dbb7a:	2000      	movs	r0, #0
   dbb7c:	bd10      	pop	{r4, pc}
   dbb7e:	2001      	movs	r0, #1
   dbb80:	bd10      	pop	{r4, pc}

000dbb82 <_calloc_r>:
   dbb82:	b538      	push	{r3, r4, r5, lr}
   dbb84:	fb02 f401 	mul.w	r4, r2, r1
   dbb88:	4621      	mov	r1, r4
   dbb8a:	f7fa feed 	bl	d6968 <_malloc_r>
   dbb8e:	4605      	mov	r5, r0
   dbb90:	b118      	cbz	r0, dbb9a <_calloc_r+0x18>
   dbb92:	4622      	mov	r2, r4
   dbb94:	2100      	movs	r1, #0
   dbb96:	f7fd fe72 	bl	d987e <memset>
   dbb9a:	4628      	mov	r0, r5
   dbb9c:	bd38      	pop	{r3, r4, r5, pc}

000dbb9e <__env_lock>:
   dbb9e:	4770      	bx	lr

000dbba0 <__env_unlock>:
   dbba0:	4770      	bx	lr

000dbba2 <link_code_end>:
	...

000dbba4 <dynalib_user>:
   dbba4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dbbb4:	0000 0000 6572 6563 7669 6465 6920 206e     ....received in 
   dbbc4:	7573 7370 7263 6269 2f65 7570 6c62 7369     supscribe/publis
   dbbd4:	2068 6572 7571 7365 2574 3a73 2520 0073     h request%s: %s.
   dbbe4:	6176 6972 6261 656c 6c20 6261 6c65 2020     variable label  
   dbbf4:	6874 7461 6920 2073 6f63 6970 6465 6620     that is copied f
   dbc04:	6f72 206d 6564 5f76 616e 656d 3a20 2520     rom dev_name : %
   dbc14:	0073 6170 7472 6369 656c 642f 7665 6369     s.particle/devic
   dbc24:	2f65 616e 656d 7300 7568 7474 7265 6f48     e/name.shutterHo
   dbc34:	7275 704f 6e65 7300 7568 7474 7265 694d     urOpen.shutterMi
   dbc44:	756e 6574 704f 6e65 7300 7568 7474 7265     nuteOpen.shutter
   dbc54:	6f48 7275 6c43 736f 0065 6873 7475 6574     HourClose.shutte
   dbc64:	4d72 6e69 7475 4365 6f6c 6573 7300 7568     rMinuteClose.shu
   dbc74:	7474 7265 4f20 4550 204e 2e25 3a66 2e25     tter OPEN %.f:%.
   dbc84:	2066 4c43 534f 2045 2e25 3a66 2e25 0a66     f CLOSE %.f:%.f.
   dbc94:	7400 6d69 7265 6577 6862 6f6f 006b 6156     .timerwebhook.Va
   dbca4:	756c 7365 7320 6e65 2074 7962 7420 6568     lues sent by the
   dbcb4:	6420 7665 6369 0065 6c41 7261 3a6d 2d20      device.Alarm: -
   dbcc4:	4f20 4550 204e 4853 5455 4554 0052 6c41      OPEN SHUTTER.Al
   dbcd4:	7261 3a6d 2d20 4320 4f4c 4553 7320 7568     arm: - CLOSE shu
   dbce4:	7474 7265 000a 202c 6164 6174 203a 2500     tter.., data: .%
   dbcf4:	0a66 4e00 4c55 004c 6873 7475 6574 2072     f..NULL.shutter 
   dbd04:	6f63 746e 6c72 206c 6625 0a20 4200 4642     contrll %f ..BBF
   dbd14:	2d46 5a65 6d4e 354b 6441 7556 5373 7658     F-eZNmK5AdVusSXv
   dbd24:	5661 4b78 6c59 6b78 3174 314e 654f 6664     aVxKYlxkt1N1Oedf
   dbd34:	4100 7474 6d65 7470 6e69 2067 6f74 7220     .Attempting to r
   dbd44:	6365 6e6f 656e 7463 5400 7972 6e69 2067     econnect.Trying 
   dbd54:	6f74 6320 6e6f 656e 7463 7420 206f 2000     to connect to . 
   dbd64:	202c 7461 6574 706d 2074 756e 626d 7265     , attempt number
   dbd74:	203a 7400 6d69 6f65 7475 202c 6f63 6c75     : .timeout, coul
   dbd84:	2064 6f6e 2074 6572 6461 6120 796e 7220     d not read any r
   dbd94:	7365 6f70 736e 2065 7266 6d6f 7420 6568     esponse from the
   dbda4:	6820 736f 0074 6553 7672 7265 7327 7220      host.Server's r
   dbdb4:	7365 6f70 736e 3a65 0a00 2d2d 2d2d 2d2d     esponse:..------
   dbdc4:	2d2d 2d2d 5000 534f 0054 4b4f 7c00 564c     ----.POST.OK.|LV
   dbdd4:	007c 6150 6c79 616f 2064 6f66 2072 6572     |.Payload for re
   dbde4:	7571 7365 3a74 0a00 2d2d 2d2d 4c00 0056     quest:..----.LV.
   dbdf4:	5245 4f52 2052 6f63 6c75 2064 6f6e 2074     ERROR could not 
   dbe04:	6f63 6e6e 6365 2074 6f74 7420 6568 7320     connect to the s
   dbe14:	7265 6576 0072 6f43 6c75 2064 6f6e 2074     erver.Could not 
   dbe24:	6f63 6e6e 6365 2074 6f74 7420 6568 6820     connect to the h
   dbe34:	736f 0074                                   ost.

000dbe38 <_ZTV6UbiTCP>:
	...
   dbe40:	4e25 000d 4cc1 000d 4b01 000d 6f59 2075     %N...L...K..You 
   dbe50:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
   dbe60:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
   dbe70:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
   dbe80:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
   dbe90:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
   dbea0:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
   dbeb0:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
   dbec0:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
   dbed0:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   dbee0:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   dbef0:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   dbf00:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   dbf10:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   dbf20:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
   dbf30:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
   dbf40:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
   dbf50:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
   dbf60:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
   dbf70:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
   dbf80:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
   dbf90:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
   dbfa0:	474e 205d 6854 2065 654d 6873 5020 6f72     NG] The Mesh Pro
   dbfb0:	6f74 6f63 206c 7369 6e20 746f 7320 7075     tocol is not sup
   dbfc0:	6f70 7472 6465 6920 206e 6874 7369 6420     ported in this d
   dbfd0:	7665 6369 2065 6f66 2072 6573 646e 6e69     evice for sendin
   dbfe0:	2067 6164 6174 5b00 6157 6e72 6e69 5d67     g data.[Warning]
   dbff0:	5420 206f 6572 7274 6569 6576 6420 7461      To retrieve dat
   dc000:	2c61 7020 656c 7361 2065 6573 2074 2061     a, please set a 
   dc010:	6176 696c 2064 6c63 756f 2064 7270 746f     valid cloud prot
   dc020:	636f 6c6f 6920 206e 6874 2065 6255 6469     ocol in the Ubid
   dc030:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
   dc040:	6f59 2075 7261 2065 6461 6964 676e 6d20     You are adding m
   dc050:	726f 2065 6874 6e61 7420 6568 6d20 7861     ore than the max
   dc060:	6d69 6d75 6f20 2066 6f63 736e 6365 7475     imum of consecut
   dc070:	7669 2065 656b 2d79 6176 756c 7365 7020     ive key-values p
   dc080:	6961 7372 2500 2573 3d73 7325 2500 2473     airs.%s%s=%s.%s$
   dc090:	2500 2273 7325 3a22 2522 2273 0000 0000     .%s"%s":"%s"....

000dc0a0 <_ZTV7UbiHTTP>:
	...
   dc0a8:	582d 000d 5a7d 000d 5601 000d 7441 6574     -X..}Z...V..Atte
   dc0b8:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
   dc0c8:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   dc0d8:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
   dc0e8:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
   dc0f8:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
   dc108:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
   dc118:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
   dc128:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
   dc138:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
   dc148:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
   dc158:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
   dc168:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
   dc178:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
   dc188:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
   dc198:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
   dc1a8:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
   dc1b8:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
   dc1c8:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
   dc1d8:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   dc1e8:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
   dc1f8:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
   dc208:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
   dc218:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
   dc228:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

000dc236 <_ZStL19piecewise_construct>:
   dc236:	5b00 4157 4e52 4e49 5d47 5920 756f 2072     .[WARNING] Your 
   dc246:	654d 6873 6320 6e6f 6574 7478 6c20 6e65     Mesh context len
   dc256:	7467 2068 756d 7473 6220 2065 6f6c 6577     gth must be lowe
   dc266:	2072 6874 6e61 3120 3030 2500 7c73 6625     r than 100.%s|%f
   dc276:	257c 7c73 7325 257c 0073 2041 7270 626f     |%s|%s|%s.A prob
   dc286:	656c 206d 6168 2073 6172 7369 6465 7720     lem has raised w
   dc296:	7469 2068 6874 2065 6564 6976 6563 7420     ith the device t
   dc2a6:	7972 6e69 2067 6f74 6f20 6570 206e 2061     rying to open a 
   dc2b6:	654d 6873 6f73 6b63 7465 5900 756f 6820     Meshsocket.You h
   dc2c6:	7661 2065 6f6e 2074 6461 6564 2064 6e61     ave not added an
   dc2d6:	2079 6176 6972 6261 656c 7620 6c61 6575     y variable value
   dc2e6:	202c 6c70 6165 6573 6320 6c61 206c 6874     , please call th
   dc2f6:	2065 6461 2864 6d29 7465 6f68 2064 6966     e add()method fi
   dc306:	7372 0074 6275 6469 746f 2d73 656d 6873     rst.ubidots-mesh
   dc316:	5b00 4157 4e52 4e49 5d47 7920 756f 2072     .[WARNING] your 
   dc326:	6173 706d 656c 7420 6d69 2065 6572 6361     sample time reac
   dc336:	6568 2064 6874 2065 6874 6f72 7474 696c     hed the throttli
   dc346:	676e 6f20 2066 3032 7320 202c 6c70 6165     ng of 20 s, plea
   dc356:	6573 7320 7465 6120 6820 6769 6568 2072     se set a higher 
   dc366:	6173 706d 656c 7420 6d69 2065 726f 7520     sample time or u
   dc376:	6573 5520 5044 6f20 2072 6150 7472 6369     se UDP or Partic
   dc386:	656c 5720 6265 6f68 6b6f 2073 6f74 7320     le Webhooks to s
   dc396:	6e65 2064 6164 6174 5b00 6157 6e72 6e69     end data.[Warnin
   dc3a6:	5d67 4320 756f 646c 6e20 746f 7320 6c6f     g] Could not sol
   dc3b6:	6576 4920 2050 6441 7264 7365 2073 666f     ve IP Address of
   dc3c6:	7420 6568 7220 6d65 746f 2065 6f68 7473      the remote host
   dc3d6:	202c 6977 6874 7920 756f 2072 4e44 2053     , with your DNS 
   dc3e6:	6573 7574 2e70 2020 2020 2020 2020 2020     setup.          
   dc3f6:	0a20 7355 6e69 2067 6564 6166 6c75 2074      .Using default 
   dc406:	6e49 7564 7473 6972 6c61 5520 6962 6f64     Industrial Ubido
   dc416:	7374 4920 3a50 3120 3936 352e 2e35 3136     ts IP: 169.55.61
   dc426:	322e 3334 4500 5252 524f 7320 6e65 6964     .243.ERROR sendi
   dc436:	676e 7620 6c61 6575 2073 6977 6874 5520     ng values with U
   dc446:	5044 0000 0000                              DP....

000dc44c <_ZTV6UbiUDP>:
	...
   dc454:	6269 000d 61fd 000d 6209 000d               ib...a...b..

000dc460 <_ZTV11UbiParticle>:
	...
   dc468:	6397 000d 6331 000d 633d 000d               .c..1c..=c..

000dc474 <_ZTVN5spark13EthernetClassE>:
	...
   dc47c:	69e7 000d 69dd 000d 69d3 000d 69c9 000d     .i...i...i...i..
   dc48c:	69bd 000d 69b1 000d 69a5 000d 699d 000d     .i...i...i...i..
   dc49c:	6993 000d 6989 000d 85f5 000d               .i...i......

000dc4a8 <_ZTV8SPIClass>:
	...
   dc4b0:	6a05 000d 6a07 000d                         .j...j..

000dc4b8 <_ZTV3UDP>:
	...
   dc4c0:	5d69 000d 5df1 000d 6aa9 000d 6bd3 000d     i]...]...j...k..
   dc4d0:	6aa1 000d 6abf 000d 6add 000d 6af7 000d     .j...j...j...j..
   dc4e0:	6b1b 000d 6bb7 000d 6eb9 000d 6c59 000d     .k...k...n..Yl..
   dc4f0:	6dd9 000d 6a89 000d 6f99 000d 6d5d 000d     .m...j...o..]m..
   dc500:	6c91 000d 6fc7 000d 6bfd 000d 6a97 000d     .l...o...k...j..
   dc510:	6c39 000d 6a9d 000d 6af9 000d fff0 ffff     9l...j...j......
   dc520:	0000 0000 6b13 000d 6162 6475 5300 7265     .....k..baud.Ser
   dc530:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   dc540:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   dc550:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   dc560:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   dc570:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   dc580:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   dc590:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dc5a0:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dc5b0:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   dc5c0:	7465 6961 736c 3d20 0020 6e6c 6600 006e     etails = .ln.fn.
   dc5d0:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dc5e0:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dc5f0:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   dc600:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   dc610:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   dc620:	7361 7463 6d69 0065                         asctime.

000dc628 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc630:	7495 000d 749b 000d 74df 000d 74a9 000d     .t...t...t...t..
   dc640:	7497 000d                                   .t..

000dc644 <_ZTV9IPAddress>:
	...
   dc64c:	7a2d 000d 7a1d 000d 7a1f 000d               -z...z...z..

000dc658 <_ZTV9USBSerial>:
	...
   dc660:	7b4b 000d 7b9b 000d 7ba9 000d 7091 000d     K{...{...{...p..
   dc670:	7b87 000d 7b4d 000d 7b63 000d 7b95 000d     .{..M{..c{...{..
   dc680:	7b79 000d 7b47 000d                         y{..G{..

000dc688 <_ZTV11USARTSerial>:
	...
   dc690:	7c59 000d 7ca9 000d 7cb7 000d 7091 000d     Y|...|...|...p..
   dc6a0:	7c6d 000d 7c8f 000d 7c7b 000d 7ca3 000d     m|...|..{|...|..
   dc6b0:	7c5b 000d 7c5f 000d                         [|.._|..

000dc6b8 <_ZTV7TwoWire>:
	...
   dc6c0:	7d85 000d 7dcf 000d 7da7 000d 7d87 000d     .}...}...}...}..
   dc6d0:	7daf 000d 7db7 000d 7dbf 000d 7dc7 000d     .}...}...}...}..

000dc6e0 <_ZTVN5spark9MeshClassE>:
	...
   dc6e8:	7e5d 000d 7e53 000d 7e49 000d 60e9 000d     ]~..S~..I~...`..
   dc6f8:	7e3d 000d 7e31 000d 7e25 000d 7e1d 000d     =~..1~..%~...~..
   dc708:	7e13 000d 7e09 000d 85f5 000d               .~...~......

000dc714 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc71c:	8001 000d 8007 000d 84f7 000d 8015 000d     ................
   dc72c:	8003 000d                                   ....

000dc730 <_ZTV9TCPClient>:
	...
   dc738:	4135 000d 4161 000d 7f79 000d 7f93 000d     5A..aA..y.......
   dc748:	8395 000d 80e7 000d 80b9 000d 7fbd 000d     ................
   dc758:	8271 000d 816d 000d 811b 000d 8365 000d     q...m.......e...
   dc768:	7fbf 000d 7ff7 000d 7fa5 000d 8019 000d     ................
   dc778:	8099 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   dc788:	7265 6f72 2072 203d 6425 0000               error = %d..

000dc794 <_ZTVN5spark9WiFiClassE>:
	...
   dc79c:	856d 000d 8563 000d 8559 000d 850f 000d     m...c...Y.......
   dc7ac:	854d 000d 8541 000d 8535 000d 852d 000d     M...A...5...-...
   dc7bc:	8523 000d 8519 000d 85f5 000d               #...........

000dc7c8 <_ZTVN5spark12NetworkClassE>:
	...
   dc7d0:	858d 000d 8597 000d 85a1 000d 85ab 000d     ................
   dc7e0:	85b5 000d 85c1 000d 85cd 000d 85d9 000d     ................
   dc7f0:	85e1 000d 85eb 000d 85f5 000d               ............

000dc7fc <_ZSt7nothrow>:
	...

000dc7fd <_ctype_>:
   dc7fd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc80d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc81d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc82d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc83d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc84d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc85d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc86d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc87d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc900 <__sf_fake_stdin>:
	...

000dc920 <__sf_fake_stdout>:
	...

000dc940 <__sf_fake_stderr>:
	...
   dc960:	0043 4f50 4953 0058                         C.POSIX.

000dc968 <__month_lengths>:
   dc968:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc978:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc988:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc998:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc9a8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc9b8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc9c8 <fpi.5344>:
   dc9c8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc9d8:	0000 0000                                   ....

000dc9dc <fpinan.5380>:
   dc9dc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc9ec:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dc9fc:	0000 0000                                   ....

000dca00 <tinytens>:
   dca00:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dca10:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dca20:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dca30:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dca40:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dca50:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dca60:	2575 006e 0000 0000                         u%n.....

000dca68 <__mprec_tens>:
   dca68:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dca78:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dca88:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dca98:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dcaa8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dcab8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dcac8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dcad8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dcae8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dcaf8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dcb08:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dcb18:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dcb28:	9db4 79d9 7843 44ea                         ...yCx.D

000dcb30 <__mprec_bigtens>:
   dcb30:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dcb40:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dcb50:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dcb58 <p05.5387>:
   dcb58:	0005 0000 0019 0000 007d 0000               ........}...

000dcb64 <link_const_variable_data_end>:
   dcb64:	000d4721 	.word	0x000d4721
   dcb68:	000d4aed 	.word	0x000d4aed
   dcb6c:	000d4ec9 	.word	0x000d4ec9
   dcb70:	000d5401 	.word	0x000d5401
   dcb74:	000d55f3 	.word	0x000d55f3
   dcb78:	000d5c61 	.word	0x000d5c61
   dcb7c:	000d608d 	.word	0x000d608d
   dcb80:	000d61e9 	.word	0x000d61e9
   dcb84:	000d622d 	.word	0x000d622d
   dcb88:	000d63ff 	.word	0x000d63ff
   dcb8c:	000d6403 	.word	0x000d6403
   dcb90:	000d6407 	.word	0x000d6407
   dcb94:	000d640b 	.word	0x000d640b
   dcb98:	000d69f1 	.word	0x000d69f1
   dcb9c:	000d6a55 	.word	0x000d6a55
   dcba0:	000d7069 	.word	0x000d7069
   dcba4:	000d71cd 	.word	0x000d71cd
   dcba8:	000d7321 	.word	0x000d7321
   dcbac:	000d7369 	.word	0x000d7369
   dcbb0:	000d7f29 	.word	0x000d7f29
   dcbb4:	000d8579 	.word	0x000d8579
   dcbb8:	000d86c1 	.word	0x000d86c1
   dcbbc:	000d89e9 	.word	0x000d89e9
   dcbc0:	000d8a6d 	.word	0x000d8a6d
   dcbc4:	000d8b31 	.word	0x000d8b31
   dcbc8:	000d8bf5 	.word	0x000d8bf5

000dcbcc <link_constructors_end>:
   dcbcc:	00000000 	.word	0x00000000
